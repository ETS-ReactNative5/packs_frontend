{"version":3,"sources":["constants/formFields.constant.js","hocs/formItem.hoc.js","../../common/constants/solutionproposalCreateCP.js","../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","forms/CreateCP/solutionProposalCreateCP.form.js"],"names":["FORM_ELEMENT_TYPES","INPUT","MULTIPLE_CHECKBOX","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","SWITCH","HIDDEN","DATE","CASCADER","Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","Item","label","charAt","toUpperCase","slice","size","Dragger","style","maxHeight","width","className","p1","p2","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","radioOptions","onChange","date","checkOptions","valuePropName","FLCSpecification","crateSpecification","palletSpecification","pPBoxSpecifications","palletizedPPBoxSpecifications","plasticPalletSpecifications","covertArray","arr","specification","quantity","quantity_per_kit","rate","total_cost","month","dep_cost","solutionProposalCreateCPFormFields","placeholder","formListSolutionProposalCreateCPFormFields","disabled","SolutionProposalCreateCPForm","id","onCancel","onNext","lead","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","submit","a","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","spinning","initialValues","onFinish","layout","onFieldsChange","setFieldsValue","solutions","concat","autoComplete","orientation","solution_flc","solution_fsc","solution_crate","solution_ppbox","solution_palletized_box","solution_palletized_crate","solution_pp","solution_stacking_nesting","solution_wp","justifyContent","idx","span","formItem","List","fields","add","remove","field","align","fieldKey","justify","htmlType","onClick","ArrowRightOutlined"],"mappings":"6FAAA,kCAAO,IAAMA,EAAqB,CAChCC,MAAO,QACPC,kBAAmB,oBACnBC,aAAc,eACdC,SAAU,WACVC,SAAU,WACVC,SAAU,WACVC,OAAQ,SACRC,QAAS,UACTC,aAAc,eACdC,eAAgB,iBAChBC,aAAc,eACdC,MAAO,QACPC,OAAQ,SACRC,OAAQ,SACRC,KAAM,OACNC,SAAU,YAMJhB,EAAmBQ,S,uOCNnBS,E,IAAAA,OACFC,EAAgB,IAASC,MAmCzBC,EAAQ,CACZC,KAAM,OACNC,OA5BsB,SAACC,GACvB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAG3BC,YAAW,WAEP,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,iBACL,QACA,WACEL,EAAQG,EAAOG,WAEjB,GAGER,GACFK,EAAOI,cAAcT,KAKxB,UA4KQU,IAxJE,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,IAAKC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAC7DC,EAAc,GAOlB,OANIH,GACEA,EAAOG,cACTA,EAAcH,EAAOG,aAIjBJ,GACN,KAAKrC,IAAmBC,MACtB,OACE,sBAAMyC,KAAN,eACER,IAAKA,EACLS,MAAOH,EAAU,KAAOD,GAAeL,EAAIU,OAAO,GAAGC,cAAgBX,EAAIY,MAAM,GAC/EzB,KAAMa,EACNC,MAAOA,GACHM,GACJ,uCAAWL,EAAX,CAAmBW,KAAK,aAK9B,KAAK/C,IAAmBG,aACtB,OACE,sBAAMuC,KAAN,eACER,IAAKA,EACLS,MAAOH,EAAU,KAAOD,GAAeL,EAAIU,OAAO,GAAGC,cAAgBX,EAAIY,MAAM,GAC/EzB,KAAMa,EACNC,MAAOA,GACHM,GACJ,uCAAiBL,EAAjB,CAAyBW,KAAK,aAIpC,KAAK/C,IAAmBU,eACtB,OACE,sBAAMgC,KAAN,eACER,IAAKA,EACLS,MAAOH,EAAU,KAAOD,GAAeL,EAAIU,OAAO,GAAGC,cAAgBX,EAAIY,MAAM,GAC/EzB,KAAMa,EACNC,MAAOA,GACHM,GACJ,sBAAQO,QAAR,iBAAoBZ,EAAYhB,EAAhC,CAAuC6B,MAAO,CAAEC,UAAW,OAAQC,MAAO,WACxE,uBAAGC,UAAU,wBACX,kBAAC,IAAD,CAAMf,KAAK,WAEZC,EACC,oCACE,uBAAGc,UAAU,uBAAuBd,EAAOe,IAC3C,uBAAGD,UAAU,uBAAuBd,EAAOgB,KAE3C,OAKZ,KAAKtD,IAAmBO,OACtB,OACE,sBAAMmC,KAAN,eACEa,cAAY,EACZrB,IAAKA,EACLS,MAAOH,EAAU,KAAOD,GAAeL,EAAIU,OAAO,GAAGC,cAAgBX,EAAIY,MAAM,GAC/EzB,KAAMa,EACNC,MAAOA,GACHM,GACJ,sBAAYL,EACTE,EAAOkB,cAAcC,KAAI,SAACC,EAAMC,GAAP,OACxB,kBAAC1C,EAAD,CACEiB,IAAKyB,EAAMC,WACXC,OAAQH,EAAKpB,EAAOwB,aACpBC,MAAOL,EAAKK,OAASL,EAAKpB,EAAOJ,MAAQwB,GACxCpB,EAAOwB,YACN,0BAAMb,MAAO,CAAEe,SAAU,GAAIC,WAAY,SACtCP,EAAKpB,EAAOwB,cAGfJ,EAAKf,OAASe,EAAKpB,EAAOJ,MAAQwB,EAEnCpB,EAAO4B,SACN,yBAAKd,UAAU,MAAMH,MAAO,CAAEkB,SAAU,SACrC7B,EAAO4B,SAAST,KAAI,SAACW,GAAD,OACnB,0BAAMnB,MAAO,CAAEe,SAAU,GAAIK,WAAY,EAAGC,YAAa,IAAMZ,EAAKU,QAGtE,WAOhB,KAAKpE,IAAmBY,MACtB,OACE,sBAAM8B,KAAN,eACER,IAAKA,EACLS,MAAOH,EAAU,KAAOD,GAAeL,EAAIU,OAAO,GAAGC,cAAgBX,EAAIY,MAAM,GAC/EzB,KAAMa,EACNC,MAAOA,GACHM,GACJ,sBAAOtB,MAAP,CAAa4C,MAAM,OAChBzB,EAAOiC,aAAad,KAAI,SAACC,GAAD,OACvB,uBAAOxB,IAAKwB,EAAKK,MAAOA,MAAOL,EAAKK,OACjCL,EAAKf,YAOlB,KAAK3C,IAAmBe,KACtB,OACE,sBAAM2B,KAAN,eACER,IAAKA,GACDO,EAFN,CAGEE,MAAOH,EAAU,KAAOD,GAAeL,EAAIU,OAAO,GAAGC,cAAgBX,EAAIY,MAAM,GAC/EzB,KAAMa,EACNC,MAAOA,IACP,uBAAYqC,SAAU,SAACC,QAG7B,KAAKzE,IAAmBE,kBACtB,OACE,sBAAMwC,KAAN,eACER,IAAKA,EACLS,MAAOH,EAAU,KAAOD,GAAeL,EAAIU,OAAO,GAAGC,cAAgBX,EAAIY,MAAM,GAC/EzB,KAAMa,EACNC,MAAOA,GACHM,GACJ,kBAACvB,EAAD,CAAesD,SAAUlC,EAAOkC,UAC7BlC,EAAOoC,aAAajB,KAAI,SAACW,GAAD,OACvB,uBAAUL,MAAOK,EAAEL,OAAQK,EAAEzB,YAKvC,KAAK3C,IAAmBa,OACtB,OACE,sBAAM6B,KAAN,eACER,IAAKA,EACLyC,cAAc,WACVlC,EAHN,CAIEE,MAAOH,EAAU,KAAOD,GAAeL,EAAIU,OAAO,GAAGC,cAAgBX,EAAIY,MAAM,GAC/EzB,KAAMa,EACNC,MAAOA,IACP,sBAAYC,IAGlB,QACE,OAAO,Q,uUCvMPwC,EAAmB,CACvB,gBACA,gBACA,kBACA,aACA,cAEIC,EAAqB,CACzB,aADsB,OAEnBD,GAECE,EAAsB,CAC1B,iBACA,mBAFuB,OAGpBF,GAGCG,EAAsB,GAItBC,EAAgC,CACpC,iBACA,UAGIC,EAA8B,CAClC,kBAGIC,EAAY,SAACC,GACjB,OAAOA,EAAI1B,KAAI,SAAAC,GAAI,MAAG,CACpB0B,cAAc1B,EACd2B,SAAS,EACTC,iBAAiB,EACjBC,KAAK,GACLC,WAAW,EACXC,MAAM,GACNC,SAAS,QCpDAC,EAAqC,CAChD,CACEzD,IAAK,kBACLG,KAAMrC,IAAmBO,OACzB+B,OAAQ,CACNkB,cDR8B,CAClC,MACA,MACA,UACA,UACA,UACA,UACA,qBACA,qBACA,qBACA,qBACA,SACA,oBACA,iBACA,kBCJEjB,YAAY,mBAEd,CACEL,IAAK,OACLG,KAAMrC,IAAmBC,MACzBmC,OAAQ,CACNwD,YAAa,OACbvD,KAAK,UAEPE,YAAY,SA+EHsD,EAA6C,CACxD,CACE3D,IAAK,gBACLE,OAAQ,CACNwD,YAAa,gBACbE,UAAS,GAEXzD,KAAMrC,IAAmBC,MACzBsC,YAAa,iBAEf,CACEL,IAAK,WACLE,OAAQ,CACNwD,YAAa,qBACbvD,KAAK,UAEPA,KAAMrC,IAAmBC,MACzBqC,OAAQ,KACRC,YAAa,sBAEf,CACEL,IAAK,mBACLE,OAAQ,CACNwD,YAAa,UACbvD,KAAK,UAEPA,KAAMrC,IAAmBC,MACzBqC,OAAQ,KACRC,YAAa,WAEf,CACEL,IAAK,OACLE,OAAQ,CACNwD,YAAa,QAEfvD,KAAMrC,IAAmBC,MACzBsC,YAAa,QAEf,CACEL,IAAK,cACLE,OAAQ,CACNwD,YAAa,sBAEfvD,KAAMrC,IAAmBC,MACzBsC,YAAa,sBAEf,CACEL,IAAK,aACLE,OAAQ,CACNwD,YAAa,aACbvD,KAAK,UAEPA,KAAMrC,IAAmBC,MACzBqC,OAAQ,KACRC,YAAa,cAEf,CACEL,IAAK,QACLE,OAAQ,CACNwD,YAAa,SAEfvD,KAAMrC,IAAmBC,MACzBqC,OAAQ,KACRC,YAAa,SAEf,CACEL,IAAK,WACLE,OAAQ,CACNwD,YAAa,YAEfvD,KAAMrC,IAAmBC,MACzBqC,OAAQ,KACRC,YAAa,aC5JJwD,EAA+B,SAAC,GAAwC,EAAtCC,GAAuC,IAAnCC,EAAkC,EAAlCA,SAAcC,GAAoB,EAAzBC,KAAyB,EAApBD,QAAOE,EAAa,EAAbA,OAAa,EACtDC,oBAAS,GAD6C,mBAC5EC,EAD4E,KACpEC,EADoE,OAEpE,IAAKC,UAAbC,EAF4E,oBAG7EC,EAAWC,cACXC,EAASC,aAAY,SAAAC,GAAC,OAAGA,EAAEC,KAAKC,gBAEhCC,EAAM,uCAAG,WAAOF,GAAP,SAAAG,EAAA,6DACbX,GAAW,GADE,SAEPG,EAAS,CAAErE,KAAK8E,IACpBJ,KAAK,eAAKA,KAHC,OAIbR,GAAW,GACG,IAAXH,GACDF,IANW,2CAAH,sDAUZkB,qBAAW,WACG,IAAThB,IACDK,EAAKQ,SACLP,EAAS,CAAErE,KAAKgF,SAElB,CAACjB,IASH,OACE,uBAAMkB,SAAUhB,GACd,uBACEiB,cAAa,eAAOX,GACpBY,SAAUP,EACVR,KAAMA,EACNgB,OAAO,WAEPC,eAhBqB,SAACX,GFwBG,IAAC1E,EEvB3B0E,EAAK,IACHA,EAAK,GAAG1F,MACY,oBAAlB0F,EAAK,GAAG1F,KAAK,IACdoF,EAAKkB,eAAe,CAAEC,WFoBEvF,EEpB0B0E,EAAK,GAAGhD,MFqB3C,CACrB,IAAMmB,EAAY,CAAC,OAAO2C,OAAOjD,IACjC,IAAMM,EAAY,CAAC,OAAO2C,OAAOjD,IACjC,QAAUM,EAAY,CAAC,WAAW2C,OAAOhD,IACzC,QAAUK,EAAY,CAAC,WAAW2C,OAAOhD,IACzC,QAAUK,EAAY,CAAC,WAAW2C,OAAOhD,IACzC,QAAUK,EAAY,CAAC,WAAW2C,OAAOhD,IACzC,qBAAqBK,EAAY,CAAC,sBAAsB2C,OAAO/C,IAC/D,qBAAqBI,EAAY,CAAC,sBAAsB2C,OAAO/C,IAC/D,qBAAqBI,EAAY,CAAC,sBAAsB2C,OAAO/C,IAC/D,qBAAqBI,EAAY,CAAC,sBAAsB2C,OAAO/C,IAC/D,SAASI,EAAY,CAAC,UAAU2C,OAAO9C,IACvC,oBAAoBG,EAAY,CAAC,qBAAqB2C,OAAO7C,IAC7D,iBAAiBE,EAAY,CAAC,kBAAkB2C,OAAO5C,IACvD,gBAAgBC,EAAY,CAAC,iBAAiB2C,OAAO5C,KAEjC5C,OExBhByF,aAAa,OAEb,uBAASC,YAAY,QAArB,SACA,yBAAK3E,UAAU,YACZwD,EAAMoB,aAAe,kCAAiB,KACtCpB,EAAMqB,aAAe,kCAAiB,KACtCrB,EAAMsB,eAAiB,oCAAmB,KAC1CtB,EAAMuB,eAAiB,qCAAoB,KAC3CvB,EAAMwB,wBAA0B,sDAAqC,KACrExB,EAAMyB,0BAA2B,wDAAuC,KACxEzB,EAAM0B,YAAc,0CAAyB,KAC7C1B,EAAM2B,0BAA4B,wDAAuC,KACzE3B,EAAM4B,YAAc,0CAAyB,MAEhD,uBAAKvF,MAAO,CAAEwF,eAAgB,SAC3B9C,EAAmClC,KAAI,SAACC,EAAMgF,GAAP,OACtC,uBAAKC,KAAM,GACT,yBAAKzG,IAAKwG,EAAI9E,WAAYR,UAAU,OACjCwF,YAASlF,SAKlB,sBAAMmF,KAAN,CAAWxH,KAAK,cACb,SAACyH,EAAD,GAA6B,EAAlBC,IAAkB,EAAbC,OACf,OACE,6BACGF,EAAOrF,KAAI,SAACwF,EAAOtF,GAAR,OACV,uBAAKuF,MAAM,UACRrD,EAA2C/C,MAAM,EAAE,GAAGW,KAAI,SAACC,GAAD,OACzD,uBAAKiF,KAAM,GACT,yBAAKvF,UAAU,OACZwF,YAAS,2BACLlF,GADI,IAEPlB,QAAmB,IAAVmB,EACT8C,OACAnE,OAAQ,CACNG,YAAY,2BACPwG,GADM,IAGT5H,KAAM,CAAC4H,EAAM5H,KAAMqC,EAAKxB,KACxBiH,SAAU,CAACF,EAAME,SAAUzF,EAAKxB,gBAO3C2D,EAA2C/C,MAAM,EAAE,GAAGW,KAAI,SAACC,GAAD,OACzD,uBAAKiF,KAAM,GACT,yBAAKvF,UAAU,OACZwF,YAAS,2BACLlF,GADI,IAEPlB,QAAmB,IAAVmB,EACT8C,OACAnE,OAAQ,CACNG,YAAY,2BACPwG,GADM,IAET5H,KAAM,CAAC4H,EAAM5H,KAAMqC,EAAKxB,KACxBiH,SAAU,CAACF,EAAME,SAAUzF,EAAKxB,wBAaxD,uBAAKkH,QAAQ,iBACX,yBAAKhG,UAAU,OACb,uBAAQf,KAAK,UAAUgH,SAAS,SAASvD,UAAQ,GAAjD,UAGA,yBAAK1C,UAAU,QACf,uBAAQf,KAAK,UAAUiH,QAASrD,GAAhC,WAIF,uBAAQ5D,KAAK,OAAOgH,SAAS,UAC3B,kBAACE,EAAA,EAAD,CAAoBtG,MAAO,CAAEe,SAAS,WAQnC+B","file":"static/js/55.e411046b.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\n  INPUT: 'input',\n  MULTIPLE_CHECKBOX: 'MULTIPLE_CHECKBOX',\n  INPUT_NUMBER: 'input-number',\n  PASSWORD: 'password',\n  TEXTAREA: 'textarea',\n  MARKDOWN: 'markdown',\n  SELECT: 'select',\n  CAPTCHA: 'captcha',\n  MONTH_PICKER: 'month-picker',\n  FILE_DRAG_DROP: 'file-drag-drop',\n  RANGE_PICKER: 'range-picker',\n  RADIO: 'radio',\n  SWITCH: 'switch',\n  HIDDEN: 'hidden',\n  DATE: 'date',\n  CASCADER: 'cascader',\n};\n\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\n\nexport const CAPTCHA = {\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\n  name: 'captcha',\n  label: 'Captcha',\n  rules: [\n    {\n      required: process.env.NODE_ENV === 'production',\n      message: 'Please solve the captcha',\n    },\n  ],\n};\n","import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport { Icon } from '@ant-design/compatible';\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\n\nconst { Option } = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input {...kwargs} size='middle' />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber {...kwargs} size='middle' />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\n            <p className='ant-upload-drag-icon'>\n              <Icon type='inbox' />\n            </p>\n            {others ? (\n              <>\n                <p className='ant-upload-text p-1'>{others.p1}</p>\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={item[others.customTitle]}\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\n                    {item[others.customTitle]}\n                  </text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value='Ggg'>\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} />\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName='checked'\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","export const solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP BOX',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n]\n\nconst FLCSpecification = [\n  'Insert Type 1',\n  'Insert Type 2',\n  'Separator Sheet',\n  'Mould Cost',\n  'HDPE Trays'];\n\nconst crateSpecification = [\n  'Crate LID',\n  ...FLCSpecification\n];\nconst palletSpecification = [\n  'Palletized LID',\n  'Pallet 1200x100',\n  ...FLCSpecification\n];\n\nconst pPBoxSpecifications = [\n\n]\n\nconst palletizedPPBoxSpecifications = [\n  'Palletized LID',\n  'Pallet'\n]\n\nconst plasticPalletSpecifications = [\n  'Palletized LID',\n]\n\nconst covertArray=(arr)=>{\n  return arr.map(item=>({\n    specification:item,\n    quantity:0,\n    quantity_per_kit:0,\n    rate:'',\n    total_cost:0,\n    month:'',\n    dep_cost:''\n  }))\n}\n\n\nexport const getSpecifications = (type) => {\n  const specifications = {\n    'FLC':covertArray(['FLC'].concat(FLCSpecification)),\n    'FSC':covertArray(['FSC'].concat(FLCSpecification)),\n    'CRT6412':covertArray(['CRT6412'].concat(crateSpecification)),\n    'CRT6418':covertArray(['CRT6418'].concat(crateSpecification)),\n    'CRT6423':covertArray(['CRT6423'].concat(crateSpecification)),\n    'CRT6435':covertArray(['CRT6435'].concat(crateSpecification)),\n    'Palletized CRT6412':covertArray(['Palletized CRT6412'].concat(palletSpecification)),\n    'Palletized CRT6418':covertArray(['Palletized CRT6418'].concat(palletSpecification)),\n    'Palletized CRT6423':covertArray(['Palletized CRT6423'].concat(palletSpecification)),\n    'Palletized CRT6435':covertArray(['Palletized CRT6435'].concat(palletSpecification)),\n    'PP BOX':covertArray(['PP BOX'].concat(pPBoxSpecifications)),\n    'Palletized PP Box':covertArray(['Palletized PP Box'].concat(palletizedPPBoxSpecifications)),\n    'Plastic Pallet':covertArray(['Plastic Pallet'].concat(plasticPalletSpecifications)),\n    'Wooden Pallet':covertArray(['Wooden Pallet'].concat(plasticPalletSpecifications)),\n  };\n  return specifications[type];\n};\n\n\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\nimport { solutionAssetOptions } from '../../constants/solutionproposalCreateCP';\n\nexport const solutionProposalCreateCPFormFields = [\n  {\n    key: 'standard_assets',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: solutionAssetOptions,\n    },\n    customLabel:'Standard Assets'\n  },\n  {\n    key: 'cost',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Cost',\n      type:'number'\n    },\n    customLabel:'Cost'\n  },\n];\n\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\n//\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\n// mould_month = models.FloatField(default=0, blank=True, null=True)\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\n\n\nexport const formListSolutionProposalCreateCPFormFields = [\n  {\n    key: 'specification',\n    kwargs: {\n      placeholder: 'Specification',\n      disabled:true\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Specification',\n  },\n  {\n    key: 'quantity',\n    kwargs: {\n      placeholder: 'Total KIT Quantity',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total KIT Quantity',\n  },\n  {\n    key: 'quantity_per_kit',\n    kwargs: {\n      placeholder: 'Qyt/KIT',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Qyt/KIT',\n  },\n  {\n    key: 'rate',\n    kwargs: {\n      placeholder: 'Rate',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Rate',\n  },\n  {\n    key: 'tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Material Req',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Material Req',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: 'month',\n    kwargs: {\n      placeholder: 'Month',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Month',\n  },\n  {\n    key: 'dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Dep Cost',\n  },\n]\n//\n// export const formListSolutionProposalCreateCPFormFields = [\n//   {\n//     key: 'specification',\n//     kwargs: {\n//       placeholder: 'Specification',\n//       disabled:true\n//     },\n//     type: FORM_ELEMENT_TYPES.INPUT,\n//     customLabel: 'Specification',\n//   },\n//   {\n//     key: 'quantity',\n//     kwargs: {\n//       placeholder: 'Quantity',\n//       type:'number'\n//     },\n//     type: FORM_ELEMENT_TYPES.INPUT,\n//     others: null,\n//     customLabel: 'Quantity',\n//   },\n//   {\n//     key: 'quantity_per_kit',\n//     kwargs: {\n//       placeholder: 'Qyt/KIT',\n//       type:'number'\n//     },\n//     type: FORM_ELEMENT_TYPES.INPUT,\n//     others: null,\n//     customLabel: 'Qyt/KIT',\n//   },\n//   {\n//     key: 'rate',\n//     kwargs: {\n//       placeholder: 'Rate',\n//     },\n//     type: FORM_ELEMENT_TYPES.INPUT,\n//     customLabel: 'Rate',\n//   },\n//   {\n//     key: 'total_cost',\n//     kwargs: {\n//       placeholder: 'Total Cost',\n//       type:'number'\n//     },\n//     type: FORM_ELEMENT_TYPES.INPUT,\n//     others: null,\n//     customLabel: 'Total Cost',\n//   },\n//   {\n//     key: 'month',\n//     kwargs: {\n//       placeholder: 'Month',\n//     },\n//     type: FORM_ELEMENT_TYPES.INPUT,\n//     others: null,\n//     customLabel: 'Month',\n//   },\n//   {\n//     key: 'dep_cost',\n//     kwargs: {\n//       placeholder: 'Dep Cost',\n//     },\n//     type: FORM_ELEMENT_TYPES.INPUT,\n//     others: null,\n//     customLabel: 'Dep Cost',\n//   },\n// ]\n\n","import React, { useEffect, useState } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin, Tag } from 'antd';\nimport { ArrowRightOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  ADD_CREATE_CP_BASIC_DATA,\n  ADD_CREATE_CP_DATA,\n  STOP_STEP_LOADING,\n} from 'common/actions';\nimport { formListSolutionProposalCreateCPFormFields, solutionProposalCreateCPFormFields }\n  from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\nimport { getSpecifications } from 'common/constants/solutionproposalCreateCP';\n\nexport const SolutionProposalCreateCPForm = ({ id, onCancel,lead,onNext,active }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.createCPData))\n\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:ADD_CREATE_CP_DATA,\n      data:{ ...data } });\n    setLoading(false)\n    if(active === 1){\n      onNext();\n    }\n  }\n\n  useEffect( ()=>{\n    if(active!==1){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n  const handleFieldsChange = (data) => {\n    if(data[0]){\n      if(data[0].name){\n        if(data[0].name[0]==='standard_assets') {\n          form.setFieldsValue({ solutions:getSpecifications(data[0].value) })\n        }}}\n  }\n\n  return (\n    <Spin spinning={loading}>\n      <Form\n        initialValues={{ ...state }}\n        onFinish={submit}\n        form={form}\n        layout='vertical'\n        // hideRequiredMark\n        onFieldsChange={handleFieldsChange}\n        autoComplete='off'\n      >\n        <Divider orientation='left'>Capex</Divider>\n        <div className='row px-2'>\n          {state.solution_flc ? <Tag>FLC</Tag> : null}\n          {state.solution_fsc ? <Tag>FSC</Tag> : null}\n          {state.solution_crate ? <Tag>Crate</Tag> : null}\n          {state.solution_ppbox ? <Tag>PP Box</Tag> : null}\n          {state.solution_palletized_box ? <Tag>Solution Palletized Box</Tag> : null}\n          {state.solution_palletized_crate? <Tag>Solution Palletized Crate</Tag> : null}\n          {state.solution_pp ? <Tag>Solution PP</Tag> : null}\n          {state.solution_stacking_nesting ? <Tag>Solution Stacking Nesting</Tag> : null}\n          {state.solution_wp ? <Tag>Solution WP</Tag> : null}\n        </div>\n        <Row style={{ justifyContent: 'left' }}>\n          {solutionProposalCreateCPFormFields.map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Form.List name='solutions'>\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Row align='middle'>\n                    {formListSolutionProposalCreateCPFormFields.slice(0,1).map((item) => (\n                      <Col span={4}>\n                        <div className='p-2'>\n                          {formItem({\n                            ...item,\n                            noLabel: index !== 0,\n                            form,\n                            others: {\n                              formOptions: {\n                                ...field,\n                                // hidden:true,\n                                name: [field.name, item.key],\n                                fieldKey: [field.fieldKey, item.key],\n                              },\n                            },\n                          })}\n                        </div>\n                      </Col>\n                    ))}\n                    {formListSolutionProposalCreateCPFormFields.slice(1,7).map((item) => (\n                      <Col span={3}>\n                        <div className='p-2'>\n                          {formItem({\n                            ...item,\n                            noLabel: index !== 0,\n                            form,\n                            others: {\n                              formOptions: {\n                                ...field,\n                                name: [field.name, item.key],\n                                fieldKey: [field.fieldKey, item.key],\n                              },\n                            },\n                          })}\n                        </div>\n                      </Col>\n                    ))}\n                  </Row>\n                ))}\n              </div>\n            );\n          }}\n        </Form.List>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit' disabled>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n          <Button type='link' htmlType='submit'>\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default SolutionProposalCreateCPForm;\n\n"],"sourceRoot":""}
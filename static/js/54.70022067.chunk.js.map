{"version":3,"sources":["constants/formFields.constant.js","hocs/formItem.hoc.js","../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","forms/CreateCP/solutionProposalCreateCP.form.js"],"names":["FORM_ELEMENT_TYPES","INPUT","MULTIPLE_CHECKBOX","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","SWITCH","HIDDEN","DATE","CASCADER","Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","Item","label","charAt","toUpperCase","slice","size","Dragger","style","maxHeight","width","className","p1","p2","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","radioOptions","onChange","date","checkOptions","valuePropName","solutionProposalCreateCPFormFields","placeholder","stdAssetsProposalCreateCPFormFields","noStyle","disabled","min","createFields","arr","fields","getLabels","insertType","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","SolutionProposalCreateCPForm","id","onCancel","onNext","lead","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","setFields","labels","setLabels","submit","a","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","updateTotalKitQtysCols","useCallback","getFieldValue","forEach","setFieldsValue","updateMonthCols","handleFieldsChange","currentInputField","totalKitQtysCols","qtyPerKitCols","rateCols","totalMatReqCols","totalCostCols","monthCols","depCostCols","idx","totalMatReqVal","_","round","spinning","initialValues","insert_type","standard_assets","onFinish","layout","onFieldsChange","autoComplete","orientation","solution_flc","solution_fsc","solution_crate","solution_ppbox","solution_palletized_box","solution_palletized_crate","solution_pp","solution_stacking_nesting","solution_wp","justifyContent","span","formItem","justify","htmlType","onClick"],"mappings":"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QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,YACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,YACA,iBACA,SACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,YACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,YACA,iBACA,SACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,YACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,YACA,iBACA,SACA,kBACA,QACA,QACF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,YACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,YACA,iBACA,SACA,kBACA,QACA,QAEF,SAAS,CACP,UAEF,oBAAoB,CAClB,oBACA,iBACA,UAEF,iBAAiB,CACf,iBACA,kBAEF,gBAAgB,CACd,gBACA,mBAEkBjD,IAIXkD,EAAY,SAAClD,EAAKiD,GAmK7B,MAlKuB,CACrB,IAAmB,WAAbA,EAAsBJ,YAAa,CACvC,UACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,QACA,SAEF,IAAmB,WAAbI,EAAsBJ,YAAa,CACvC,UACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,QACA,SAEF,QAAuB,WAAbI,EAAsBJ,YAAa,CAC3C,UACA,YACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,YACA,QACA,SAEF,QAAuB,WAAbI,EAAsBJ,YAAa,CAC3C,UACA,YACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,YACA,QACA,SAEF,QAAuB,WAAbI,EAAsBJ,YAAa,CAC3C,UACA,YACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,YACA,QACA,SAEF,QAAuB,WAAbI,EAA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","file":"static/js/54.70022067.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\n  INPUT: 'input',\n  MULTIPLE_CHECKBOX: 'MULTIPLE_CHECKBOX',\n  INPUT_NUMBER: 'input-number',\n  PASSWORD: 'password',\n  TEXTAREA: 'textarea',\n  MARKDOWN: 'markdown',\n  SELECT: 'select',\n  CAPTCHA: 'captcha',\n  MONTH_PICKER: 'month-picker',\n  FILE_DRAG_DROP: 'file-drag-drop',\n  RANGE_PICKER: 'range-picker',\n  RADIO: 'radio',\n  SWITCH: 'switch',\n  HIDDEN: 'hidden',\n  DATE: 'date',\n  CASCADER: 'cascader',\n};\n\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\n\nexport const CAPTCHA = {\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\n  name: 'captcha',\n  label: 'Captcha',\n  rules: [\n    {\n      required: process.env.NODE_ENV === 'production',\n      message: 'Please solve the captcha',\n    },\n  ],\n};\n","import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport { Icon } from '@ant-design/compatible';\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\n\nconst { Option } = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input {...kwargs} size='middle' />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber {...kwargs} size='middle' />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\n            <p className='ant-upload-drag-icon'>\n              <Icon type='inbox' />\n            </p>\n            {others ? (\n              <>\n                <p className='ant-upload-text p-1'>{others.p1}</p>\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={item[others.customTitle]}\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\n                    {item[others.customTitle]}\n                  </text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value='Ggg'>\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} />\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName='checked'\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n//import { solutionAssetOptions } from '../../constants/solutionproposalCreateCP';\n\n\nconst solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP BOX',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n]\n\n\nexport const solutionProposalCreateCPFormFields = [\n  {\n    key: 'standard_assets',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: solutionAssetOptions,\n    },\n    customLabel:'Standard Assets'\n  },\n  {\n    key: 'insert_type',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: ['Insert','HDPE Tray'],\n    },\n    customLabel:'Insert Type'\n  },\n  {\n    key: 'cost',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Cost',\n      type:'number'\n    },\n    customLabel:'Cost'\n  },\n];\n\n\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\n\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\n// mould_month = models.FloatField(default=0, blank=True, null=True)\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\n\n\nexport const formListSolutionProposalCreateCPFormFields = [\n  {\n    key: 'specification',\n    kwargs: {\n      placeholder: 'Specification',\n      disabled:true\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Specification',\n  },\n  {\n    key: 'quantity',\n    kwargs: {\n      placeholder: 'Total KIT Quantity',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total KIT Quantity',\n  },\n  {\n    key: 'quantity_per_kit',\n    kwargs: {\n      placeholder: 'Qyt/KIT',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Qyt/KIT',\n  },\n  {\n    key: 'rate',\n    kwargs: {\n      placeholder: 'Rate',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Rate',\n  },\n  {\n    key: 'tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Material Req',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: 'month',\n    kwargs: {\n      placeholder: 'Month',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Month',\n  },\n  {\n    key: 'dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Dep Cost',\n  },\n]\n\nexport const stdAssetsProposalCreateCPFormFields = [\n  {\n    key: '_quantity',\n    kwargs: {\n      placeholder: 'Quantity',\n      type:'number'\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Kit Qty',\n  },\n  {\n    key: '_quantity_perkit',\n    kwargs: {\n      placeholder: 'Quantity/Kit',\n      type:'number'\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Quantity/Kit',\n  },\n  {\n    key: '_rate',\n    kwargs: {\n      placeholder: 'Rate',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'Rate',\n  },\n  {\n    key: '_tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Mat. Req.',\n      disabled: true,\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: '_total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type:'number',\n      disabled: true,\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: '_month',\n    kwargs: {\n      placeholder: 'Month',\n      type: 'number',\n      min: 0,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'Month',\n  },\n  {\n    key: '_dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'Dep Cost',\n  },\n]\n\nexport const createFields=(arr)=>{\n  let fields = [];\n  arr.map(key=>{\n    fields = [...fields,...stdAssetsProposalCreateCPFormFields.map(item=>({\n      ...item,key:`${key}${item.key}`\n    }))]\n    return null\n  })\n  return fields;\n}\n","import { createFields } from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\n\n\nexport const solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP BOX',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n]\n\nexport const getLabels = (type,insertType)=>{\n  const specifications = {\n    'FLC':insertType==='Insert'?[\n      'FLC',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'FLC',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'FSC':insertType==='Insert'?[\n      'FSC',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'FSC',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6412':insertType==='Insert'?[\n      'CRT6412',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'CRT6412',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6418':insertType==='Insert'?[\n      'CRT6418',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'CRT6418',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6423':insertType==='Insert'?[\n      'CRT6423',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'CRT6423',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6435':insertType==='Insert'?[\n      'CRT6435',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'CRT6435',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'Palletized CRT6412':insertType==='Insert'?[\n      'Palletized CRT6412',\n      'Crate Lid',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6412',\n      'Crate Lid',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'Palletized CRT6418':insertType==='Insert'?[\n      'Palletized CRT6418',\n      'Crate Lid',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6418',\n      'Crate Lid',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'Palletized CRT6423':insertType==='Insert'?[\n      'Palletized CRT6423',\n      'Crate Lid',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6423',\n      'Crate Lid',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',],\n    'Palletized CRT6435':insertType==='Insert'?[\n      'Palletized CRT6435',\n      'Crate Lid',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6435',\n      'Crate Lid',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'PP BOX':[\n      'PP BOX',\n    ],\n    'Palletized PP Box':[\n      'Palletized PP Box',\n      'Palletized Lid',\n      'Pallet',\n    ],\n    'Plastic Pallet':[\n      'Plastic Pallet',\n      'Palletized Lid',\n    ],\n    'Wooden Pallet':[\n      'Wooden Pallet',\n      'Palletized Lid',]\n  };\n  return specifications[type];\n}\n\n\nexport const getFields = (type,insertType) => {\n  const specifications = {\n    'FLC':insertType==='Insert'?createFields([\n      'std_ast',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'FSC':insertType==='Insert'?createFields([\n      'std_ast',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6412':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6418':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6423':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6435':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6412':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6418':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6423':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6435':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'PP BOX':insertType==='Insert'?createFields([\n      'std_ast',\n    ]):createFields([\n      'std_ast',\n    ]),\n    'Palletized PP Box':createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n    ]),\n    'Plastic Pallet':createFields([\n      'std_ast',\n      'palletized_lid',\n    ]),\n    'Wooden Pallet':createFields([\n      'std_ast',\n      'palletized_lid',\n    ])\n  };\n  return specifications[type];\n};\n\n\nexport const formatStr = (str,typeStr) => {\n  return `${str}_${typeStr}`;\n}\n\nexport const getFieldsByColumn = (type,insertType,typeStr) => {\n  const specifications = {\n    'FLC':insertType==='Insert'? [\n      formatStr('std_ast',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]:[\n      formatStr('std_ast',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ],\n    'FSC':insertType==='Insert'?[\n      formatStr('std_ast',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]:[\n      formatStr('std_ast',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ],\n    'CRT6412':insertType==='Insert'?[\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]:[\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ],\n    'CRT6418':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'CRT6423':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'CRT6435':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6412':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6418':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6423':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6435':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'PP BOX':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n    ]),\n    'Palletized PP Box':([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n    ]),\n    'Plastic Pallet':([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n    ]),\n    'Wooden Pallet':([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n    ])\n  };\n  return specifications[type];\n};\n\nexport const getDefaultMonthValue = type => {\n  switch (type) {\n    case \"std_ast\":\n      return 18;\n    case \"crate_lid\":\n      return 12;\n    case \"palletized_lid\":\n      return 12;\n    case \"insert1\":\n      return 12;\n    case \"insert2\":\n      return 12;\n    case \"sep_sheet\":\n      return 12;\n    case \"mould\":\n      return 18;\n    case \"hdpe\":\n      return 12;\n    default:\n      return 0;\n  }\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin, Tag } from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ArrowRightOutlined } from '@ant-design/icons';\nimport {\n\tADD_CREATE_CP_DATA,\n\tSTOP_STEP_LOADING,\n} from 'common/actions';\nimport { solutionProposalCreateCPFormFields , }\n\tfrom 'common/formFields/createCP/solutionProposalCreateCP.formFields';\nimport { getFields, getLabels,getFieldsByColumn,getDefaultMonthValue } from 'common/constants/solutionproposalCreateCP';\n\nimport _ from 'lodash';\n\n\nexport const SolutionProposalCreateCPForm = ({ id, onCancel,lead,onNext,active }) => {\n\tconst [loading,setLoading] = useState(false);\n\tconst [form] = Form.useForm();\n\tconst dispatch = useDispatch();\n\tconst state =  useSelector(e=>(e.data.createCPData))\n\tconst [fields,setFields] = useState(getFields('FLC','Insert'))\n\tconst [labels,setLabels] = useState(getLabels('FLC','Insert'))\n\tconst submit = async (data) =>{\n\t\tsetLoading(true)\n\t\tawait dispatch({ type:ADD_CREATE_CP_DATA,\n\t\t\tdata:{ ...data }\n\t\t});\n\t\tsetLoading(false)\n\t\tif(active === 1){\n\t\t\tonNext();\n\t\t}\n\t}\n\n\tuseEffect( ()=>{\n\t\tif(active!==1){\n\t\t\tform.submit()\n\t\t\tdispatch({ type:STOP_STEP_LOADING })\n\t\t}\n\t},[active])\n\n\tconst updateTotalKitQtysCols = useCallback(() => {\n\t\tif (form.getFieldValue('kit_based_on_usage_ratio')) {\n\t\t\tconst totalKitQtysCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'quantity');\n\t\t\ttotalKitQtysCols.forEach(i => {\n\t\t\t\tif (!form.getFieldValue(i)) {\n\t\t\t\t\tif (i!==\"mould_quantity\") {\n\t\t\t\t\t\tform.setFieldsValue({\n\t\t\t\t\t\t\t[i] : form.getFieldValue('kit_based_on_usage_ratio'),\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tform.setFieldsValue({\n\t\t\t\t\t\t\t['mould_quantity'] : 1,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t},[form])\n\n\tconst updateMonthCols = useCallback(() => {\n\t\tconst monthCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'month');\n\t\tmonthCols.forEach(i => {\n\t\t\tif (!form.getFieldValue(i)) {\n\t\t\t\tform.setFieldsValue({\n\t\t\t\t\t[i] : getDefaultMonthValue(i.slice(0,-6)),\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t},[form])\n\n\tuseEffect( () => {\n\t\tupdateTotalKitQtysCols();\n\t\tupdateMonthCols();\n\t},[form])\n\n\tconst handleFieldsChange = useCallback(data => {\n\t\t\n\t\tif(data[0]){\n\t\t\tif(data[0].name) {\n\n\t\t\t\tconst currentInputField = data[0].name[0];\n        \t\tconsole.log(currentInputField);\n\n\t\t\t\tif (currentInputField===\"standard_assets\" || currentInputField==='insert_type') {\n\t\t\t\t\tsetFields(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\n\t\t\t\t\tsetLabels(getLabels(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\n\t\t\t\t\tupdateTotalKitQtysCols();\n\t\t\t\t\tupdateMonthCols();\n\t\t\t\t} else {\n\t\t\t\t\tconst totalKitQtysCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'quantity');\n\t\t\t\t\tconst qtyPerKitCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'quantity_perkit');\n\t\t\t\t\tconst rateCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'rate');\n\t\t\t\t\tconst totalMatReqCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'tot_mat_req');\n\t\t\t\t\tconst totalCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'total_cost');\n\t\t\t\t\tconst monthCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'month');\n\t\t\t\t\tconst depCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'dep_cost');\n\t\n\t\t\t\t\tqtyPerKitCols.forEach((i,idx) => {\n\t\t\t\t\t\tif (currentInputField===totalKitQtysCols[idx] || currentInputField===qtyPerKitCols[idx] || currentInputField===rateCols[idx] || currentInputField===totalMatReqCols[idx] || currentInputField===totalCostCols[idx] || currentInputField===monthCols[idx] || currentInputField===depCostCols[idx]) {\n\t\t\t\t\t\t\tif (form.getFieldValue(totalKitQtysCols[idx]) && form.getFieldValue(qtyPerKitCols[idx])) {\n\t\t\t\t\t\t\t\tconst totalMatReqVal = form.getFieldValue(totalKitQtysCols[idx])*form.getFieldValue(qtyPerKitCols[idx]);\n\t\t\t\t\t\t\t\tform.setFieldsValue({\n\t\t\t\t\t\t\t\t\t[totalMatReqCols[idx]] : totalMatReqVal,\n\t\t\t\t\t\t\t\t\t[totalCostCols[idx]] : form.getFieldValue(rateCols[idx])*totalMatReqVal,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tform.setFieldsValue({\n\t\t\t\t\t\t\t\t\t[totalMatReqCols[idx]] : 0,\n\t\t\t\t\t\t\t\t\t[totalCostCols[idx]] : 0,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( form.getFieldValue(totalCostCols[idx]) && form.getFieldValue(monthCols[idx]) && form.getFieldValue(\"yantra_cycle\") ) {\n\t\t\t\t\t\t\t\tform.setFieldsValue({\n\t\t\t\t\t\t\t\t\t[depCostCols[idx]] : _.round((( form.getFieldValue(totalCostCols[idx])/form.getFieldValue(monthCols[idx]) )/30)*form.getFieldValue(\"yantra_cycle\"),2),\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tform.setFieldsValue({\n\t\t\t\t\t\t\t\t\t[depCostCols[idx]] : 0,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t},[form,fields,labels])\n\n\t// const handleFieldsChange = (data) => {\n\t//   if(data[0]){\n\t//     if(data[0].name){\n\t//       if(data[0].name[0]==='standard_assets') {\n\t//         // console.log(getFields(data[0].value),form.getFieldValue('insert_type'),'Ggg')\n\t//         setFields(getFields(data[0].value,form.getFieldValue('insert_type')))\n\t//         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\n\t//       }\n\t//       if(data[0].name[0]==='insert_type') {\n\t//         // console.log(form.getFieldValue('standard_assets'),getFields(data[0].value),'Ggg')\n\t//         setFields(getFields(form.getFieldValue('standard_assets'),data[0].value))\n\t//         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\n\t//       }}}\n\t// }\n\n\treturn (\n\t\t<Spin spinning={loading}>\n\t\t\t<Form\n\t\t\t\tinitialValues={{\n\t\t\t\t\t...state,\n\t\t\t\t\tinsert_type:state.insert_type||'Insert',\n\t\t\t\t\tstandard_assets:state.standard_assets || 'FLC' }}\n\t\t\t\tonFinish={submit}\n\t\t\t\tform={form}\n\t\t\t\tlayout='vertical'\n\t\t\t\t// hideRequiredMark\n\t\t\t\tonFieldsChange={handleFieldsChange}\n\t\t\t\tautoComplete='off'\n\t\t\t>\n\t\t\t\t<Divider orientation='left'>Capex</Divider>\n\t\t\t\t<div className='row px-2'>\n\t\t\t\t\t{state.solution_flc ? <Tag>FLC</Tag> : null}\n\t\t\t\t\t{state.solution_fsc ? <Tag>FSC</Tag> : null}\n\t\t\t\t\t{state.solution_crate ? <Tag>Crate</Tag> : null}\n\t\t\t\t\t{state.solution_ppbox ? <Tag>PP Box</Tag> : null}\n\t\t\t\t\t{state.solution_palletized_box ? <Tag>Solution Palletized Box</Tag> : null}\n\t\t\t\t\t{state.solution_palletized_crate? <Tag>Solution Palletized Crate</Tag> : null}\n\t\t\t\t\t{state.solution_pp ? <Tag>Solution PP</Tag> : null}\n\t\t\t\t\t{state.solution_stacking_nesting ? <Tag>Solution Stacking Nesting</Tag> : null}\n\t\t\t\t\t{state.solution_wp ? <Tag>Solution WP</Tag> : null}\n\t\t\t\t</div>\n\t\t\t\t<Row style={{ justifyContent: 'left' }}>\n\t\t\t\t\t{solutionProposalCreateCPFormFields.map((item, idx) => (\n\t\t\t\t\t\t<Col span={6}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2'>\n\t\t\t\t\t\t\t\t{formItem(item)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Row style={{ justifyContent: 'left' }}>\n\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t<div className='p-2 flex row justify-center'>\n\t\t\t\t\t\t\t<b></b>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Col>\n\t\t\t\t\t{[...fields].slice(0,7).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2 flex row justify-center'>\n\t\t\t\t\t\t\t\t<b>{item.customLabel}</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Row style={{ justifyContent: 'left' }}>\n\t\t\t\t\t{labels.slice(0,1).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2 flex row justify-center'>\n\t\t\t\t\t\t\t\t<b>{item}</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t\t{[...fields].slice(0,7).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2'>\n\t\t\t\t\t\t\t\t{formItem(item)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Row style={{ justifyContent: 'left' }}>\n\t\t\t\t\t{labels.slice(1,2).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2 flex row justify-center'>\n\t\t\t\t\t\t\t\t<b>{item}</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t\t{[...fields].slice(7,14).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2'>\n\t\t\t\t\t\t\t\t{formItem(item)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Row style={{ justifyContent: 'left' }}>\n\t\t\t\t\t{labels.slice(2,3).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2 flex row justify-center'>\n\t\t\t\t\t\t\t\t<b>{item}</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t\t{[...fields].slice(14,21).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2'>\n\t\t\t\t\t\t\t\t{formItem(item)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Row style={{ justifyContent: 'left' }}>\n\t\t\t\t\t{labels.slice(3,4).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2 flex row justify-center'>\n\t\t\t\t\t\t\t\t<b>{item}</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t\t{[...fields].slice(21,28).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2'>\n\t\t\t\t\t\t\t\t{formItem(item)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Row style={{ justifyContent: 'left' }}>\n\t\t\t\t\t{labels.slice(4,5).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2 flex row justify-center'>\n\t\t\t\t\t\t\t\t<b>{item}</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t\t{[...fields].slice(28,35).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2'>\n\t\t\t\t\t\t\t\t{formItem(item)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Row style={{ justifyContent: 'left' }}>\n\t\t\t\t\t{labels.slice(5,6).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2 flex row justify-center'>\n\t\t\t\t\t\t\t\t<b>{item}</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t\t{[...fields].slice(35,42).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2'>\n\t\t\t\t\t\t\t\t{formItem(item)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Row style={{ justifyContent: 'left' }}>\n\t\t\t\t\t{labels.slice(6,7).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2 flex row justify-center'>\n\t\t\t\t\t\t\t\t<b>{item}</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t\t{[...fields].slice(42,49).map((item, idx) => (\n\t\t\t\t\t\t<Col span={3}>\n\t\t\t\t\t\t\t<div key={idx.toString()} className='p-2'>\n\t\t\t\t\t\t\t\t{formItem(item)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t{/* <Form.List name='solutions'> */}\n\t\t\t\t{/*  {(fields, { add, remove }) => { */}\n\t\t\t\t{/*    return ( */}\n\t\t\t\t{/*      <div> */}\n\t\t\t\t{/*        {fields.map((field, index) => ( */}\n\t\t\t\t{/*          <Row align='middle'> */}\n\t\t\t\t{/*            {formListSolutionProposalCreateCPFormFields.slice(0,1).map((item) => ( */}\n\t\t\t\t{/*              <Col span={4}> */}\n\t\t\t\t{/*                <div className='p-2'> */}\n\t\t\t\t{/*                  {formItem({ */}\n\t\t\t\t{/*                    ...item, */}\n\t\t\t\t{/*                    noLabel: index !== 0, */}\n\t\t\t\t{/*                    form, */}\n\t\t\t\t{/*                    others: { */}\n\t\t\t\t{/*                      formOptions: { */}\n\t\t\t\t{/*                        ...field, */}\n\t\t\t\t{/*                        // hidden:true, */}\n\t\t\t\t{/*                        name: [field.name, item.key], */}\n\t\t\t\t{/*                        fieldKey: [field.fieldKey, item.key], */}\n\t\t\t\t{/*                      }, */}\n\t\t\t\t{/*                    }, */}\n\t\t\t\t{/*                  })} */}\n\t\t\t\t{/*                </div> */}\n\t\t\t\t{/*              </Col> */}\n\t\t\t\t{/*            ))} */}\n\t\t\t\t{/*            {[...createFields('std_ast')].slice(1,7).map((item) => ( */}\n\t\t\t\t{/*              <Col span={3}> */}\n\t\t\t\t{/*                <div className='p-2'> */}\n\t\t\t\t{/*                  {formItem({ */}\n\t\t\t\t{/*                    ...item, */}\n\t\t\t\t{/*                    noLabel: index !== 0, */}\n\t\t\t\t{/*                    form, */}\n\t\t\t\t{/*                    others: { */}\n\t\t\t\t{/*                      formOptions: { */}\n\t\t\t\t{/*                        ...field, */}\n\t\t\t\t{/*                        name: [field.name, item.key], */}\n\t\t\t\t{/*                        fieldKey: [field.fieldKey, item.key], */}\n\t\t\t\t{/*                      }, */}\n\t\t\t\t{/*                    }, */}\n\t\t\t\t{/*                  })} */}\n\t\t\t\t{/*                </div> */}\n\t\t\t\t{/*              </Col> */}\n\t\t\t\t{/*            ))} */}\n\t\t\t\t{/*          </Row> */}\n\t\t\t\t{/*        ))} */}\n\t\t\t\t{/*      </div> */}\n\t\t\t\t{/*    ); */}\n\t\t\t\t{/*  }} */}\n\t\t\t\t{/* </Form.List> */}\n\t\t\t\t<Row justify='space-between'>\n\t\t\t\t\t<div className='row'>\n\t\t\t\t\t\t<Button type='primary' htmlType='submit' disabled>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<div className='p-2' />\n\t\t\t\t\t\t<Button type='primary' onClick={onCancel}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Button type='link' htmlType='submit'>\n\t\t\t\t\t\t<ArrowRightOutlined style={{ fontSize:30 }}  />\n\t\t\t\t\t</Button>\n\t\t\t\t</Row>\n\t\t\t</Form>\n\t\t</Spin>\n\t);\n};\n\nexport default SolutionProposalCreateCPForm;\n"],"sourceRoot":""}
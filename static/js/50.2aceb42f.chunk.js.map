{"version":3,"sources":["constants/formFields.constant.js","hocs/formItem.hoc.js","../../common/formFields/PFEP/PFEPProductDetails.formFields.js","forms/PFEP/PFEPProductDetails.form.js"],"names":["FORM_ELEMENT_TYPES","INPUT","MULTIPLE_CHECKBOX","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","SWITCH","HIDDEN","DATE","CASCADER","Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","Item","label","charAt","toUpperCase","slice","size","Dragger","style","maxHeight","width","className","p1","p2","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","radioOptions","onChange","date","checkOptions","valuePropName","PREPProductDetailsFormFields","required","message","placeholder","PFEPProductDetailsForm","id","onCancel","onNext","onDone","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","pfepData","submit","a","ADD_PFEP_DATA","spinning","orientation","onFinish","initialValues","part_name","part_number","volume_pm","dispatch_frequency","weight","length","breadth","height","layout","autoComplete","justifyContent","idx","span","formItem","justify","htmlType","disabled","onClick","ArrowRightOutlined"],"mappings":"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","file":"static/js/50.2aceb42f.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\r\n  INPUT: 'input',\r\n  MULTIPLE_CHECKBOX: 'MULTIPLE_CHECKBOX',\r\n  INPUT_NUMBER: 'input-number',\r\n  PASSWORD: 'password',\r\n  TEXTAREA: 'textarea',\r\n  MARKDOWN: 'markdown',\r\n  SELECT: 'select',\r\n  CAPTCHA: 'captcha',\r\n  MONTH_PICKER: 'month-picker',\r\n  FILE_DRAG_DROP: 'file-drag-drop',\r\n  RANGE_PICKER: 'range-picker',\r\n  RADIO: 'radio',\r\n  SWITCH: 'switch',\r\n  HIDDEN: 'hidden',\r\n  DATE: 'date',\r\n  CASCADER: 'cascader',\r\n};\r\n\r\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\r\n\r\nexport const CAPTCHA = {\r\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\r\n  name: 'captcha',\r\n  label: 'Captcha',\r\n  rules: [\r\n    {\r\n      required: process.env.NODE_ENV === 'production',\r\n      message: 'Please solve the captcha',\r\n    },\r\n  ],\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Upload,\r\n  Select,\r\n  Radio,\r\n  DatePicker,\r\n  Checkbox,\r\n  InputNumber,\r\n  message,\r\n  Switch,\r\n} from 'antd';\r\nimport { Icon } from '@ant-design/compatible';\r\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\r\n\r\nconst { Option } = Select;\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\n// const handleUplaod = (file) => {\r\n//   return new Promise(async (resolve, reject) => {\r\n//     const fileName = `nameThatIwant.type`;\r\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\r\n//     resolve(url);\r\n//   });\r\n\r\nconst onCustomRequest = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const ajaxResponseWasFine = true;\r\n\r\n    setTimeout(() => {\r\n      if (ajaxResponseWasFine) {\r\n        const reader = new FileReader();\r\n\r\n        reader.addEventListener(\r\n          'load',\r\n          () => {\r\n            resolve(reader.result);\r\n          },\r\n          false,\r\n        );\r\n\r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n      } else {\r\n        reject('error');\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nconst props = {\r\n  name: 'file',\r\n  action: onCustomRequest,\r\n  // onChange(info) {\r\n  //   const {status} = info.file;\r\n  //   if (status !== 'uploading') {\r\n  //     console.log(info.file, info.fileList);\r\n  //   }\r\n  //   if (status === 'done') {\r\n  //     message.success(`${info.file.name} file uploaded successfully.`);\r\n  //   } else if (status === 'error') {\r\n  //     message.error(`${info.file.name} file upload failed.`);\r\n  //   }\r\n  // },\r\n};\r\n\r\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\r\n  let formOptions = {};\r\n  if (others) {\r\n    if (others.formOptions) {\r\n      formOptions = others.formOptions;\r\n    }\r\n  }\r\n\r\n  switch (type) {\r\n    case FORM_ELEMENT_TYPES.INPUT: {\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Input {...kwargs} size='middle' />\r\n        </Form.Item>\r\n      );\r\n    }\r\n\r\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <InputNumber {...kwargs} size='middle' />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\r\n            <p className='ant-upload-drag-icon'>\r\n              <Icon type='inbox' />\r\n            </p>\r\n            {others ? (\r\n              <>\r\n                <p className='ant-upload-text p-1'>{others.p1}</p>\r\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\r\n              </>\r\n            ) : null}\r\n          </Upload.Dragger>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.SELECT:\r\n      return (\r\n        <Form.Item\r\n          shouldUpdate\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Select {...kwargs}>\r\n            {others.selectOptions.map((item, index) => (\r\n              <Option\r\n                key={index.toString()}\r\n                search={item[others.customTitle]}\r\n                value={item.value || item[others.key] || item}>\r\n                {others.customTitle ? (\r\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\r\n                    {item[others.customTitle]}\r\n                  </text>\r\n                ) : (\r\n                  item.label || item[others.key] || item\r\n                )}\r\n                {others.dataKeys ? (\r\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\r\n                    {others.dataKeys.map((i) => (\r\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\r\n                    ))}\r\n                  </div>\r\n                ) : null}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.RADIO:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Radio.Group value='Ggg'>\r\n            {others.radioOptions.map((item) => (\r\n              <Radio key={item.value} value={item.value}>\r\n                {item.label}\r\n              </Radio>\r\n            ))}\r\n          </Radio.Group>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.DATE:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <DatePicker onChange={(date) => console.log(date)} />\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <CheckboxGroup onChange={others.onChange}>\r\n            {others.checkOptions.map((i) => (\r\n              <Checkbox value={i.value}>{i.label}</Checkbox>\r\n            ))}\r\n          </CheckboxGroup>\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.SWITCH:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          valuePropName='checked'\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <Switch {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default FormItem;\r\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\r\n\r\nexport const PREPProductDetailsFormFields = [\r\n  {\r\n    key: 'part_name',\r\n    rules: [{ required: true, message: 'Please enter Part Name!' }],\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    kwargs: {\r\n      placeholder: 'Part Name',\r\n    },\r\n    customLabel: 'Part Name'\r\n  },\r\n  {\r\n    key: 'part_number',\r\n    kwargs: {\r\n      placeholder: 'Part Number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Part Number',\r\n  },\r\n  {\r\n    key: 'volume_pm',\r\n    rules: [{ required: true, message: 'Please enter Volume Per Month!' }],\r\n    kwargs: {\r\n      type: 'number',\r\n      placeholder: 'Volume Per Month',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Volume Per Month',\r\n  },\r\n  {\r\n    key: 'dispatch_frequency',\r\n    kwargs: {\r\n      placeholder: 'Dispatch Frequency',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Dispatch Frequency',\r\n  },\r\n  {\r\n    key: 'weight',\r\n    rules: [{ required: true, message: 'Please enter Weight(Kgs) !' }],\r\n    kwargs: {\r\n      type: 'number',\r\n      placeholder: 'Weight',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n  },\r\n  {\r\n    key: 'length',\r\n    kwargs: {\r\n      type: 'number',\r\n      placeholder: 'Length',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Length',\r\n  },\r\n  {\r\n    key: 'breadth',\r\n    kwargs: {\r\n      type: 'number',\r\n      placeholder: 'Breadth',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Breadth',\r\n  },{\r\n    key: 'height',\r\n    kwargs: {\r\n      type: 'number',\r\n      placeholder: 'Height',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n  },\r\n  {\r\n    key: 'hm_volume',\r\n    kwargs: {\r\n      placeholder: 'Highest Monthly Volume',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Highest Monthly Volume',\r\n  },{\r\n    key: 'lm_volume',\r\n    kwargs: {\r\n      placeholder: 'Lowest Monthly Volume',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Lowest Monthly Volume',\r\n  },\r\n  {\r\n    key: 'avg_dispatch_lot_size',\r\n    kwargs: {\r\n      placeholder: 'Average Dispatch Lot Size',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Average Dispatch Lot Size',\r\n  },\r\n  {\r\n    key: 'current_trans_mode',\r\n    kwargs: {\r\n      placeholder: 'Current Transportation Mode',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Current Transportation Mode',\r\n  },\r\n  {\r\n    key: 'critical_Area',\r\n    kwargs: {\r\n      placeholder: 'Critical Area, If Any?',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Critical Area, If Any?',\r\n  },\r\n  {\r\n    key: 'new_part_or_existing_flow',\r\n    kwargs: {\r\n      placeholder: 'New Part or Existing flow?',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    customLabel: 'New Part or Existing flow?',\r\n  },\r\n\r\n  {\r\n    key: 'greasy_or_oily',\r\n    kwargs: {\r\n      placeholder: 'Is Part Greasy or Oily?',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    customLabel: 'Is Part Greasy or Oily?',\r\n  },\r\n  {\r\n    key: 'part_cad_data',\r\n    kwargs: {\r\n      placeholder: 'Part CAD Data (2D, 3D drawing, if available)',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Part CAD Data',\r\n  },\r\n  {\r\n    key: 'precautions',\r\n    kwargs: {\r\n      placeholder: 'Precautions to be consider?',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Precautions or Special Measures?',\r\n  },\r\n  {\r\n    key: 'product_remark',\r\n    kwargs: {\r\n      placeholder: 'Remark',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Remark',\r\n  },\r\n]\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Col, Row, Button, Divider, Spin } from 'antd';\r\nimport formItem from 'hocs/formItem.hoc';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_PFEP_DATA } from 'common/actions';\r\nimport { PREPProductDetailsFormFields } from 'common/formFields/PFEP/PFEPProductDetails.formFields';\r\nimport { ArrowRightOutlined } from '@ant-design/icons';\r\n\r\nexport const PFEPProductDetailsForm = ({ id, onCancel,onDone,onNext }) => {\r\n  const [loading,setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const state =  useSelector(e=>(e.data.pfepData))\r\n\r\n  const submit = async (data) =>{\r\n    setLoading(true)\r\n    await dispatch({ type:ADD_PFEP_DATA,data });\r\n    setLoading(false)\r\n    onNext();\r\n  }\r\n  // useEffect(()=>{\r\n    // form.setFieldsValue({\r\n    //     part_name:state.part_name?state.part_name:null,\r\n    //     part_number:state.part_number?state.part_number:null,\r\n    //     volume_pm:state.volume_pm?state.volume_pm:null,\r\n    //     dispatch_frequency:state.dispatch_frequency?state.dispatch_frequency:null,\r\n    //     weight:state.weight?state.weight:null,\r\n    //     length:state.length?state.length:null,\r\n    //     breadth:state.breadth?state.breadth:null,\r\n    //     height:state.height?state.height:null,\r\n    //   })\r\n  // },[state])\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <Divider orientation='left'>Product Details Form</Divider>\r\n      <Form\r\n        onFinish={submit}\r\n        initialValues={{\r\n          part_name:state.part_name?state.part_name:null,\r\n          part_number:state.part_number?state.part_number:null,\r\n          volume_pm:state.volume_pm?state.volume_pm:null,\r\n          dispatch_frequency:state.dispatch_frequency?state.dispatch_frequency:null,\r\n          weight:state.weight?state.weight:null,\r\n          length:state.length?state.length:null,\r\n          breadth:state.breadth?state.breadth:null,\r\n          height:state.height?state.height:null,\r\n        }}\r\n        form={form}\r\n        layout='vertical'\r\n        // hideRequiredMark\r\n        autoComplete='off'\r\n      >\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {PREPProductDetailsFormFields.slice(0, 4).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {PREPProductDetailsFormFields.slice(4, 8).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {PREPProductDetailsFormFields.slice(8,12).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {PREPProductDetailsFormFields.slice(12,15).map((item, idx) => (\r\n            <Col span={8}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {PREPProductDetailsFormFields.slice(15,18).map((item, idx) => (\r\n            <Col span={8}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row justify='space-between'>\r\n          <div className='row'>\r\n            <Button type='primary' htmlType='submit' disabled>\r\n              Submit\r\n            </Button>\r\n            <div className='p-2' />\r\n            <Button type='primary' onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <Button type='link' htmlType='submit'>\r\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\r\n          </Button>\r\n        </Row>\r\n      </Form>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default PFEPProductDetailsForm;\r\n\r\n"],"sourceRoot":""}
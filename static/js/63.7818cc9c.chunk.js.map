{"version":3,"sources":["hocs/formItem.hoc.js","../../common/formFields/createCP/logisticsCreateCP.formFields.js","forms/CreateCP/logisticsCreateCP.form.js"],"names":["Option","CheckboxGroup","Group","getFinalStringForSearch","searchKeys","customTitle","item","s","concat","forEach","i","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","FORM_ELEMENT_TYPES","INPUT","Item","label","charAt","toUpperCase","slice","size","INPUT_NUMBER","FILE_DRAG_DROP","Dragger","style","maxHeight","width","className","p1","p2","SELECT","shouldUpdate","selectOptions","map","index","toString","search","value","fontSize","fontWeight","dataKeys","flexWrap","marginLeft","marginRight","RADIO","radioOptions","DATE","onChange","date","MONTH_PICKER","picker","MULTIPLE_CHECKBOX","checkOptions","SWITCH","valuePropName","logisticCreateCPFormFields","placeholder","noStyle","disabled","LogisticCreateCPForm","id","onCancel","active","onDone","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","submit","a","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","handleFieldsChange","useCallback","currentInputField","getFieldValue","setFieldsValue","ifNanReturnZero","spinning","orientation","onFinish","initialValues","layout","onFieldsChange","autoComplete","justifyContent","idx","span","formItem","justify","htmlType","onClick","ArrowRightOutlined"],"mappings":"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","file":"static/js/63.7818cc9c.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport {Icon} from '@ant-design/compatible';\nimport {FORM_ELEMENT_TYPES} from 'constants/formFields.constant';\n\nconst {Option} = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst getFinalStringForSearch = (searchKeys, customTitle, item) => {\n  let s = '';\n  if (item[customTitle]) s = s.concat(item[customTitle]);\n  searchKeys.forEach((i) => {\n    if (item[i]) {\n      s = s.concat(' ');\n      s = s.concat(item[i]);\n    }\n  });\n  return s;\n};\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({key, rules, kwargs, type, others, customLabel, noLabel}) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input size=\"middle\" {...kwargs} />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber size=\"middle\" {...kwargs} />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{maxHeight: '75px', width: '150px'}}>\n            <p className=\"ant-upload-drag-icon\">\n              <Icon type=\"inbox\" />\n            </p>\n            {others ? (\n              <>\n                <p className=\"ant-upload-text p-1\">{others.p1}</p>\n                <p className=\"ant-upload-hint p-1\">{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={\n                  others.searchKeys\n                    ? getFinalStringForSearch(others.searchKeys, others.customTitle, item)\n                    : item[others.customTitle]\n                }\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{fontSize: 13, fontWeight: 'bold'}}>{item[others.customTitle]}</text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className=\"row\" style={{flexWrap: 'wrap'}}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{fontSize: 11, marginLeft: 5, marginRight: 5}}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value=\"Ggg\">\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker\n            onChange={(date) => console.log(date)}\n            style={others ? (others.style ? others.style : null) : null}\n          />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MONTH_PICKER:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} picker=\"month\" />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName=\"checked\"\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","// min_warehouse = models.FloatField(default=0, blank=True, null=True)\n// transportation_w1_c1 = models.FloatField(default=0, blank=True, null=True)\n// transportation_c2_w2 = models.FloatField(default=0, blank=True, null=True)\n// transportation_w2_w1 = models.FloatField(default=0, blank=True, null=True)\n// total_cost_supply_chain = models.FloatField(default=0, blank=True, null=True)\n// labor_cost_perton = models.FloatField(default=0, blank=True, null=True)\n// repair_reconditioning = models.FloatField(default=0, blank=True, null=True)\n// other_cost = models.FloatField(default=0, blank=True, null=True)\n// total_cost = models.FloatField(default=0, blank=True, null=True)\n//\n\nimport { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\nexport const logisticCreateCPFormFields = [\n  {\n    key: 'min_warehouse',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Minimum Warehouse',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Minimum Warehouse'\n  },\n  {\n    key: 'transportation_w1_c1',\n    kwargs: {\n      placeholder: 'Transportation W1 C1',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Transportation W1 C1',\n  },\n  {\n    key: 'transportation_c2_w2',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Transportation C2 W2',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    customLabel: 'Transportation C2 W2'\n  },\n  {\n    key: 'transportation_w2_w1',\n    kwargs: {\n      placeholder: 'Transportation W2 W1',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Transportation W2 W1',\n  },\n  {\n    key: 'total_cost_supply_chain',\n    kwargs: {\n      placeholder: 'Total Cost Supply Chain',\n      disabled: true,\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    type: FORM_ELEMENT_TYPES.INPUT,\n\n    customLabel: 'Total Cost Supply Chain',\n  },\n  {\n    key: 'labor_cost_perton',\n    kwargs: {\n      placeholder: 'Labour Cost Perton',\n\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Labour Cost Perton',\n  },\n  {\n    key: 'repair_reconditioning',\n    kwargs: {\n      placeholder: 'Repair Reconditioning',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Repair Reconditioning',\n  },\n  {\n    key: 'other_cost',\n    kwargs: {\n      placeholder: 'Other Cost',\n\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Other Cost',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      disabled: true,\n\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Total Cost',\n  },\n\n]\n","import React, { useEffect, useState,useCallback } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin } from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\nimport { ArrowRightOutlined } from '@ant-design/icons';\nimport { logisticCreateCPFormFields }\n  from 'common/formFields/createCP/logisticsCreateCP.formFields';\n\nimport { ifNanReturnZero } from 'common/helpers/mrHelper';\n\n\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.createCPData))\n\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\n    setLoading(false)\n    if(active===2){\n      onNext();\n    }\n  }\n  useEffect( ()=>{\n    if(active!==2){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n\n\n  const handleFieldsChange = useCallback(data => {\n\n\t\tif(data[0]){\n\t\t\tif(data[0].name) {\n\n        const currentInputField = data[0].name[0];\n        console.log(currentInputField);\n\n\n        if (currentInputField===\"min_warehouse\" || currentInputField===\"transportation_w1_c1\" || currentInputField===\"transportation_c2_w2\" || currentInputField===\"transportation_w2_w1\" || currentInputField===\"total_cost_supply_chain\" || currentInputField===\"labor_cost_perton\" || currentInputField===\"repair_reconditioning\" || currentInputField===\"other_cost\" || currentInputField===\"total_cost\") {\n          if ( form.getFieldValue(\"min_warehouse\") || form.getFieldValue(\"transportation_w1_c1\") || form.getFieldValue(\"transportation_c2_w2\") || form.getFieldValue(\"transportation_w2_w1\") ) {\n            form.setFieldsValue({\n              \"total_cost_supply_chain\" : ifNanReturnZero(form.getFieldValue(\"min_warehouse\"))+ifNanReturnZero(form.getFieldValue(\"transportation_w1_c1\"))+ifNanReturnZero(form.getFieldValue(\"transportation_c2_w2\"))+ifNanReturnZero(form.getFieldValue(\"transportation_w2_w1\")),\n            })\n          } else {\n            form.setFieldsValue({\n              \"total_cost_supply_chain\" : 0,\n            })\n          }\n\n          if ( form.getFieldValue(\"total_cost_supply_chain\") || form.getFieldValue(\"labor_cost_perton\") || form.getFieldValue(\"repair_reconditioning\") || form.getFieldValue(\"other_cost\") ) {\n            form.setFieldsValue({\n              \"total_cost\" : ifNanReturnZero(form.getFieldValue(\"total_cost_supply_chain\"))+ifNanReturnZero(form.getFieldValue(\"labor_cost_perton\"))+ifNanReturnZero(form.getFieldValue(\"repair_reconditioning\"))+ifNanReturnZero(form.getFieldValue(\"other_cost\")),\n            })\n          } else {\n            form.setFieldsValue({\n              \"total_cost\" : 0,\n            })\n          }\n        }\n\n\t\t\t}\n\t\t}\n\n  \t},[form,])\n\n\n  return (\n    <Spin spinning={loading}>\n      <Divider orientation='left'>Logistic Details</Divider>\n      <Form\n        onFinish={submit}\n        form={form}\n        initialValues={\n          { ...state }\n        }\n        layout='vertical'\n        onFieldsChange={handleFieldsChange}\n        // hideRequiredMark\n        autoComplete='off'\n      >\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(8, 9).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(8, 9).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit' disabled>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n          <Button type='link' htmlType='submit'>\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default LogisticCreateCPForm;\n\n"],"sourceRoot":""}
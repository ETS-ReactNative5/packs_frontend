{"version":3,"sources":["constants/formFields.constant.js","hocs/formItem.hoc.js","../../common/formFields/PFEP/PFEPSolutionRequired.formFields.js","forms/PFEP/PFEPSolutionRequired.form.js"],"names":["FORM_ELEMENT_TYPES","INPUT","MULTIPLE_CHECKBOX","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","SWITCH","HIDDEN","DATE","CASCADER","Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","Item","label","charAt","toUpperCase","slice","size","Dragger","style","maxHeight","width","className","p1","p2","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","radioOptions","onChange","date","checkOptions","valuePropName","PREPSolutionRequiredFormFields","defaultValue","noStyle","placeholder","PFEPSolutionRequiredForm","onCancel","active","onNext","useState","loading","setLoading","dropdownVisible","setDropdownVisible","useForm","form","dispatch","useDispatch","state","useSelector","e","data","pfepData","submit","a","ADD_PFEP_DATA","useEffect","STOP_STEP_LOADING","menu","onClick","CloseOutlined","idx","formItem","spinning","orientation","onFinish","initialValues","layout","autoComplete","justifyContent","span","trigger","overlay","onVisibleChange","visible","preventDefault","DownOutlined","justify","htmlType","disabled","ArrowRightOutlined"],"mappings":"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","file":"static/js/50.e1069940.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\n  INPUT: 'input',\n  MULTIPLE_CHECKBOX: 'MULTIPLE_CHECKBOX',\n  INPUT_NUMBER: 'input-number',\n  PASSWORD: 'password',\n  TEXTAREA: 'textarea',\n  MARKDOWN: 'markdown',\n  SELECT: 'select',\n  CAPTCHA: 'captcha',\n  MONTH_PICKER: 'month-picker',\n  FILE_DRAG_DROP: 'file-drag-drop',\n  RANGE_PICKER: 'range-picker',\n  RADIO: 'radio',\n  SWITCH: 'switch',\n  HIDDEN: 'hidden',\n  DATE: 'date',\n  CASCADER: 'cascader',\n};\n\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\n\nexport const CAPTCHA = {\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\n  name: 'captcha',\n  label: 'Captcha',\n  rules: [\n    {\n      required: process.env.NODE_ENV === 'production',\n      message: 'Please solve the captcha',\n    },\n  ],\n};\n","import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport { Icon } from '@ant-design/compatible';\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\n\nconst { Option } = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input {...kwargs} size='middle' />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber {...kwargs} size='middle' />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\n            <p className='ant-upload-drag-icon'>\n              <Icon type='inbox' />\n            </p>\n            {others ? (\n              <>\n                <p className='ant-upload-text p-1'>{others.p1}</p>\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={item[others.customTitle]}\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\n                    {item[others.customTitle]}\n                  </text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value='Ggg'>\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} />\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName='checked'\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\nexport const PREPSolutionRequiredFormFields = [\n  {\n    key: 'solution_flc',\n    type: FORM_ELEMENT_TYPES.SWITCH,\n    others: {\n      defaultValue:false,\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'FLC',\n  },\n  {\n    key: 'solution_fsc',\n    type: FORM_ELEMENT_TYPES.SWITCH,\n    others: {\n      defaultValue:false,\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'FSC',\n  },\n  {\n    key: 'solution_crate',\n    type: FORM_ELEMENT_TYPES.SWITCH,\n    others: {\n      defaultValue:false,\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'Crate',\n  },\n  {\n    key: 'solution_ppbox',\n    type: FORM_ELEMENT_TYPES.SWITCH,\n    others: {\n      defaultValue:false,\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'PP Box',\n  },\n  {\n    key: 'solution_pp',\n    type: FORM_ELEMENT_TYPES.SWITCH,\n    others: {\n      defaultValue:false,\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'Plastic Pallet',\n  },\n\n  {\n    key: 'solution_palletized_crate',\n    type: FORM_ELEMENT_TYPES.SWITCH,\n    others: {\n      defaultValue:false,\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'Palletized Crate',\n  },\n  {\n    key: 'solution_palletized_box',\n    type: FORM_ELEMENT_TYPES.SWITCH,\n    others: {\n      defaultValue:false,\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'Palletized Box Solution',\n  },\n\n  {\n    key: 'solution_p2p_contact',\n    type: FORM_ELEMENT_TYPES.SWITCH,\n    customLabel: 'Part to Part Contact Permissible',\n    others: {\n      defaultValue:false,\n      formOptions:{ noStyle:true }\n    },\n  },\n  {\n    key: 'solution_stacking_nesting',\n    type: FORM_ELEMENT_TYPES.SWITCH,\n    customLabel: 'Stacking or Nesting of parts',\n    others: {\n      formOptions:{ noStyle:true }\n    } },\n  {\n    key: 'mul_parts_single_pocket',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Multiple Parts in Single Packet',\n    },\n    customLabel: 'Multiple Parts in Single Packet',\n    others: {\n      formOptions:{ noStyle:true }\n    },\n  },\n  {\n    key: 'min_max_margin',\n    kwargs: {\n      placeholder: 'Min/Max Margin from Wall',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Min/Max Margin from Wall',\n  },\n  {\n    key: 'other_spec',\n    kwargs: {\n      placeholder: 'Other Specification',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Other Specification',\n  },\n  {\n    key: 'parts_orientation',\n    kwargs: {\n      placeholder: 'Part Orientation',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Part Orientation',\n  },\n  {\n    key: 'parts_pm',\n    kwargs: {\n      placeholder: 'Parts/PM',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },  type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Parts/PM',\n  },\n]\n","import React, { useEffect, useState } from 'react';\nimport { Form, Col, Row,Menu ,Dropdown,Button, Divider, Spin, notification } from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_PFEP_DATA, STOP_STEP_LOADING } from 'common/actions';\nimport { PREPSolutionRequiredFormFields }\n  from 'common/formFields/PFEP/PFEPSolutionRequired.formFields';\nimport { ArrowRightOutlined, DownOutlined,CloseOutlined } from '@ant-design/icons';\n\nconst { Item }  = Menu;\n\nexport const PFEPSolutionRequiredForm = ({  onCancel,active,onNext }) => {\n  const [loading,setLoading] = useState(false);\n  const [dropdownVisible,setDropdownVisible] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.pfepData))\n\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:ADD_PFEP_DATA,data });\n    setLoading(false)\n    if(active ===4){onNext();}\n  }\n\n  useEffect( ()=>{\n    if(active!==4){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n  const menu = (\n    <Menu onClick={(e)=>{if(e.key==='close'){setDropdownVisible(false)}}}>\n      <Item key='close'>\n        <div className='row justify-between align-center'>\n          Close\n          <CloseOutlined />\n        </div>\n      </Item>\n      {PREPSolutionRequiredFormFields.slice(0, 9).map((item, idx) => (\n        <Item key={idx.toString()}>\n          <div className='row justify-between'>\n            <div style={{ flexWrap:'wrap',marginRight:'5px' }}>\n              {item.customLabel}\n              {' '}\n            </div>\n            {formItem(item)}\n          </div>\n        </Item>\n      ))}\n    </Menu>\n  );\n  return (\n    <Spin spinning={loading}>\n      <Divider orientation='left'>Solution Required</Divider>\n      <Form\n        onFinish={submit}\n        form={form}\n        initialValues={state}\n        layout='vertical'\n        // hideRequiredMark\n        autoComplete='off'\n      >\n        <Row style={{ justifyContent: 'left' }}>\n          {PREPSolutionRequiredFormFields.slice(9,10).map((item, idx) => (\n            <Col span={4}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n          {PREPSolutionRequiredFormFields.slice(10,14).map((item, idx) => (\n            <Col span={5}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {PREPSolutionRequiredFormFields.slice(9,10).map((item, idx) => (\n            <Col span={4}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n          {PREPSolutionRequiredFormFields.slice(10,14).map((item, idx) => (\n            <Col span={5}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          <Col>\n            <div className='p-2'>\n              <Dropdown\n                trigger={['click']}\n                overlay={menu}\n                onVisibleChange={(e)=>{setDropdownVisible(e)}}\n                visible={dropdownVisible}>\n                <Button className='ant-dropdown-link' onClick={e => e.preventDefault()}>\n                  Solution Required\n                  {' '}\n                  <DownOutlined />\n                </Button>\n              </Dropdown>\n            </div>\n            <br />\n            <br />\n            <br />\n          </Col>\n        </Row>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit' disabled>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n          <Button type='link' htmlType='submit'>\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default PFEPSolutionRequiredForm;\n\n"],"sourceRoot":""}
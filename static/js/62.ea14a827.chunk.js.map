{"version":3,"sources":["hocs/formItem.hoc.js","../../common/formFields/createCP/basicDetailsCreateCP.formFields.js","forms/CreateCP/basicDetialsCreateCP.form.js"],"names":["Option","CheckboxGroup","Group","getFinalStringForSearch","searchKeys","customTitle","item","s","concat","forEach","i","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","FORM_ELEMENT_TYPES","INPUT","Item","label","charAt","toUpperCase","slice","size","INPUT_NUMBER","FILE_DRAG_DROP","Dragger","style","maxHeight","width","className","p1","p2","SELECT","shouldUpdate","selectOptions","map","index","toString","search","value","fontSize","fontWeight","dataKeys","flexWrap","marginLeft","marginRight","RADIO","radioOptions","DATE","onChange","date","MONTH_PICKER","picker","MULTIPLE_CHECKBOX","checkOptions","SWITCH","valuePropName","basicDetailCreateCPFormFields","placeholder","disabled","min","BasicDetailsCreateCPForm","id","onCancel","onNext","lead","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","submit","a","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","spinning","initialValues","onFinish","layout","onFieldsChange","getFieldValue","setFieldsValue","_","ceil","round","parseInt","autoComplete","orientation","justifyContent","idx","span","formItem","justify","htmlType","onClick","ArrowRightOutlined"],"mappings":"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","file":"static/js/62.ea14a827.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport {Icon} from '@ant-design/compatible';\nimport {FORM_ELEMENT_TYPES} from 'constants/formFields.constant';\n\nconst {Option} = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst getFinalStringForSearch = (searchKeys, customTitle, item) => {\n  let s = '';\n  if (item[customTitle]) s = s.concat(item[customTitle]);\n  searchKeys.forEach((i) => {\n    if (item[i]) {\n      s = s.concat(' ');\n      s = s.concat(item[i]);\n    }\n  });\n  return s;\n};\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({key, rules, kwargs, type, others, customLabel, noLabel}) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input size=\"middle\" {...kwargs} />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber size=\"middle\" {...kwargs} />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{maxHeight: '75px', width: '150px'}}>\n            <p className=\"ant-upload-drag-icon\">\n              <Icon type=\"inbox\" />\n            </p>\n            {others ? (\n              <>\n                <p className=\"ant-upload-text p-1\">{others.p1}</p>\n                <p className=\"ant-upload-hint p-1\">{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={\n                  others.searchKeys\n                    ? getFinalStringForSearch(others.searchKeys, others.customTitle, item)\n                    : item[others.customTitle]\n                }\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{fontSize: 13, fontWeight: 'bold'}}>{item[others.customTitle]}</text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className=\"row\" style={{flexWrap: 'wrap'}}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{fontSize: 11, marginLeft: 5, marginRight: 5}}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value=\"Ggg\">\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker\n            onChange={(date) => console.log(date)}\n            style={others ? (others.style ? others.style : null) : null}\n          />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MONTH_PICKER:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} picker=\"month\" />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName=\"checked\"\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\nexport const basicDetailCreateCPFormFields = [\n  {\n    key: 'sender_client',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Emitter',\n      disabled : true,\n    },\n    customLabel: 'Emitter'\n  },\n  {\n    key: 'sender_location',\n    kwargs: {\n      placeholder: 'Emitter Location',\n      disabled : true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Emitter Location',\n  },\n  {\n    key: 'receiver',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Receiver',\n      disabled : true,\n    },\n    customLabel: 'Receiver'\n  },\n  {\n    key: 'receiver_location',\n    kwargs: {\n      placeholder: 'Receiver Location',\n      disabled : true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Receiver Location',\n  },\n  {\n    key: 'part_name',\n    kwargs: {\n      placeholder: 'Part Name',\n      disabled : true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Part Name',\n  },\n  //parts_pm\n  // {\n  //   key: 'component_perkit',\n  //   kwargs: {\n  //     placeholder: 'Component/Kit',\n  //     type:'number',\n  //   },\n  //   type: FORM_ELEMENT_TYPES.INPUT,\n  //   others: null,\n  //   customLabel: 'Component/Kit',\n  // },\n  //weight\n  {\n    key: 'total_comp_weight_perkit',\n    kwargs: {\n      placeholder: 'Total Component Weight/Kit',\n      type:'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Component Weight/Kit',\n  },\n\n  {\n    key: 'volume_pm',\n    kwargs: {\n      placeholder: 'Total Component/Month',\n      disabled : true,\n      type:'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Component/Month',\n  },\n  {\n    // key: 'total_component_per_kit',\n    key:'component_perkit',\n    kwargs: {\n      placeholder: 'Total Component/Kit',\n      type:'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Component/Kit',\n  },\n\n  {\n    key: 'kit_pm',\n    kwargs: {\n      placeholder: 'Total Kit/Month',\n      type:'number',\n      disabled : true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Kit/Month',\n  },\n  {\n    key: 'yantra_cycle',\n    kwargs: {\n      placeholder: 'Yantra Cycle Time',\n      type:'number',\n      disabled : true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Yantra Cycle Time',\n  },\n  {\n    key: 'buffer',\n    kwargs: {\n      placeholder: 'Buffer',\n      type:'number',\n      min:0,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Buffer (%)',\n  },\n  {\n    key: 'kit_usage_ratio',\n    kwargs: {\n      placeholder: 'Kit Usage Ratio',\n      type:'number',\n      disabled : true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Kit Usage Ratio',\n  },\n  {\n    key: 'kit_based_on_usage_ratio',\n    kwargs: {\n      placeholder: 'Number of Kit based on Usage Ratio',\n      type:'number',\n      disabled : true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Number of Kit based on Usage Ratio',\n  },\n]\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin } from 'antd';\nimport { ArrowRightOutlined, } from '@ant-design/icons';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  ADD_CREATE_CP_DATA,\n  STOP_STEP_LOADING,\n} from 'common/actions';\nimport { basicDetailCreateCPFormFields } from 'common/formFields/createCP/basicDetailsCreateCP.formFields';\n\nimport _ from 'lodash';\n\nexport const BasicDetailsCreateCPForm = ({ id, onCancel,lead,onNext,active }) => {\n\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.createCPData))\n\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:ADD_CREATE_CP_DATA,\n      data:{ ...data } });\n    setLoading(false)\n    if(active === 0){\n      onNext();\n    }\n  }\n\n  const handleFieldsChange = data => {\n\n    if(data[0]){\n\t\t\tif(data[0].name) {\n\n        const currentInputField = data[0].name[0];\n        console.log(currentInputField);\n\n        if (form.getFieldValue(\"volume_pm\") && form.getFieldValue(\"component_perkit\")) {\n          form.setFieldsValue({\n            \"kit_pm\" : _.ceil(form.getFieldValue(\"volume_pm\")/form.getFieldValue(\"component_perkit\")),\n          })\n        } else {\n          form.setFieldsValue({\n            \"kit_pm\" : 0,\n          })\n        }\n\n        if (form.getFieldValue(\"yantra_cycle\")) {\n          form.setFieldsValue({\n            \"kit_usage_ratio\" : _.round(30/form.getFieldValue(\"yantra_cycle\"),2),\n          })\n        } else {\n          form.setFieldsValue({\n            \"kit_usage_ratio\" : 0,\n          })\n        }\n\n        if (form.getFieldValue(\"kit_pm\") && form.getFieldValue(\"kit_usage_ratio\") && form.getFieldValue(\"buffer\")) {\n          form.setFieldsValue({\n            \"kit_based_on_usage_ratio\" : _.ceil(( form.getFieldValue(\"kit_pm\")/form.getFieldValue(\"kit_usage_ratio\") )*( 1+(parseInt(form.getFieldValue(\"buffer\"))/100) )),\n          })\n        } else {\n          form.setFieldsValue({\n            \"kit_based_on_usage_ratio\" : 0,\n          })\n        }\n\n      }\n    }\n\n  }\n\n  useEffect( ()=>{\n    if(active!==0){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n\n  return (\n    <Spin spinning={loading}>\n      <Form\n        initialValues={{ ...state }}\n        onFinish={submit}\n        form={form}\n        layout='vertical'\n        onFieldsChange={handleFieldsChange}\n        // hideRequiredMark\n        autoComplete='off'\n      >\n        <Divider orientation='left'>Basic Details</Divider>\n        <Row style={{ justifyContent: 'left' }}>\n          {basicDetailCreateCPFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Divider orientation='left'>Part Details</Divider>\n        <Row style={{ justifyContent: 'left' }}>\n          {basicDetailCreateCPFormFields.slice(4, 14).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit' disabled>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n          <Button type='link' htmlType='submit'>\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default BasicDetailsCreateCPForm;\n\n"],"sourceRoot":""}
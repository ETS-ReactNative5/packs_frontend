{"version":3,"sources":["hocs/formItem.hoc.js","../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","forms/CreateCP/solutionProposalCreateCP.form.js"],"names":["Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","FORM_ELEMENT_TYPES","INPUT","Item","label","charAt","toUpperCase","slice","size","INPUT_NUMBER","FILE_DRAG_DROP","Dragger","style","maxHeight","width","className","p1","p2","SELECT","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","RADIO","radioOptions","DATE","onChange","date","MULTIPLE_CHECKBOX","checkOptions","SWITCH","valuePropName","solutionProposalCreateCPFormFields","stdAssetsProposalCreateCPFormFields","placeholder","noStyle","disabled","min","createFields","arr","fields","getSolutionProposal","record","standard_assets","std_ast_quantity_perkit","crate_lid_quantity_perkit","Lid","Crate","palletized_lid_quantity_perkit","getLabels","insertType","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","SolutionProposalCreateCPForm","id","onCancel","onNext","lead","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","insert_type","setFields","labels","setLabels","submit","a","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","updateTotalKitQtysCols","useCallback","getFieldValue","forEach","setFieldsValue","updateMonthCols","handleFieldsChange","currentInputField","totalKitQtysCols","qtyPerKitCols","rateCols","totalMatReqCols","totalCostCols","monthCols","depCostCols","idx","totalMatReqVal","_","round","spinning","initialValues","onFinish","layout","onFieldsChange","autoComplete","orientation","solution_flc","solution_fsc","solution_crate","solution_ppbox","solution_palletized_box","solution_palletized_crate","solution_pp","solution_stacking_nesting","solution_wp","justifyContent","span","formItem","justify","htmlType","onClick"],"mappings":"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A,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QACF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QAEF,SAAS,CACP,UAEF,oBAAoB,CAClB,oBACA,iBACA,UAEF,iBAAiB,CACf,iBACA,kBAEF,gBAAgB,CACd,gBACA,mBAEkBlE,IAIXmE,EAAY,SAACnE,EAAKkE,GA2J7B,MA1JuB,CACrB,IAAmB,WAAbA,EAAsBZ,YAAa,CACvC,UACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,QACA,SAEF,IAAmB,WAAbY,EAAsBZ,YAAa,CACvC,UACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,QACA,SAEF,QAAuB,WAAbY,EAAsBZ,YAAa,CAC3C,UACA,YACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,YACA,QACA,SAEF,QAAuB,WAAbY,EAAsBZ,YAAa,CAC3C,UACA,YACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,YACA,QACA,SAEF,QAAuB,WAAbY,EAAsBZ,YAAa,CAC3C,UACA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","file":"static/js/54.bf543237.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Upload,\r\n  Select,\r\n  Radio,\r\n  DatePicker,\r\n  Checkbox,\r\n  InputNumber,\r\n  message,\r\n  Switch,\r\n} from 'antd';\r\nimport { Icon } from '@ant-design/compatible';\r\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\r\n\r\nconst { Option } = Select;\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\n// const handleUplaod = (file) => {\r\n//   return new Promise(async (resolve, reject) => {\r\n//     const fileName = `nameThatIwant.type`;\r\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\r\n//     resolve(url);\r\n//   });\r\n\r\nconst onCustomRequest = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const ajaxResponseWasFine = true;\r\n\r\n    setTimeout(() => {\r\n      if (ajaxResponseWasFine) {\r\n        const reader = new FileReader();\r\n\r\n        reader.addEventListener(\r\n          'load',\r\n          () => {\r\n            resolve(reader.result);\r\n          },\r\n          false,\r\n        );\r\n\r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n      } else {\r\n        reject('error');\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nconst props = {\r\n  name: 'file',\r\n  action: onCustomRequest,\r\n  // onChange(info) {\r\n  //   const {status} = info.file;\r\n  //   if (status !== 'uploading') {\r\n  //     console.log(info.file, info.fileList);\r\n  //   }\r\n  //   if (status === 'done') {\r\n  //     message.success(`${info.file.name} file uploaded successfully.`);\r\n  //   } else if (status === 'error') {\r\n  //     message.error(`${info.file.name} file upload failed.`);\r\n  //   }\r\n  // },\r\n};\r\n\r\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\r\n  let formOptions = {};\r\n  if (others) {\r\n    if (others.formOptions) {\r\n      formOptions = others.formOptions;\r\n    }\r\n  }\r\n\r\n  switch (type) {\r\n    case FORM_ELEMENT_TYPES.INPUT: {\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Input {...kwargs} size='middle' />\r\n        </Form.Item>\r\n      );\r\n    }\r\n\r\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <InputNumber {...kwargs} size='middle' />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\r\n            <p className='ant-upload-drag-icon'>\r\n              <Icon type='inbox' />\r\n            </p>\r\n            {others ? (\r\n              <>\r\n                <p className='ant-upload-text p-1'>{others.p1}</p>\r\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\r\n              </>\r\n            ) : null}\r\n          </Upload.Dragger>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.SELECT:\r\n      return (\r\n        <Form.Item\r\n          shouldUpdate\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Select {...kwargs}>\r\n            {others.selectOptions.map((item, index) => (\r\n              <Option\r\n                key={index.toString()}\r\n                search={item[others.customTitle]}\r\n                value={item.value || item[others.key] || item}>\r\n                {others.customTitle ? (\r\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\r\n                    {item[others.customTitle]}\r\n                  </text>\r\n                ) : (\r\n                  item.label || item[others.key] || item\r\n                )}\r\n                {others.dataKeys ? (\r\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\r\n                    {others.dataKeys.map((i) => (\r\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\r\n                    ))}\r\n                  </div>\r\n                ) : null}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.RADIO:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Radio.Group value='Ggg'>\r\n            {others.radioOptions.map((item) => (\r\n              <Radio key={item.value} value={item.value}>\r\n                {item.label}\r\n              </Radio>\r\n            ))}\r\n          </Radio.Group>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.DATE:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <DatePicker onChange={(date) => console.log(date)} />\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <CheckboxGroup onChange={others.onChange}>\r\n            {others.checkOptions.map((i) => (\r\n              <Checkbox value={i.value}>{i.label}</Checkbox>\r\n            ))}\r\n          </CheckboxGroup>\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.SWITCH:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          valuePropName='checked'\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <Switch {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default FormItem;\r\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\r\n\r\n\r\nconst solutionAssetOptions = [\r\n  'FLC',\r\n  'FSC',\r\n  'CRT6412',\r\n  'CRT6418',\r\n  'CRT6423',\r\n  'CRT6435',\r\n  'Palletized CRT6412',\r\n  'Palletized CRT6418',\r\n  'Palletized CRT6423',\r\n  'Palletized CRT6435',\r\n  'PP BOX',\r\n  'Palletized PP Box',\r\n  'Plastic Pallet',\r\n  'Wooden Pallet',\r\n]\r\n\r\n\r\nexport const solutionProposalCreateCPFormFields = [\r\n  {\r\n    key: 'standard_assets',\r\n    type: FORM_ELEMENT_TYPES.SELECT,\r\n    others: {\r\n      selectOptions: solutionAssetOptions,\r\n    },\r\n    customLabel:'Standard Assets'\r\n  },\r\n  {\r\n    key: 'insert_type',\r\n    type: FORM_ELEMENT_TYPES.SELECT,\r\n    others: {\r\n      selectOptions: ['Insert','HDPE Tray'],\r\n    },\r\n    customLabel:'Insert Type'\r\n  },\r\n  // {\r\n  //   key: 'cost',\r\n  //   type: FORM_ELEMENT_TYPES.INPUT,\r\n  //   kwargs: {\r\n  //     placeholder: 'Cost',\r\n  //     type:'number'\r\n  //   },\r\n  //   customLabel:'Cost'\r\n  // },\r\n];\r\n\r\n\r\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\r\n\r\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\r\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// mould_month = models.FloatField(default=0, blank=True, null=True)\r\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n\r\n\r\nexport const formListSolutionProposalCreateCPFormFields = [\r\n  {\r\n    key: 'specification',\r\n    kwargs: {\r\n      placeholder: 'Specification',\r\n      disabled:true\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Specification',\r\n  },\r\n  {\r\n    key: 'quantity',\r\n    kwargs: {\r\n      placeholder: 'Total KIT Quantity',\r\n      type:'number'\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Total KIT Quantity',\r\n  },\r\n  {\r\n    key: 'quantity_per_kit',\r\n    kwargs: {\r\n      placeholder: 'Qyt/KIT',\r\n      type:'number'\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Qyt/KIT',\r\n  },\r\n  {\r\n    key: 'rate',\r\n    kwargs: {\r\n      placeholder: 'Rate',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Rate',\r\n  },\r\n  {\r\n    key: 'tot_mat_req',\r\n    kwargs: {\r\n      placeholder: 'Total Material Req',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Mat. Req.',\r\n  },\r\n  {\r\n    key: 'total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      type:'number'\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Total Cost',\r\n  },\r\n  {\r\n    key: 'month',\r\n    kwargs: {\r\n      placeholder: 'Month',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Month',\r\n  },\r\n  {\r\n    key: 'dep_cost',\r\n    kwargs: {\r\n      placeholder: 'Dep Cost',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Dep Cost',\r\n  },\r\n]\r\n\r\nexport const stdAssetsProposalCreateCPFormFields = [\r\n  {\r\n    key: '_quantity',\r\n    kwargs: {\r\n      placeholder: 'Quantity',\r\n      type:'number'\r\n    },\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Kit Qty',\r\n  },\r\n  {\r\n    key: '_quantity_perkit',\r\n    kwargs: {\r\n      placeholder: 'Quantity/Kit',\r\n      type:'number'\r\n    },\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Quantity/Kit',\r\n  },\r\n  {\r\n    key: '_rate',\r\n    kwargs: {\r\n      placeholder: 'Rate',\r\n      type:'number'\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    customLabel: 'Rate',\r\n  },\r\n  {\r\n    key: '_tot_mat_req',\r\n    kwargs: {\r\n      placeholder: 'Total Mat. Req.',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Mat. Req.',\r\n  },\r\n  {\r\n    key: '_total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      type:'number',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Cost',\r\n  },\r\n  {\r\n    key: '_month',\r\n    kwargs: {\r\n      placeholder: 'Month',\r\n      type: 'number',\r\n      min: 0,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    customLabel: 'Month',\r\n  },\r\n  {\r\n    key: '_dep_cost',\r\n    kwargs: {\r\n      placeholder: 'Dep Cost',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    customLabel: 'Dep Cost',\r\n  },\r\n]\r\n\r\nexport const createFields=(arr)=>{\r\n  let fields = [];\r\n  arr.map(key=>{\r\n    fields = [...fields,...stdAssetsProposalCreateCPFormFields.map(item=>({\r\n      ...item,key:`${key}${item.key}`\r\n    }))]\r\n    return null\r\n  })\r\n  return fields;\r\n}\r\n","import { createFields } from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\r\n\r\n\r\nexport const solutionAssetOptions = [\r\n  'FLC',\r\n  'FSC',\r\n  'CRT6412',\r\n  'CRT6418',\r\n  'CRT6423',\r\n  'CRT6435',\r\n  'Palletized CRT6412',\r\n  'Palletized CRT6418',\r\n  'Palletized CRT6423',\r\n  'Palletized CRT6435',\r\n  'PP BOX',\r\n  'Palletized PP Box',\r\n  'Plastic Pallet',\r\n  'Wooden Pallet',\r\n]\r\n\r\n\r\nexport const getSolutionProposal=(record)=>{\r\n  if(record.standard_assets === 'FLC'\r\n    || record.standard_assets === 'FSC'\r\n    ||record.standard_assets === 'PP BOX'){\r\n    return {\r\n      [record.standard_assets]:record.std_ast_quantity_perkit,\r\n    }\r\n  }\r\n  if(\r\n    record.standard_assets === 'CRT6412' ||\r\n    record.standard_assets === 'CRT6418' ||\r\n    record.standard_assets === 'CRT6423' ||\r\n    record.standard_assets === 'CRT6435') {\r\n    return {\r\n      [record.standard_assets]:record.crate_lid_quantity_perkit\r\n    }}\r\n  if(\r\n    record.standard_assets === 'Palletized CRT6412' ||\r\n    record.standard_assets === 'Palletized CRT6418' ||\r\n    record.standard_assets === 'Palletized CRT6423' ||\r\n    record.standard_assets === 'Palletized CRT6435' ||\r\n    record.standard_assets === 'Palletized PP Box'  ||\r\n    record.standard_assets === 'Plastic Pallet'  ||\r\n    record.standard_assets === 'Wooden Pallet'\r\n  ) {\r\n    return {\r\n      Lid:1,\r\n      Crate:1,\r\n      [record.standard_assets]:record.palletized_lid_quantity_perkit\r\n    }\r\n  }\r\n\r\n  return {\r\n  }\r\n}\r\n\r\n\r\nexport const insertTypeOptions = [\r\n  'Insert',\r\n  'HDPE Tray',\r\n]\r\n\r\nexport const getLabels = (type,insertType)=>{\r\n  const specifications = {\r\n    'FLC':insertType==='Insert'?[\r\n      'FLC',\r\n      'Insert Type 1',\r\n      'Insert Type 2',\r\n      'Separator Sheet',\r\n    ]:[\r\n      'FLC',\r\n      'Separator Sheet',\r\n      'Mould',\r\n      'HDPE',\r\n    ],\r\n    'FSC':insertType==='Insert'?[\r\n      'FSC',\r\n      'Insert Type 1',\r\n      'Insert Type 2',\r\n      'Separator Sheet',\r\n    ]:[\r\n      'FSC',\r\n      'Separator Sheet',\r\n      'Mould',\r\n      'HDPE',\r\n    ],\r\n    'CRT6412':insertType==='Insert'?[\r\n      'CRT6412',\r\n      'Crate Lid',\r\n      'Insert Type 1',\r\n      'Insert Type 2',\r\n      'Separator Sheet',\r\n    ]:[\r\n      'CRT6412',\r\n      'Crate Lid',\r\n      'Separator Sheet',\r\n      'Mould',\r\n      'HDPE',\r\n    ],\r\n    'CRT6418':insertType==='Insert'?[\r\n      'CRT6418',\r\n      'Crate Lid',\r\n      'Insert Type 1',\r\n      'Insert Type 2',\r\n      'Separator Sheet',\r\n    ]:[\r\n      'CRT6418',\r\n      'Crate Lid',\r\n      'Separator Sheet',\r\n      'Mould',\r\n      'HDPE',\r\n    ],\r\n    'CRT6423':insertType==='Insert'?[\r\n      'CRT6423',\r\n      'Crate Lid',\r\n      'Insert Type 1',\r\n      'Insert Type 2',\r\n      'Separator Sheet'\r\n    ]:[\r\n      'CRT6423',\r\n      'Crate Lid',\r\n      'Separator Sheet',\r\n      'Mould',\r\n      'HDPE',\r\n    ],\r\n    'CRT6435':insertType==='Insert'?[\r\n      'CRT6435',\r\n      'Crate Lid',\r\n      'Insert Type 1',\r\n      'Insert Type 2',\r\n      'Separator Sheet'\r\n    ]:[\r\n      'CRT6435',\r\n      'Crate Lid',\r\n      'Separator Sheet',\r\n      'Mould',\r\n      'HDPE',\r\n    ],\r\n    'Palletized CRT6412':insertType==='Insert'?[\r\n      'Palletized CRT6412',\r\n      'Palletized Lid',\r\n      'Pallet',\r\n      'Insert Type 1',\r\n      'Insert Type 2',\r\n      'Separator Sheet'\r\n    ]:[\r\n      'Palletized CRT6412',\r\n      'Palletized Lid',\r\n      'Pallet',\r\n      'Separator Sheet',\r\n      'Mould',\r\n      'HDPE',\r\n    ],\r\n    'Palletized CRT6418':insertType==='Insert'?[\r\n      'Palletized CRT6418',\r\n      'Palletized Lid',\r\n      'Pallet',\r\n      'Insert Type 1',\r\n      'Insert Type 2',\r\n      'Separator Sheet'\r\n    ]:[\r\n      'Palletized CRT6418',\r\n      'Palletized Lid',\r\n      'Pallet',\r\n      'Separator Sheet',\r\n      'Mould',\r\n      'HDPE',\r\n    ],\r\n    'Palletized CRT6423':insertType==='Insert'?[\r\n      'Palletized CRT6423',\r\n      'Palletized Lid',\r\n      'Pallet',\r\n      'Insert Type 1',\r\n      'Insert Type 2',\r\n      'Separator Sheet'\r\n    ]:[\r\n      'Palletized CRT6423',\r\n      'Palletized Lid',\r\n      'Pallet',\r\n      'Separator Sheet',\r\n      'Mould',\r\n      'HDPE',],\r\n    'Palletized CRT6435':insertType==='Insert'?[\r\n      'Palletized CRT6435',\r\n      'Palletized Lid',\r\n      'Pallet',\r\n      'Insert Type 1',\r\n      'Insert Type 2',\r\n      'Separator Sheet'\r\n    ]:[\r\n      'Palletized CRT6435',\r\n      'Palletized Lid',\r\n      'Pallet',\r\n      'Separator Sheet',\r\n      'Mould',\r\n      'HDPE',\r\n    ],\r\n    'PP BOX':[\r\n      'PP BOX',\r\n    ],\r\n    'Palletized PP Box':[\r\n      'Palletized PP Box',\r\n      'Palletized Lid',\r\n      'Pallet',\r\n    ],\r\n    'Plastic Pallet':[\r\n      'Plastic Pallet',\r\n      'Palletized Lid',\r\n    ],\r\n    'Wooden Pallet':[\r\n      'Wooden Pallet',\r\n      'Palletized Lid',]\r\n  };\r\n  return specifications[type];\r\n}\r\n\r\n\r\nexport const getFields = (type,insertType) => {\r\n  const specifications = {\r\n    'FLC':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n      'insert1',\r\n      'insert2',\r\n      'sep_sheet',\r\n    ]):createFields([\r\n      'std_ast',\r\n      'sep_sheet',\r\n      'mould',\r\n      'hdpe',\r\n    ]),\r\n    'FSC':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n      'insert1',\r\n      'insert2',\r\n      'sep_sheet',\r\n    ]):createFields([\r\n      'std_ast',\r\n      'sep_sheet',\r\n      'mould',\r\n      'hdpe',\r\n    ]),\r\n    'CRT6412':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n      'crate_lid',\r\n      'insert1',\r\n      'insert2',\r\n      'sep_sheet',\r\n    ]):createFields([\r\n      'std_ast',\r\n      'crate_lid',\r\n      'sep_sheet',\r\n      'mould',\r\n      'hdpe',\r\n    ]),\r\n    'CRT6418':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n      'crate_lid',\r\n      'insert1',\r\n      'insert2',\r\n      'sep_sheet',\r\n    ]):createFields([\r\n      'std_ast',\r\n      'crate_lid',\r\n      'sep_sheet',\r\n      'mould',\r\n      'hdpe',\r\n    ]),\r\n    'CRT6423':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n      'crate_lid',\r\n      'insert1',\r\n      'insert2',\r\n      'sep_sheet',\r\n    ]):createFields([\r\n      'std_ast',\r\n      'crate_lid',\r\n      'sep_sheet',\r\n      'mould',\r\n      'hdpe',\r\n    ]),\r\n    'CRT6435':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n      'crate_lid',\r\n      'insert1',\r\n      'insert2',\r\n      'sep_sheet',\r\n    ]):createFields([\r\n      'std_ast',\r\n      'crate_lid',\r\n      'sep_sheet',\r\n      'mould',\r\n      'hdpe',\r\n    ]),\r\n    'Palletized CRT6412':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n      'pallet',\r\n      'insert1',\r\n      'insert2',\r\n      'sep_sheet',\r\n    ]):createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n      'pallet',\r\n      'sep_sheet',\r\n      'mould',\r\n      'hdpe',\r\n    ]),\r\n    'Palletized CRT6418':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n      'pallet',\r\n      'insert1',\r\n      'insert2',\r\n      'sep_sheet',\r\n    ]):createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n      'pallet',\r\n      'sep_sheet',\r\n      'mould',\r\n      'hdpe',\r\n    ]),\r\n    'Palletized CRT6423':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n      'pallet',\r\n      'insert1',\r\n      'insert2',\r\n      'sep_sheet',\r\n    ]):createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n      'pallet',\r\n      'sep_sheet',\r\n      'mould',\r\n      'hdpe',\r\n    ]),\r\n    'Palletized CRT6435':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n      'pallet',\r\n      'insert1',\r\n      'insert2',\r\n      'sep_sheet',\r\n    ]):createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n      'pallet',\r\n      'sep_sheet',\r\n      'mould',\r\n      'hdpe',\r\n    ]),\r\n    'PP BOX':insertType==='Insert'?createFields([\r\n      'std_ast',\r\n    ]):createFields([\r\n      'std_ast',\r\n    ]),\r\n    'Palletized PP Box':createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n      'pallet',\r\n    ]),\r\n    'Plastic Pallet':createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n    ]),\r\n    'Wooden Pallet':createFields([\r\n      'std_ast',\r\n      'palletized_lid',\r\n    ])\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\n\r\nexport const formatStr = (str,typeStr) => {\r\n  return `${str}_${typeStr}`;\r\n}\r\n\r\nexport const getFieldsByColumn = (type,insertType,typeStr) => {\r\n  const specifications = {\r\n    'FLC':insertType==='Insert'? [\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('insert1',typeStr),\r\n      formatStr('insert2',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n    ]:[\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n      formatStr('mould',typeStr),\r\n      formatStr('hdpe',typeStr),\r\n    ],\r\n    'FSC':insertType==='Insert'?[\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('insert1',typeStr),\r\n      formatStr('insert2',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n    ]:[\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n      formatStr('mould',typeStr),\r\n      formatStr('hdpe',typeStr),\r\n    ],\r\n    'CRT6412':insertType==='Insert'?[\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('crate_lid',typeStr),\r\n      formatStr('insert1',typeStr),\r\n      formatStr('insert2',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n    ]:[\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('crate_lid',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n      formatStr('mould',typeStr),\r\n      formatStr('hdpe',typeStr),\r\n    ],\r\n    'CRT6418':insertType==='Insert'?([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('crate_lid',typeStr),\r\n      formatStr('insert1',typeStr),\r\n      formatStr('insert2',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n    ]):([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('crate_lid',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n      formatStr('mould',typeStr),\r\n      formatStr('hdpe',typeStr),\r\n    ]),\r\n    'CRT6423':insertType==='Insert'?([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('crate_lid',typeStr),\r\n      formatStr('insert1',typeStr),\r\n      formatStr('insert2',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n    ]):([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('crate_lid',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n      formatStr('mould',typeStr),\r\n      formatStr('hdpe',typeStr),\r\n    ]),\r\n    'CRT6435':insertType==='Insert'?([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('crate_lid',typeStr),\r\n      formatStr('insert1',typeStr),\r\n      formatStr('insert2',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n    ]):([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('crate_lid',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n      formatStr('mould',typeStr),\r\n      formatStr('hdpe',typeStr),\r\n    ]),\r\n    'Palletized CRT6412':insertType==='Insert'?([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n      formatStr('pallet',typeStr),\r\n      formatStr('insert1',typeStr),\r\n      formatStr('insert2',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n    ]):([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n      formatStr('pallet',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n      formatStr('mould',typeStr),\r\n      formatStr('hdpe',typeStr),\r\n    ]),\r\n    'Palletized CRT6418':insertType==='Insert'?([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n      formatStr('pallet',typeStr),\r\n      formatStr('insert1',typeStr),\r\n      formatStr('insert2',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n    ]):([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n      formatStr('pallet',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n      formatStr('mould',typeStr),\r\n      formatStr('hdpe',typeStr),\r\n    ]),\r\n    'Palletized CRT6423':insertType==='Insert'?([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n      formatStr('pallet',typeStr),\r\n      formatStr('insert1',typeStr),\r\n      formatStr('insert2',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n    ]):([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n      formatStr('pallet',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n      formatStr('mould',typeStr),\r\n      formatStr('hdpe',typeStr),\r\n    ]),\r\n    'Palletized CRT6435':insertType==='Insert'?([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n      formatStr('pallet',typeStr),\r\n      formatStr('insert1',typeStr),\r\n      formatStr('insert2',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n    ]):([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n      formatStr('pallet',typeStr),\r\n      formatStr('sep_sheet',typeStr),\r\n      formatStr('mould',typeStr),\r\n      formatStr('hdpe',typeStr),\r\n    ]),\r\n    'PP BOX':insertType==='Insert'?([\r\n      formatStr('std_ast',typeStr),\r\n    ]):([\r\n      formatStr('std_ast',typeStr),\r\n    ]),\r\n    'Palletized PP Box':([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n      formatStr('pallet',typeStr),\r\n    ]),\r\n    'Plastic Pallet':([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n    ]),\r\n    'Wooden Pallet':([\r\n      formatStr('std_ast',typeStr),\r\n      formatStr('palletized_lid',typeStr),\r\n    ])\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const getDefaultMonthValue = type => {\r\n  switch (type) {\r\n    case \"std_ast\":\r\n      return 18;\r\n    case \"crate_lid\":\r\n      return 12;\r\n    case \"palletized_lid\":\r\n      return 12;\r\n    case \"insert1\":\r\n      return 12;\r\n    case \"insert2\":\r\n      return 12;\r\n    case \"sep_sheet\":\r\n      return 12;\r\n    case \"mould\":\r\n      return 18;\r\n    case \"hdpe\":\r\n      return 12;\r\n    default:\r\n      return 0;\r\n  }\r\n}\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Form, Col, Row, Button, Divider, Spin, Tag } from 'antd';\r\nimport formItem from 'hocs/formItem.hoc';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ArrowRightOutlined } from '@ant-design/icons';\r\nimport {\r\n  ADD_CREATE_CP_DATA,\r\n  STOP_STEP_LOADING,\r\n} from 'common/actions';\r\nimport { solutionProposalCreateCPFormFields , }\r\n  from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\r\nimport { getFields, getLabels,getFieldsByColumn,getDefaultMonthValue } from 'common/constants/solutionproposalCreateCP';\r\n\r\nimport _ from 'lodash';\r\n\r\n\r\nexport const SolutionProposalCreateCPForm = ({ id, onCancel,lead,onNext,active }) => {\r\n  const [loading,setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const state =  useSelector(e=>(e.data.createCPData))\r\n  const [fields,setFields] =\r\n\t  useState(getFields(state.standard_assets ||'FLC',state.insert_type||'Insert'))\r\n  const [labels,setLabels] =\r\n\t  useState(getLabels(state.standard_assets ||'FLC',state.insert_type||'Insert'))\r\n  const submit = async (data) =>{\r\n    setLoading(true)\r\n    await dispatch({ type:ADD_CREATE_CP_DATA,\r\n      data:{ ...data }\r\n    });\r\n    setLoading(false)\r\n    if(active === 1){\r\n      onNext();\r\n    }\r\n  }\r\n\r\n  // useEffect(() => {\r\n  // \tif (form.getFieldValue(\"standard_assets\") && form.getFieldValue(\"insert_type\")) {\r\n  // \t\tsetFields(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\r\n  // \t\tsetLabels(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\r\n  // \t}\r\n  // },[])\r\n\r\n  useEffect( ()=>{\r\n    if(active!==1){\r\n      form.submit()\r\n      dispatch({ type:STOP_STEP_LOADING })\r\n    }\r\n  },[active])\r\n\r\n  console.log(state,'state')\r\n\r\n  const updateTotalKitQtysCols = useCallback(() => {\r\n    console.log(form.getFieldValue('kit_based_on_usage_ratio'),'kit based on',state.kit_based_on_usage_ratio)\r\n    if (form.getFieldValue('kit_based_on_usage_ratio')) {\r\n      const totalKitQtysCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'quantity');\r\n      console.log(totalKitQtysCols,'Totl wuanti')\r\n      totalKitQtysCols.forEach(i => {\r\n        if (!form.getFieldValue(i)) {\r\n          if (i!==\"mould_quantity\") {\r\n            form.setFieldsValue({\r\n              [i] : form.getFieldValue('kit_based_on_usage_ratio'),\r\n            })\r\n          } else {\r\n            form.setFieldsValue({\r\n              'mould_quantity' : 1,\r\n            })\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateMonthCols = useCallback(() => {\r\n    const monthCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'month');\r\n    monthCols.forEach(i => {\r\n      if (!form.getFieldValue(i)) {\r\n        form.setFieldsValue({\r\n          [i] : getDefaultMonthValue(i.slice(0,-6)),\r\n        })\r\n      }\r\n    })\r\n  },[form])\r\n\r\n  useEffect( () => {\r\n    updateTotalKitQtysCols();\r\n    updateMonthCols();\r\n  },[form])\r\n\r\n  const handleFieldsChange = useCallback(data => {\r\n\r\n    if(data[0]){\r\n      if(data[0].name) {\r\n\r\n        const currentInputField = data[0].name[0];\r\n        \t\tconsole.log(currentInputField);\r\n\r\n        if (currentInputField===\"standard_assets\" || currentInputField==='insert_type') {\r\n          setFields(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\r\n          setLabels(getLabels(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\r\n          updateTotalKitQtysCols();\r\n          updateMonthCols();\r\n        } else {\r\n          const totalKitQtysCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'quantity');\r\n          const qtyPerKitCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'quantity_perkit');\r\n          const rateCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'rate');\r\n          const totalMatReqCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'tot_mat_req');\r\n          const totalCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'total_cost');\r\n          const monthCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'month');\r\n          const depCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'dep_cost');\r\n\r\n          qtyPerKitCols.forEach((i,idx) => {\r\n            if (currentInputField===totalKitQtysCols[idx] || currentInputField===qtyPerKitCols[idx] || currentInputField===rateCols[idx] || currentInputField===totalMatReqCols[idx] || currentInputField===totalCostCols[idx] || currentInputField===monthCols[idx] || currentInputField===depCostCols[idx]) {\r\n              if (form.getFieldValue(totalKitQtysCols[idx]) && form.getFieldValue(qtyPerKitCols[idx])) {\r\n                const totalMatReqVal = form.getFieldValue(totalKitQtysCols[idx])*form.getFieldValue(qtyPerKitCols[idx]);\r\n                form.setFieldsValue({\r\n                  [totalMatReqCols[idx]] : totalMatReqVal,\r\n                  [totalCostCols[idx]] : form.getFieldValue(rateCols[idx])*totalMatReqVal,\r\n                })\r\n              } else {\r\n                form.setFieldsValue({\r\n                  [totalMatReqCols[idx]] : 0,\r\n                  [totalCostCols[idx]] : 0,\r\n                })\r\n              }\r\n\r\n              if ( form.getFieldValue(totalCostCols[idx]) && form.getFieldValue(monthCols[idx]) && form.getFieldValue(\"yantra_cycle\") ) {\r\n                form.setFieldsValue({\r\n                  [depCostCols[idx]] : _.round((( form.getFieldValue(totalCostCols[idx])/form.getFieldValue(monthCols[idx]) )/30)*form.getFieldValue(\"yantra_cycle\"),2),\r\n                })\r\n              } else {\r\n                form.setFieldsValue({\r\n                  [depCostCols[idx]] : 0,\r\n                })\r\n              }\r\n            }\r\n          })\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n  },[form,fields,labels])\r\n\r\n  // const handleFieldsChange = (data) => {\r\n  //   if(data[0]){\r\n  //     if(data[0].name){\r\n  //       if(data[0].name[0]==='standard_assets') {\r\n  //         // console.log(getFields(data[0].value),form.getFieldValue('insert_type'),'Ggg')\r\n  //         setFields(getFields(data[0].value,form.getFieldValue('insert_type')))\r\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\r\n  //       }\r\n  //       if(data[0].name[0]==='insert_type') {\r\n  //         // console.log(form.getFieldValue('standard_assets'),getFields(data[0].value),'Ggg')\r\n  //         setFields(getFields(form.getFieldValue('standard_assets'),data[0].value))\r\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\r\n  //       }}}\r\n  // }\r\n\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <Form\r\n        initialValues={{\r\n\t\t\t\t  ...state,\r\n\t\t\t\t  insert_type:state.insert_type||'Insert',\r\n\t\t\t\t  standard_assets:state.standard_assets || 'FLC' }}\r\n        onFinish={submit}\r\n        form={form}\r\n        layout='vertical'\r\n\t\t\t\t// hideRequiredMark\r\n        onFieldsChange={handleFieldsChange}\r\n        autoComplete='off'\r\n\t\t\t>\r\n        <Divider orientation='left'>Capex</Divider>\r\n        <div className='row px-2'>\r\n          {state.solution_flc ? <Tag>FLC</Tag> : null}\r\n          {state.solution_fsc ? <Tag>FSC</Tag> : null}\r\n          {state.solution_crate ? <Tag>Crate</Tag> : null}\r\n          {state.solution_ppbox ? <Tag>PP Box</Tag> : null}\r\n          {state.solution_palletized_box ? <Tag>Solution Palletized Box</Tag> : null}\r\n          {state.solution_palletized_crate? <Tag>Solution Palletized Crate</Tag> : null}\r\n          {state.solution_pp ? <Tag>Solution PP</Tag> : null}\r\n          {state.solution_stacking_nesting ? <Tag>Solution Stacking Nesting</Tag> : null}\r\n          {state.solution_wp ? <Tag>Solution WP</Tag> : null}\r\n        </div>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {solutionProposalCreateCPFormFields.map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          <Col span={3}>\r\n            <div className='p-2 flex row justify-center'>\r\n              <b />\r\n            </div>\r\n          </Col>\r\n          {[...fields].slice(0,7).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\r\n                <b>{item.customLabel}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {labels.slice(0,1).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(0,7).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {labels.slice(1,2).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(7,14).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {labels.slice(2,3).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(14,21).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {labels.slice(3,4).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(21,28).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {labels.slice(4,5).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(28,35).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {labels.slice(5,6).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(35,42).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {labels.slice(6,7).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(42,49).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        {/* <Form.List name='solutions'> */}\r\n        {/*  {(fields, { add, remove }) => { */}\r\n        {/*    return ( */}\r\n        {/*      <div> */}\r\n        {/*        {fields.map((field, index) => ( */}\r\n        {/*          <Row align='middle'> */}\r\n        {/*            {formListSolutionProposalCreateCPFormFields.slice(0,1).map((item) => ( */}\r\n        {/*              <Col span={4}> */}\r\n        {/*                <div className='p-2'> */}\r\n        {/*                  {formItem({ */}\r\n        {/*                    ...item, */}\r\n        {/*                    noLabel: index !== 0, */}\r\n        {/*                    form, */}\r\n        {/*                    others: { */}\r\n        {/*                      formOptions: { */}\r\n        {/*                        ...field, */}\r\n        {/*                        // hidden:true, */}\r\n        {/*                        name: [field.name, item.key], */}\r\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\r\n        {/*                      }, */}\r\n        {/*                    }, */}\r\n        {/*                  })} */}\r\n        {/*                </div> */}\r\n        {/*              </Col> */}\r\n        {/*            ))} */}\r\n        {/*            {[...createFields('std_ast')].slice(1,7).map((item) => ( */}\r\n        {/*              <Col span={3}> */}\r\n        {/*                <div className='p-2'> */}\r\n        {/*                  {formItem({ */}\r\n        {/*                    ...item, */}\r\n        {/*                    noLabel: index !== 0, */}\r\n        {/*                    form, */}\r\n        {/*                    others: { */}\r\n        {/*                      formOptions: { */}\r\n        {/*                        ...field, */}\r\n        {/*                        name: [field.name, item.key], */}\r\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\r\n        {/*                      }, */}\r\n        {/*                    }, */}\r\n        {/*                  })} */}\r\n        {/*                </div> */}\r\n        {/*              </Col> */}\r\n        {/*            ))} */}\r\n        {/*          </Row> */}\r\n        {/*        ))} */}\r\n        {/*      </div> */}\r\n        {/*    ); */}\r\n        {/*  }} */}\r\n        {/* </Form.List> */}\r\n        <Row justify='space-between'>\r\n          <div className='row'>\r\n            <Button type='primary' htmlType='submit' disabled>\r\n              Submit\r\n            </Button>\r\n            <div className='p-2' />\r\n            <Button type='primary' onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <Button type='link' htmlType='submit'>\r\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\r\n          </Button>\r\n        </Row>\r\n      </Form>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default SolutionProposalCreateCPForm;\r\n"],"sourceRoot":""}
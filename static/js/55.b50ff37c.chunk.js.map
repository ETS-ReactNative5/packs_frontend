{"version":3,"sources":["constants/formFields.constant.js","hocs/formItem.hoc.js","../../common/helpers/mrHelper.js","../../common/formFields/createCP/logisticsCreateCP.formFields.js","forms/CreateCP/logisticsCreateCP.form.js"],"names":["FORM_ELEMENT_TYPES","INPUT","MULTIPLE_CHECKBOX","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","SWITCH","HIDDEN","DATE","CASCADER","Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","Item","label","charAt","toUpperCase","slice","size","Dragger","style","maxHeight","width","className","p1","p2","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","radioOptions","onChange","date","checkOptions","valuePropName","mergeArray","a","b","obj","filter","mr","id","is_rejected","reason","remarks","statusCheck","isAllocated","isRejected","status","filterActive","data","_","el","active","ifNanReturnZero","num","parseInt","logisticCreateCPFormFields","placeholder","noStyle","disabled","LogisticCreateCPForm","onCancel","onDone","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","createCPData","submit","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","handleFieldsChange","useCallback","currentInputField","getFieldValue","setFieldsValue","spinning","orientation","onFinish","initialValues","layout","onFieldsChange","autoComplete","justifyContent","idx","span","formItem","justify","htmlType","onClick","ArrowRightOutlined"],"mappings":"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","file":"static/js/55.b50ff37c.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\n  INPUT: 'input',\n  MULTIPLE_CHECKBOX: 'MULTIPLE_CHECKBOX',\n  INPUT_NUMBER: 'input-number',\n  PASSWORD: 'password',\n  TEXTAREA: 'textarea',\n  MARKDOWN: 'markdown',\n  SELECT: 'select',\n  CAPTCHA: 'captcha',\n  MONTH_PICKER: 'month-picker',\n  FILE_DRAG_DROP: 'file-drag-drop',\n  RANGE_PICKER: 'range-picker',\n  RADIO: 'radio',\n  SWITCH: 'switch',\n  HIDDEN: 'hidden',\n  DATE: 'date',\n  CASCADER: 'cascader',\n};\n\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\n\nexport const CAPTCHA = {\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\n  name: 'captcha',\n  label: 'Captcha',\n  rules: [\n    {\n      required: process.env.NODE_ENV === 'production',\n      message: 'Please solve the captcha',\n    },\n  ],\n};\n","import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport { Icon } from '@ant-design/compatible';\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\n\nconst { Option } = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input {...kwargs} size='middle' />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber {...kwargs} size='middle' />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\n            <p className='ant-upload-drag-icon'>\n              <Icon type='inbox' />\n            </p>\n            {others ? (\n              <>\n                <p className='ant-upload-text p-1'>{others.p1}</p>\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={item[others.customTitle]}\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\n                    {item[others.customTitle]}\n                  </text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value='Ggg'>\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} />\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName='checked'\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","export const mergeArray=(a,b)=>{\n  return a.map((item) => {\n    const obj = b.filter(i => i.mr === item.id)[0];\n    if(obj){\n      return  { ...item,\n        is_rejected:obj.is_rejected,\n        reason:obj.reason,\n        mr:obj.mr,\n        remarks:obj.remarks\n      }\n    }\n    return item\n  });\n}\n\nexport const statusCheck =(isAllocated,isRejected)=>{\n  let status = 'Allocated';\n  if(!isAllocated && !isRejected){\n    status='Pending';\n  }\n  else if(isAllocated && !isRejected){\n    status='Allocated';\n  }\n  else if(!isAllocated && isRejected){\n    status='Rejected';\n  }\n  return status\n}\n\nexport const filterActive = (data) => {\n  return _.filter(data, (el) => el.active );\n}\n\nexport const ifNanReturnZero = num => {\n  return parseInt(num) ? parseInt(num) : 0;\n}\n","// min_warehouse = models.FloatField(default=0, blank=True, null=True)\n// transportation_w1_c1 = models.FloatField(default=0, blank=True, null=True)\n// transportation_c2_w2 = models.FloatField(default=0, blank=True, null=True)\n// transportation_w2_w1 = models.FloatField(default=0, blank=True, null=True)\n// total_cost_supply_chain = models.FloatField(default=0, blank=True, null=True)\n// labor_cost_perton = models.FloatField(default=0, blank=True, null=True)\n// repair_reconditioning = models.FloatField(default=0, blank=True, null=True)\n// other_cost = models.FloatField(default=0, blank=True, null=True)\n// total_cost = models.FloatField(default=0, blank=True, null=True)\n//\n\nimport { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\nexport const logisticCreateCPFormFields = [\n  {\n    key: 'min_warehouse',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Minimum Warehouse',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Minimum Warehouse'\n  },\n  {\n    key: 'transportation_w1_c1',\n    kwargs: {\n      placeholder: 'Transportation W1 C1',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Transportation W1 C1',\n  },\n  {\n    key: 'transportation_c2_w2',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Transportation C2 W2',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    customLabel: 'Transportation C2 W2'\n  },\n  {\n    key: 'transportation_w2_w1',\n    kwargs: {\n      placeholder: 'Transportation W2 W1',\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Transportation W2 W1',\n  },\n  {\n    key: 'total_cost_supply_chain',\n    kwargs: {\n      placeholder: 'Total Cost Supply Chain',\n      disabled: true,\n    },\n    others: {\n      formOptions:{ noStyle:true }\n\n    },    type: FORM_ELEMENT_TYPES.INPUT,\n\n    customLabel: 'Total Cost Supply Chain',\n  },\n  {\n    key: 'labor_cost_perton',\n    kwargs: {\n      placeholder: 'Labour Cost Perton',\n\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Labour Cost Perton',\n  },\n  {\n    key: 'repair_reconditioning',\n    kwargs: {\n      placeholder: 'Repair Reconditioning',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Repair Reconditioning',\n  },\n  {\n    key: 'other_cost',\n    kwargs: {\n      placeholder: 'Other Cost',\n\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Other Cost',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      disabled: true,\n\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n\n    },\n    customLabel: 'Total Cost',\n  },\n\n]\n","import React, { useEffect, useState,useCallback } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin } from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\nimport { ArrowRightOutlined } from '@ant-design/icons';\nimport { logisticCreateCPFormFields }\n  from 'common/formFields/createCP/logisticsCreateCP.formFields';\n\nimport { ifNanReturnZero } from 'common/helpers/mrHelper';\n\n\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.createCPData))\n\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\n    setLoading(false)\n    if(active===2){\n      onNext();\n    }\n  }\n  useEffect( ()=>{\n    if(active!==2){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n\n\n  const handleFieldsChange = useCallback(data => {\n\n\t\tif(data[0]){\n\t\t\tif(data[0].name) {\n\n        const currentInputField = data[0].name[0];\n        console.log(currentInputField);\n\n\n        if (currentInputField===\"min_warehouse\" || currentInputField===\"transportation_w1_c1\" || currentInputField===\"transportation_c2_w2\" || currentInputField===\"transportation_w2_w1\" || currentInputField===\"total_cost_supply_chain\" || currentInputField===\"labor_cost_perton\" || currentInputField===\"repair_reconditioning\" || currentInputField===\"other_cost\" || currentInputField===\"total_cost\") {\n          if ( form.getFieldValue(\"min_warehouse\") || form.getFieldValue(\"transportation_w1_c1\") || form.getFieldValue(\"transportation_c2_w2\") || form.getFieldValue(\"transportation_w2_w1\") ) {\n            form.setFieldsValue({\n              \"total_cost_supply_chain\" : ifNanReturnZero(form.getFieldValue(\"min_warehouse\"))+ifNanReturnZero(form.getFieldValue(\"transportation_w1_c1\"))+ifNanReturnZero(form.getFieldValue(\"transportation_c2_w2\"))+ifNanReturnZero(form.getFieldValue(\"transportation_w2_w1\")),\n            })\n          } else {\n            form.setFieldsValue({\n              \"total_cost_supply_chain\" : 0,\n            })\n          }\n\n          if ( form.getFieldValue(\"total_cost_supply_chain\") || form.getFieldValue(\"labor_cost_perton\") || form.getFieldValue(\"repair_reconditioning\") || form.getFieldValue(\"other_cost\") ) {\n            form.setFieldsValue({\n              \"total_cost\" : ifNanReturnZero(form.getFieldValue(\"total_cost_supply_chain\"))+ifNanReturnZero(form.getFieldValue(\"labor_cost_perton\"))+ifNanReturnZero(form.getFieldValue(\"repair_reconditioning\"))+ifNanReturnZero(form.getFieldValue(\"other_cost\")),\n            })\n          } else {\n            form.setFieldsValue({\n              \"total_cost\" : 0,\n            })\n          }\n        }\n\n\t\t\t}\n\t\t}\n\n  \t},[form,])\n\n\n  return (\n    <Spin spinning={loading}>\n      <Divider orientation='left'>Logistic Details</Divider>\n      <Form\n        onFinish={submit}\n        form={form}\n        initialValues={\n          { ...state }\n        }\n        layout='vertical'\n        onFieldsChange={handleFieldsChange}\n        // hideRequiredMark\n        autoComplete='off'\n      >\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(8, 9).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {logisticCreateCPFormFields.slice(8, 9).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit' disabled>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n          <Button type='link' htmlType='submit'>\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default LogisticCreateCPForm;\n\n"],"sourceRoot":""}
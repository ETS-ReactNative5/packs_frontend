{"version":3,"sources":["hocs/formItem.hoc.js","../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","forms/CreateCP/solutionProposalCreateCP.form.js"],"names":["Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","FORM_ELEMENT_TYPES","INPUT","Item","label","charAt","toUpperCase","slice","size","INPUT_NUMBER","FILE_DRAG_DROP","Dragger","style","maxHeight","width","className","p1","p2","SELECT","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","RADIO","radioOptions","DATE","onChange","date","MONTH_PICKER","picker","MULTIPLE_CHECKBOX","checkOptions","SWITCH","valuePropName","solutionProposalCreateCPFormFields","stdAssetsProposalCreateCPFormFields","placeholder","disabled","noStyle","min","createFields","arr","fields","getSolutionProposal","record","standard_assets","std_ast_quantity_perkit","crate_lid_quantity_perkit","Lid","Crate","palletized_lid_quantity_perkit","getLabels","insertType","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","SolutionProposalCreateCPForm","id","onCancel","onNext","lead","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","insert_type","setFields","labels","setLabels","submit","a","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","updateTotalKitQtysCols","useCallback","getFieldValue","forEach","setFieldsValue","updateMonthCols","handleFieldsChange","currentInputField","totalKitQtysCols","qtyPerKitCols","rateCols","totalMatReqCols","totalCostCols","monthCols","depCostCols","idx","totalMatReqVal","_","round","spinning","initialValues","onFinish","layout","onFieldsChange","autoComplete","orientation","solution_flc","solution_fsc","solution_crate","solution_ppbox","solution_palletized_box","solution_palletized_crate","solution_pp","solution_stacking_nesting","solution_wp","justifyContent","span","formItem","justify","htmlType","onClick"],"mappings":"mSAgBQA,E,IAAAA,OACFC,EAAgB,IAASC,MAmCzBC,EAAQ,CACZC,KAAM,OACNC,OA5BsB,SAACC,GACvB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAG3BC,YAAW,WAEP,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,iBACL,QACA,WACEL,EAAQG,EAAOG,WAEjB,GAGER,GACFK,EAAOI,cAAcT,KAKxB,UAyLQU,IArKE,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,IAAKC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAC7DC,EAAc,GAOlB,OANIH,GACEA,EAAOG,cACTA,EAAcH,EAAOG,aAIjBJ,GACN,KAAKK,IAAmBC,MACtB,OACE,sBAAMC,KAAN,eACEV,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,qCAAOQ,KAAK,UAAab,KAK/B,KAAKM,IAAmBQ,aACtB,OACE,sBAAMN,KAAN,eACEV,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,qCAAaQ,KAAK,UAAab,KAIrC,KAAKM,IAAmBS,eACtB,OACE,sBAAMP,KAAN,eACEV,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,sBAAQW,QAAR,iBAAoBhB,EAAYhB,EAAhC,CAAuCiC,MAAO,CAAEC,UAAW,OAAQC,MAAO,WACxE,uBAAGC,UAAU,wBACX,kBAAC,IAAD,CAAMnB,KAAK,WAEZC,EACC,oCACE,uBAAGkB,UAAU,uBAAuBlB,EAAOmB,IAC3C,uBAAGD,UAAU,uBAAuBlB,EAAOoB,KAE3C,OAKZ,KAAKhB,IAAmBiB,OACtB,OACE,sBAAMf,KAAN,eACEgB,cAAY,EACZ1B,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,sBAAYL,EACTE,EAAOuB,cAAcC,KAAI,SAACC,EAAMC,GAAP,OACxB,kBAAC/C,EAAD,CACEiB,IAAK8B,EAAMC,WACXC,OAAQH,EAAKzB,EAAO6B,aACpBC,MAAOL,EAAKK,OAASL,EAAKzB,EAAOJ,MAAQ6B,GACxCzB,EAAO6B,YACN,0BAAMd,MAAO,CAAEgB,SAAU,GAAIC,WAAY,SACtCP,EAAKzB,EAAO6B,cAGfJ,EAAKlB,OAASkB,EAAKzB,EAAOJ,MAAQ6B,EAEnCzB,EAAOiC,SACN,yBAAKf,UAAU,MAAMH,MAAO,CAAEmB,SAAU,SACrClC,EAAOiC,SAAST,KAAI,SAACW,GAAD,OACnB,0BAAMpB,MAAO,CAAEgB,SAAU,GAAIK,WAAY,EAAGC,YAAa,IAAMZ,EAAKU,QAGtE,WAOhB,KAAK/B,IAAmBkC,MACtB,OACE,sBAAMhC,KAAN,eACEV,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,sBAAOtB,MAAP,CAAaiD,MAAM,OAChB9B,EAAOuC,aAAaf,KAAI,SAACC,GAAD,OACvB,uBAAO7B,IAAK6B,EAAKK,MAAOA,MAAOL,EAAKK,OACjCL,EAAKlB,YAOlB,KAAKH,IAAmBoC,KACtB,OACE,sBAAMlC,KAAN,eACEV,IAAKA,GACDO,EAFN,CAGEI,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,IACP,uBAAY4C,SAAU,SAACC,QAI7B,KAAKtC,IAAmBuC,aACtB,OACE,sBAAMrC,KAAN,eACEV,IAAKA,GACDO,EAFN,CAGEI,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,IACP,uBAAY4C,SAAU,SAACC,KAA4BE,OAAO,WAIhE,KAAKxC,IAAmByC,kBACtB,OACE,sBAAMvC,KAAN,eACEV,IAAKA,EACLW,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,GACHM,GACJ,kBAACvB,EAAD,CAAe6D,SAAUzC,EAAOyC,UAC7BzC,EAAO8C,aAAatB,KAAI,SAACW,GAAD,OACvB,uBAAUL,MAAOK,EAAEL,OAAQK,EAAE5B,YAKvC,KAAKH,IAAmB2C,OACtB,OACE,sBAAMzC,KAAN,eACEV,IAAKA,EACLoD,cAAc,WACV7C,EAHN,CAIEI,MAAOL,EAAU,KAAOD,GAAeL,EAAIY,OAAO,GAAGC,cAAgBb,EAAIc,MAAM,GAC/E3B,KAAMa,EACNC,MAAOA,IACP,sBAAYC,IAGlB,QACE,OAAO,Q,kIClNAmD,EAAqC,CAChD,CACErD,IAAK,kBACLG,KAAMK,IAAmBiB,OACzBrB,OAAQ,CACNuB,cAtBuB,CAC3B,MACA,MACA,UACA,UACA,UACA,UACA,qBACA,qBACA,qBACA,qBACA,SACA,oBACA,iBACA,kBAUEtB,YAAa,mBAEf,CACEL,IAAK,cACLG,KAAMK,IAAmBiB,OACzBrB,OAAQ,CACNuB,cAAe,CAAC,SAAU,cAE5BtB,YAAa,gBAmKJiD,GArEH9C,IAAmBC,MASnBD,IAAmBC,MAUnBD,IAAmBC,MASnBD,IAAmBC,MAQnBD,IAAmBC,MASnBD,IAAmBC,MASnBD,IAAmBC,MASnBD,IAAmBC,MAMsB,CACjD,CACET,IAAK,YACLE,OAAQ,CACNqD,YAAa,WACbpD,KAAM,SACNqD,UAAU,GAEZpD,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBtD,KAAMK,IAAmBC,MACzBJ,YAAa,iBAEf,CACEL,IAAK,mBACLE,OAAQ,CACNqD,YAAa,eACbpD,KAAM,UAERC,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBtD,KAAMK,IAAmBC,MACzBJ,YAAa,gBAEf,CACEL,IAAK,QACLE,OAAQ,CACNqD,YAAa,OACbpD,KAAM,UAERA,KAAMK,IAAmBC,MACzBL,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBpD,YAAa,QAEf,CACEL,IAAK,eACLE,OAAQ,CACNqD,YAAa,kBACbC,UAAU,GAEZpD,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBtD,KAAMK,IAAmBC,MACzBJ,YAAa,mBAEf,CACEL,IAAK,cACLE,OAAQ,CACNqD,YAAa,aACbpD,KAAM,SACNqD,UAAU,GAEZpD,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBtD,KAAMK,IAAmBC,MACzBJ,YAAa,cAEf,CACEL,IAAK,SACLE,OAAQ,CACNqD,YAAa,QACbpD,KAAM,SACNuD,IAAK,GAEPvD,KAAMK,IAAmBC,MACzBL,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBpD,YAAa,SAEf,CACEL,IAAK,YACLE,OAAQ,CACNqD,YAAa,WACbC,UAAU,GAEZrD,KAAMK,IAAmBC,MACzBL,OAAQ,CACNG,YAAa,CAACkD,SAAS,IAEzBpD,YAAa,cAIJsD,EAAe,SAACC,GAC3B,IAAIC,EAAS,GAWb,OAVAD,EAAIhC,KAAI,SAAC5B,GAQP,OAPA6D,EAAS,GAAH,mBACDA,GADC,YAEDP,EAAoC1B,KAAI,SAACC,GAAD,mBAAC,eACvCA,GADsC,IAEzC7B,IAAK,GAAF,OAAKA,GAAL,OAAW6B,EAAK7B,YAGhB,QAEF6D,I,iOCtRIC,EAAoB,SAACC,GAChC,MAA8B,QAA3BA,EAAOC,iBACsB,QAA3BD,EAAOC,iBACmB,WAA3BD,EAAOC,gBACT,eACGD,EAAOC,gBAAiBD,EAAOE,yBAIP,YAA3BF,EAAOC,iBACoB,YAA3BD,EAAOC,iBACoB,YAA3BD,EAAOC,iBACoB,YAA3BD,EAAOC,gBACP,eACGD,EAAOC,gBAAiBD,EAAOG,2BAGP,uBAA3BH,EAAOC,iBACoB,uBAA3BD,EAAOC,iBACoB,uBAA3BD,EAAOC,iBACoB,uBAA3BD,EAAOC,iBACoB,sBAA3BD,EAAOC,iBACoB,mBAA3BD,EAAOC,iBACoB,kBAA3BD,EAAOC,gBAEP,aACEG,IAAI,EACJC,MAAM,GACLL,EAAOC,gBAAiBD,EAAOM,gCAI7B,IAUIC,EAAY,SAACnE,EAAKoE,GAuJ7B,MAtJuB,CACrB,IAAmB,WAAbA,EAAsB,CAC1B,MACA,gBACA,gBACA,mBACA,CACA,MACA,kBACA,QACA,QAEF,IAAmB,WAAbA,EAAsB,CAC1B,MACA,gBACA,gBACA,mBACA,CACA,MACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QACF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QAEF,SAAS,CACP,UAEF,oBAAoB,CAClB,oBACA,iBACA,UAEF,iBAAiB,CACf,iBACA,kBAEF,gBAAgB,CACd,gBACA,mBAEkBpE,IAIXqE,EAAY,SAACrE,EAAKoE,GA2J7B,MA1JuB,CACrB,IAAmB,WAAbA,EAAsBZ,YAAa,CACvC,UACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,QACA,SAEF,IAAmB,WAAbY,EAAsBZ,YAAa,CACvC,UACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,QACA,SAEF,QAAuB,WAAbY,EA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","file":"static/js/56.0ff22347.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport { Icon } from '@ant-design/compatible';\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\n\nconst { Option } = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input size='middle' {...kwargs} />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber size='middle' {...kwargs} />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\n            <p className='ant-upload-drag-icon'>\n              <Icon type='inbox' />\n            </p>\n            {others ? (\n              <>\n                <p className='ant-upload-text p-1'>{others.p1}</p>\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={item[others.customTitle]}\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\n                    {item[others.customTitle]}\n                  </text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value='Ggg'>\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MONTH_PICKER:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} picker=\"month\" />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName='checked'\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","import {FORM_ELEMENT_TYPES} from 'web/src/constants/formFields.constant';\n\nconst solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP BOX',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n];\n\nexport const solutionProposalCreateCPFormFields = [\n  {\n    key: 'standard_assets',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: solutionAssetOptions,\n    },\n    customLabel: 'Standard Assets',\n  },\n  {\n    key: 'insert_type',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: ['Insert', 'HDPE Tray'],\n    },\n    customLabel: 'Insert Type',\n  },\n  // {\n  //   key: 'cost',\n  //   type: FORM_ELEMENT_TYPES.INPUT,\n  //   kwargs: {\n  //     placeholder: 'Cost',\n  //     type:'number'\n  //   },\n  //   customLabel:'Cost'\n  // },\n];\n\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\n\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\n// mould_month = models.FloatField(default=0, blank=True, null=True)\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\n\nexport const formListSolutionProposalCreateCPFormFields = [\n  {\n    key: 'specification',\n    kwargs: {\n      placeholder: 'Specification',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Specification',\n  },\n  {\n    key: 'quantity',\n    kwargs: {\n      placeholder: 'Total KIT Quantity',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total KIT Quantity',\n  },\n  {\n    key: 'quantity_per_kit',\n    kwargs: {\n      placeholder: 'Qyt/KIT',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Qyt/KIT',\n  },\n  {\n    key: 'rate',\n    kwargs: {\n      placeholder: 'Rate',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Rate',\n  },\n  {\n    key: 'tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Material Req',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: 'month',\n    kwargs: {\n      placeholder: 'Month',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Month',\n  },\n  {\n    key: 'dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Dep Cost',\n  },\n];\n\nexport const stdAssetsProposalCreateCPFormFields = [\n  {\n    key: '_quantity',\n    kwargs: {\n      placeholder: 'Quantity',\n      type: 'number',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Kit Qty',\n  },\n  {\n    key: '_quantity_perkit',\n    kwargs: {\n      placeholder: 'Quantity/Kit',\n      type: 'number',\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Quantity/Kit',\n  },\n  {\n    key: '_rate',\n    kwargs: {\n      placeholder: 'Rate',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Rate',\n  },\n  {\n    key: '_tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Mat. Req.',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: '_total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type: 'number',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: '_month',\n    kwargs: {\n      placeholder: 'Month',\n      type: 'number',\n      min: 0,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Month',\n  },\n  {\n    key: '_dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Dep Cost',\n  },\n];\n\nexport const createFields = (arr) => {\n  let fields = [];\n  arr.map((key) => {\n    fields = [\n      ...fields,\n      ...stdAssetsProposalCreateCPFormFields.map((item) => ({\n        ...item,\n        key: `${key}${item.key}`,\n      })),\n    ];\n    return null;\n  });\n  return fields;\n};\n","import { createFields } from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\n\n\nexport const solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP BOX',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n]\n\n\nexport const getSolutionProposal=(record)=>{\n  if(record.standard_assets === 'FLC'\n    || record.standard_assets === 'FSC'\n    ||record.standard_assets === 'PP BOX'){\n    return {\n      [record.standard_assets]:record.std_ast_quantity_perkit,\n    }\n  }\n  if(\n    record.standard_assets === 'CRT6412' ||\n    record.standard_assets === 'CRT6418' ||\n    record.standard_assets === 'CRT6423' ||\n    record.standard_assets === 'CRT6435') {\n    return {\n      [record.standard_assets]:record.crate_lid_quantity_perkit\n    }}\n  if(\n    record.standard_assets === 'Palletized CRT6412' ||\n    record.standard_assets === 'Palletized CRT6418' ||\n    record.standard_assets === 'Palletized CRT6423' ||\n    record.standard_assets === 'Palletized CRT6435' ||\n    record.standard_assets === 'Palletized PP Box'  ||\n    record.standard_assets === 'Plastic Pallet'  ||\n    record.standard_assets === 'Wooden Pallet'\n  ) {\n    return {\n      Lid:1,\n      Crate:1,\n      [record.standard_assets]:record.palletized_lid_quantity_perkit\n    }\n  }\n\n  return {\n  }\n}\n\n\nexport const insertTypeOptions = [\n  'Insert',\n  'HDPE Tray',\n]\n\nexport const getLabels = (type,insertType)=>{\n  const specifications = {\n    'FLC':insertType==='Insert'?[\n      'FLC',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'FLC',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'FSC':insertType==='Insert'?[\n      'FSC',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'FSC',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6412':insertType==='Insert'?[\n      'CRT6412',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'CRT6412',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6418':insertType==='Insert'?[\n      'CRT6418',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'CRT6418',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6423':insertType==='Insert'?[\n      'CRT6423',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'CRT6423',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6435':insertType==='Insert'?[\n      'CRT6435',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'CRT6435',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'Palletized CRT6412':insertType==='Insert'?[\n      'Palletized CRT6412',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6412',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'Palletized CRT6418':insertType==='Insert'?[\n      'Palletized CRT6418',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6418',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'Palletized CRT6423':insertType==='Insert'?[\n      'Palletized CRT6423',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6423',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',],\n    'Palletized CRT6435':insertType==='Insert'?[\n      'Palletized CRT6435',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6435',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'PP BOX':[\n      'PP BOX',\n    ],\n    'Palletized PP Box':[\n      'Palletized PP Box',\n      'Palletized Lid',\n      'Pallet',\n    ],\n    'Plastic Pallet':[\n      'Plastic Pallet',\n      'Palletized Lid',\n    ],\n    'Wooden Pallet':[\n      'Wooden Pallet',\n      'Palletized Lid',]\n  };\n  return specifications[type];\n}\n\n\nexport const getFields = (type,insertType) => {\n  const specifications = {\n    'FLC':insertType==='Insert'?createFields([\n      'std_ast',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'FSC':insertType==='Insert'?createFields([\n      'std_ast',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6412':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6418':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6423':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6435':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6412':insertType==='Insert'?createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6418':insertType==='Insert'?createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6423':insertType==='Insert'?createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6435':insertType==='Insert'?createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'PP BOX':insertType==='Insert'?createFields([\n      'std_ast',\n    ]):createFields([\n      'std_ast',\n    ]),\n    'Palletized PP Box':createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n    ]),\n    'Plastic Pallet':createFields([\n      'std_ast',\n      'palletized_lid',\n    ]),\n    'Wooden Pallet':createFields([\n      'std_ast',\n      'palletized_lid',\n    ])\n  };\n  return specifications[type];\n};\n\n\nexport const formatStr = (str,typeStr) => {\n  return `${str}_${typeStr}`;\n}\n\nexport const getFieldsByColumn = (type,insertType,typeStr) => {\n  const specifications = {\n    'FLC':insertType==='Insert'? [\n      formatStr('std_ast',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]:[\n      formatStr('std_ast',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ],\n    'FSC':insertType==='Insert'?[\n      formatStr('std_ast',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]:[\n      formatStr('std_ast',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ],\n    'CRT6412':insertType==='Insert'?[\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]:[\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ],\n    'CRT6418':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'CRT6423':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'CRT6435':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6412':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6418':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6423':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6435':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'PP BOX':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n    ]),\n    'Palletized PP Box':([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n    ]),\n    'Plastic Pallet':([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n    ]),\n    'Wooden Pallet':([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n    ])\n  };\n  return specifications[type];\n};\n\nexport const getDefaultMonthValue = type => {\n  switch (type) {\n    case \"std_ast\":\n      return 18;\n    case \"crate_lid\":\n      return 12;\n    case \"palletized_lid\":\n      return 12;\n    case \"insert1\":\n      return 12;\n    case \"insert2\":\n      return 12;\n    case \"sep_sheet\":\n      return 12;\n    case \"mould\":\n      return 18;\n    case \"hdpe\":\n      return 12;\n    default:\n      return 0;\n  }\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin, Tag } from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ArrowRightOutlined } from '@ant-design/icons';\nimport {\n  ADD_CREATE_CP_DATA,\n  STOP_STEP_LOADING,\n} from 'common/actions';\nimport { solutionProposalCreateCPFormFields , }\n  from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\nimport { getFields, getLabels,getFieldsByColumn,getDefaultMonthValue } from 'common/constants/solutionproposalCreateCP';\n\nimport _ from 'lodash';\n\n\nexport const SolutionProposalCreateCPForm = ({ id, onCancel,lead,onNext,active }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.createCPData))\n  const [fields,setFields] =\n\t  useState(getFields(state.standard_assets ||'FLC',state.insert_type||'Insert'))\n  const [labels,setLabels] =\n\t  useState(getLabels(state.standard_assets ||'FLC',state.insert_type||'Insert'))\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:ADD_CREATE_CP_DATA,\n      data:{ ...data }\n    });\n    setLoading(false)\n    if(active === 1){\n      onNext();\n    }\n  }\n\n  // useEffect(() => {\n  // \tif (form.getFieldValue(\"standard_assets\") && form.getFieldValue(\"insert_type\")) {\n  // \t\tsetFields(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\n  // \t\tsetLabels(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\n  // \t}\n  // },[])\n\n  useEffect( ()=>{\n    if(active!==1){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n\n  console.log(state,'state')\n\n  const updateTotalKitQtysCols = useCallback(() => {\n    console.log(form.getFieldValue('kit_based_on_usage_ratio'),'kit based on',state.kit_based_on_usage_ratio)\n    if (form.getFieldValue('kit_based_on_usage_ratio')) {\n      const totalKitQtysCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'quantity');\n      console.log(totalKitQtysCols,'Totl wuanti')\n      totalKitQtysCols.forEach(i => {\n        if (!form.getFieldValue(i)) {\n          if (i!==\"mould_quantity\") {\n            form.setFieldsValue({\n              [i] : form.getFieldValue('kit_based_on_usage_ratio'),\n            })\n          } else {\n            form.setFieldsValue({\n              'mould_quantity' : 1,\n            })\n          }\n        }\n      })\n    }\n  },[form])\n\n  const updateMonthCols = useCallback(() => {\n    const monthCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'month');\n    monthCols.forEach(i => {\n      if (!form.getFieldValue(i)) {\n        form.setFieldsValue({\n          [i] : getDefaultMonthValue(i.slice(0,-6)),\n        })\n      }\n    })\n  },[form])\n\n  useEffect( () => {\n    updateTotalKitQtysCols();\n    updateMonthCols();\n  },[form])\n\n  const handleFieldsChange = useCallback(data => {\n\n    if(data[0]){\n      if(data[0].name) {\n\n        const currentInputField = data[0].name[0];\n        \t\tconsole.log(currentInputField);\n\n        if (currentInputField===\"standard_assets\" || currentInputField==='insert_type') {\n          setFields(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\n          setLabels(getLabels(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\n          updateTotalKitQtysCols();\n          updateMonthCols();\n        } else {\n          const totalKitQtysCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'quantity');\n          const qtyPerKitCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'quantity_perkit');\n          const rateCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'rate');\n          const totalMatReqCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'tot_mat_req');\n          const totalCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'total_cost');\n          const monthCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'month');\n          const depCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'dep_cost');\n\n          qtyPerKitCols.forEach((i,idx) => {\n            if (currentInputField===totalKitQtysCols[idx] || currentInputField===qtyPerKitCols[idx] || currentInputField===rateCols[idx] || currentInputField===totalMatReqCols[idx] || currentInputField===totalCostCols[idx] || currentInputField===monthCols[idx] || currentInputField===depCostCols[idx]) {\n              if (form.getFieldValue(totalKitQtysCols[idx]) && form.getFieldValue(qtyPerKitCols[idx])) {\n                const totalMatReqVal = form.getFieldValue(totalKitQtysCols[idx])*form.getFieldValue(qtyPerKitCols[idx]);\n                form.setFieldsValue({\n                  [totalMatReqCols[idx]] : totalMatReqVal,\n                  [totalCostCols[idx]] : form.getFieldValue(rateCols[idx])*totalMatReqVal,\n                })\n              } else {\n                form.setFieldsValue({\n                  [totalMatReqCols[idx]] : 0,\n                  [totalCostCols[idx]] : 0,\n                })\n              }\n\n              if ( form.getFieldValue(totalCostCols[idx]) && form.getFieldValue(monthCols[idx]) && form.getFieldValue(\"yantra_cycle\") ) {\n                form.setFieldsValue({\n                  [depCostCols[idx]] : _.round((( form.getFieldValue(totalCostCols[idx])/form.getFieldValue(monthCols[idx]) )/30)*form.getFieldValue(\"yantra_cycle\"),2),\n                })\n              } else {\n                form.setFieldsValue({\n                  [depCostCols[idx]] : 0,\n                })\n              }\n            }\n          })\n        }\n\n      }\n    }\n\n  },[form,fields,labels])\n\n  // const handleFieldsChange = (data) => {\n  //   if(data[0]){\n  //     if(data[0].name){\n  //       if(data[0].name[0]==='standard_assets') {\n  //         // console.log(getFields(data[0].value),form.getFieldValue('insert_type'),'Ggg')\n  //         setFields(getFields(data[0].value,form.getFieldValue('insert_type')))\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\n  //       }\n  //       if(data[0].name[0]==='insert_type') {\n  //         // console.log(form.getFieldValue('standard_assets'),getFields(data[0].value),'Ggg')\n  //         setFields(getFields(form.getFieldValue('standard_assets'),data[0].value))\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\n  //       }}}\n  // }\n\n  return (\n    <Spin spinning={loading}>\n      <Form\n        initialValues={{\n\t\t\t\t  ...state,\n\t\t\t\t  insert_type:state.insert_type||'Insert',\n\t\t\t\t  standard_assets:state.standard_assets || 'FLC' }}\n        onFinish={submit}\n        form={form}\n        layout='vertical'\n\t\t\t\t// hideRequiredMark\n        onFieldsChange={handleFieldsChange}\n        autoComplete='off'\n\t\t\t>\n        <Divider orientation='left'>Capex</Divider>\n        <div className='row px-2'>\n          {state.solution_flc ? <Tag>FLC</Tag> : null}\n          {state.solution_fsc ? <Tag>FSC</Tag> : null}\n          {state.solution_crate ? <Tag>Crate</Tag> : null}\n          {state.solution_ppbox ? <Tag>PP Box</Tag> : null}\n          {state.solution_palletized_box ? <Tag>Solution Palletized Box</Tag> : null}\n          {state.solution_palletized_crate? <Tag>Solution Palletized Crate</Tag> : null}\n          {state.solution_pp ? <Tag>Solution PP</Tag> : null}\n          {state.solution_stacking_nesting ? <Tag>Solution Stacking Nesting</Tag> : null}\n          {state.solution_wp ? <Tag>Solution WP</Tag> : null}\n        </div>\n        <Row style={{ justifyContent: 'left' }}>\n          {solutionProposalCreateCPFormFields.map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          <Col span={3}>\n            <div className='p-2 flex row justify-center'>\n              <b />\n            </div>\n          </Col>\n          {[...fields].slice(0,7).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\n                <b>{item.customLabel}</b>\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {labels.slice(0,1).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(0,7).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {labels.slice(1,2).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(7,14).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {labels.slice(2,3).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(14,21).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {labels.slice(3,4).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(21,28).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {labels.slice(4,5).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(28,35).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {labels.slice(5,6).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(35,42).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {labels.slice(6,7).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2 flex row justify-center'>\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(42,49).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        {/* <Form.List name='solutions'> */}\n        {/*  {(fields, { add, remove }) => { */}\n        {/*    return ( */}\n        {/*      <div> */}\n        {/*        {fields.map((field, index) => ( */}\n        {/*          <Row align='middle'> */}\n        {/*            {formListSolutionProposalCreateCPFormFields.slice(0,1).map((item) => ( */}\n        {/*              <Col span={4}> */}\n        {/*                <div className='p-2'> */}\n        {/*                  {formItem({ */}\n        {/*                    ...item, */}\n        {/*                    noLabel: index !== 0, */}\n        {/*                    form, */}\n        {/*                    others: { */}\n        {/*                      formOptions: { */}\n        {/*                        ...field, */}\n        {/*                        // hidden:true, */}\n        {/*                        name: [field.name, item.key], */}\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\n        {/*                      }, */}\n        {/*                    }, */}\n        {/*                  })} */}\n        {/*                </div> */}\n        {/*              </Col> */}\n        {/*            ))} */}\n        {/*            {[...createFields('std_ast')].slice(1,7).map((item) => ( */}\n        {/*              <Col span={3}> */}\n        {/*                <div className='p-2'> */}\n        {/*                  {formItem({ */}\n        {/*                    ...item, */}\n        {/*                    noLabel: index !== 0, */}\n        {/*                    form, */}\n        {/*                    others: { */}\n        {/*                      formOptions: { */}\n        {/*                        ...field, */}\n        {/*                        name: [field.name, item.key], */}\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\n        {/*                      }, */}\n        {/*                    }, */}\n        {/*                  })} */}\n        {/*                </div> */}\n        {/*              </Col> */}\n        {/*            ))} */}\n        {/*          </Row> */}\n        {/*        ))} */}\n        {/*      </div> */}\n        {/*    ); */}\n        {/*  }} */}\n        {/* </Form.List> */}\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit' disabled>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n          <Button type='link' htmlType='submit'>\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default SolutionProposalCreateCPForm;\n"],"sourceRoot":""}
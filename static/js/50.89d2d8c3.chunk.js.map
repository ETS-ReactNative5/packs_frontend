{"version":3,"sources":["../../common/formFields/PFEP/PFEPSolutionRequired.formFields.js","forms/PFEP/PFEPSolutionRequired.form.js"],"names":["PREPSolutionRequiredFormFields","key","kwargs","placeholder","type","FORM_ELEMENT_TYPES","SELECT","others","selectOptions","INPUT","customLabel","PFEPSolutionRequiredForm","id","onCancel","onDone","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","submit","useSelector","e","data","pfepData","a","ADD_PFEP_DATA","spinning","orientation","onFinish","layout","hideRequiredMark","autoComplete","style","justifyContent","slice","map","item","idx","span","toString","className","formItem","htmlType","onClick"],"mappings":"8VAEaA,EAAiC,CAC5C,CACEC,IAAK,YACLC,OAAQ,CACNC,YAAa,UAEfC,KAAMC,IAAmBC,OACzBC,OAAQ,CACNC,cAAe,CAAC,MAAO,MAAO,QAAS,YAG3C,CACEP,IAAK,mBACLC,OAAQ,CACNC,YAAa,oBAEfC,KAAMC,IAAmBI,MACzBC,YAAa,oBAEf,CACET,IAAK,QACLC,OAAQ,CACNC,YAAa,YAEfC,KAAMC,IAAmBI,MACzBC,YAAa,YAEf,CACET,IAAK,SACLC,OAAQ,CACNC,YAAa,UAEfC,KAAMC,IAAmBC,OACzBC,OAAQ,CACNC,cAAe,CAAC,YAAa,YAAa,cACxC,cAAc,cAAc,sBC9BvBG,EAA2B,SAAC,GAAmC,EAAjCC,GAAiC,EAA7BC,SAA8B,IAArBC,EAAoB,EAApBA,OAAoB,KAAbC,OAChCC,oBAAS,IADoC,mBACnEC,EADmE,KAC3DC,EAD2D,OAE3D,IAAKC,UAAbC,EAFmE,oBAGpEC,EAAWC,cAIXC,GAHSC,aAAY,SAAAC,GAAC,OAAGA,EAAEC,KAAKC,YAG1B,uCAAG,WAAOD,GAAP,SAAAE,EAAA,6DACbV,GAAW,GADE,SAEPG,EAAS,CAAEjB,KAAKyB,IAAcH,SAFvB,OAGbR,GAAW,GAHE,2CAAH,uDAQZ,OACE,uBAAMY,SAAUb,GACd,uBAASc,YAAY,QAArB,qBACA,uBACEC,SAAUT,EACVH,KAAMA,EACNa,OAAO,WACPC,kBAAgB,EAChBC,aAAa,OAEb,uBAAKC,MAAO,CAAEC,eAAgB,SAC3BrC,EAA+BsC,MAAM,EAAG,GAAGC,KAAI,SAACC,EAAMC,GAAP,OAC9C,uBAAKC,KAAM,GACT,yBAAKzC,IAAKwC,EAAIE,WAAYC,UAAU,OACjCC,YAASL,SAKlB,2BACE,uBAAQpC,KAAK,UAAU0C,SAAS,UAAhC,UAGA,yBAAKF,UAAU,QACf,uBAAQxC,KAAK,UAAU2C,QAASjC,GAAhC,cASKH","file":"static/js/50.89d2d8c3.chunk.js","sourcesContent":["import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\nexport const PREPSolutionRequiredFormFields = [\n  {\n    key: 'container',\n    kwargs: {\n      placeholder: 'Select',\n    },\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: ['FLC', 'FSC', 'Crate', 'PP Box'],\n    },\n  },\n  {\n    key: 'part_orientation',\n    kwargs: {\n      placeholder: 'Part Orientation',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Part Orientation',\n  },\n  {\n    key: 'parts',\n    kwargs: {\n      placeholder: 'Parts/PM',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Parts/PM',\n  },\n  {\n    key: 'status',\n    kwargs: {\n      placeholder: 'Select',\n    },\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: ['TP Shared', 'CP Shared', 'TP Approved',\n        'CP Approved','Trials Done','Trials Approved'],\n    },\n  },\n]\n","import React, { useState } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin} from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_PFEP_DATA } from 'common/actions';\nimport { PREPSolutionRequiredFormFields } from 'common/formFields/PFEP/PFEPSolutionRequired.formFields';\n\nexport const PFEPSolutionRequiredForm = ({ id, onCancel,onDone,onNext }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.pfepData))\n\n\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:ADD_PFEP_DATA,data });\n    setLoading(false)\n\n  }\n\n\n  return (\n    <Spin spinning={loading}>\n      <Divider orientation='left'>Solution Required</Divider>\n      <Form\n        onFinish={submit}\n        form={form}\n        layout='vertical'\n        hideRequiredMark\n        autoComplete='off'\n      >\n        <Row style={{ justifyContent: 'left' }}>\n          {PREPSolutionRequiredFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row>\n          <Button type='primary' htmlType='submit'>\n            Submit\n          </Button>\n          <div className='p-2' />\n          <Button type='primary' onClick={onDone}>\n            Cancel\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default PFEPSolutionRequiredForm;\n\n"],"sourceRoot":""}
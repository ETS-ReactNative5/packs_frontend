{"version":3,"sources":["../../common/formFields/createCP/operatingCostMonthly.formFields.js","forms/CreateCP/operatingCostMonthlyCreateCP.form.js","../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js"],"names":["operatingCostMonthlyFormFields","key","kwargs","placeholder","type","disabled","FORM_ELEMENT_TYPES","INPUT","others","formOptions","noStyle","customLabel","LogisticCreateCPForm","id","onCancel","onDone","active","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","submit","a","ADD_CREATE_CP_DATA","editCP","error","notification","warning","message","description","createCP","success","useEffect","STOP_STEP_LOADING","updateDirectCost","useCallback","getFieldValue","directCost","getFieldsByColumn","forEach","i","setFieldsValue","_","round","updateOperatingCost","updateContingencyMargin","updateMinCostToBillForATrip","updatePriceShouldBeBilled","updateMarginAgreedForThisFlow","updateGrossMargins","handleFieldsChange","name","spinning","orientation","onFinish","initialValues","layout","onFieldsChange","autoComplete","style","justifyContent","slice","map","item","idx","span","toString","className","formItem","justify","htmlType","onClick","solutionProposalCreateCPFormFields","SELECT","selectOptions","stdAssetsProposalCreateCPFormFields","min","createFields","arr","fields","getSolutionProposal","record","standard_assets","std_ast_quantity_perkit","crate_lid_quantity_perkit","Lid","Pallet","palletized_lid_quantity_perkit","getLabels","insertType","FLC","FSC","CRT6412","CRT6418","CRT6423","CRT6435","getFields","formatStr","str","typeStr","getDefaultMonthValue"],"mappings":"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","file":"static/js/78.979cfa91.chunk.js","sourcesContent":["import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\r\n\r\n\r\nexport const operatingCostMonthlyFormFields = [\r\n  {\r\n    key: 'direct_cost',\r\n    kwargs: {\r\n      placeholder: 'Direct Cost',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true, },\r\n    },\r\n    customLabel: 'Direct Cost',\r\n  },\r\n  {\r\n    key: 'operating_cost',\r\n    kwargs: {\r\n      placeholder: 'Operating Cost',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Operating Cost',\r\n  },\r\n  {\r\n    key: 'contigency_margin',\r\n    kwargs: {\r\n      placeholder: 'Contingency Margin',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Contingency Margin',\r\n  },\r\n  {\r\n    key: 'min_cost_for_trip',\r\n    kwargs: {\r\n      placeholder: 'Min cost to bill for a trip',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Min cost to bill for a trip',\r\n  },\r\n  {\r\n    key: 'billing_price',\r\n    kwargs: {\r\n      placeholder: 'Price should be billed @ 20% margin',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Price should be billed @ 20% margin',\r\n  },\r\n  {\r\n    key: 'agreed_margin',\r\n    kwargs: {\r\n      placeholder: 'Margin agreed for this flow',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Margin agreed for this flow (%)',\r\n  },\r\n  {\r\n    key: 'trip_cost',\r\n    kwargs: {\r\n      placeholder: 'TRIP COST (SALES)',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'TRIP COST (SALES)',\r\n  },\r\n  {\r\n    key: 'gross_margins',\r\n    kwargs: {\r\n      placeholder: 'Gross Margins',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Gross Margins (%)',\r\n  },\r\n  {\r\n    key: 'remarks',\r\n    kwargs: {\r\n      placeholder: 'Remarks',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Remarks',\r\n  },\r\n];\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Form, Col, Row, Button, Divider, Spin, notification } from 'antd';\r\nimport formItem from 'hocs/formItem.hoc';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\r\nimport { operatingCostMonthlyFormFields } from 'common/formFields/createCP/operatingCostMonthly.formFields';\r\nimport { getFieldsByColumn, } from 'common/constants/solutionproposalCreateCP';\r\nimport { createCP, editCP } from 'common/api/auth';\r\n\r\nimport { ifNanReturnZero } from 'common/helpers/mrHelper';\r\nimport _ from 'lodash';\r\n\r\n\r\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\r\n  const [loading,setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const state =  useSelector(e=>(e.data.createCPData))\r\n\r\n\r\n  const submit = async (data) =>{\r\n    setLoading(true)\r\n    console.log(data,'data to be submitted')\r\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\r\n    setLoading(false)\r\n    if(active === 3){\r\n      if(id){\r\n        const { error } = await editCP(id,{ ...state,...data });\r\n        if (error) {\r\n          notification.warning({\r\n            message: 'Unable To Edit.',\r\n            description:\r\n              'Something went wrong CP editing failed.',\r\n          });\r\n          onCancel();\r\n        } else {\r\n          onDone();\r\n        }\r\n      }\r\n      else{\r\n        const { error } = await createCP({ ...state,...data });\r\n        if (error) {\r\n          notification.warning({\r\n            message: 'Unable To Create.',\r\n            description:\r\n              'Something went wrong CP creation failed.',\r\n          });\r\n          onCancel();\r\n        } else {\r\n          onDone();\r\n          notification.success({\r\n            message: 'CP Created/Edited Successfully.',\r\n          });\r\n        }\r\n      }\r\n    }}\r\n\r\n  useEffect( ()=>{\r\n    if(active!==3){\r\n      form.submit()\r\n      dispatch({ type:STOP_STEP_LOADING })\r\n    }\r\n  },[active])\r\n\r\n  const updateDirectCost = useCallback(() => {\r\n    if (form.getFieldValue('standard_assets') && form.getFieldValue('insert_type') && form.getFieldValue(\"kit_based_on_usage_ratio\")) {\r\n      let directCost = 0;\r\n      const depCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'dep_cost');\r\n      console.log(depCostCols,'depCostCols')\r\n      depCostCols.forEach((i) => {\r\n        console.log(form.getFieldValue(i),i);\r\n        directCost += form.getFieldValue(i);\r\n      })\r\n      console.log(directCost,'directCost')\r\n      directCost /=form.getFieldValue(\"kit_based_on_usage_ratio\");\r\n      console.log(directCost,'again dC')\r\n      form.setFieldsValue({\r\n        \"direct_cost\" : _.round(directCost,2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"direct_cost\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateOperatingCost = useCallback(() => {\r\n    if (form.getFieldValue(\"total_cost\")) {\r\n      form.setFieldsValue({\r\n        \"operating_cost\" : _.round(form.getFieldValue(\"total_cost\"),2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"operating_cost\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateContingencyMargin = useCallback(() => {\r\n    if (form.getFieldValue(\"operating_cost\") && form.getFieldValue(\"direct_cost\")) {\r\n      form.setFieldsValue({\r\n        \"contigency_margin\" : _.round((form.getFieldValue(\"operating_cost\")+form.getFieldValue(\"direct_cost\"))*0.02,2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"contigency_margin\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateMinCostToBillForATrip = useCallback(() => {\r\n    if (form.getFieldValue(\"operating_cost\") && form.getFieldValue(\"direct_cost\") && form.getFieldValue(\"contigency_margin\")) {\r\n      form.setFieldsValue({\r\n        \"min_cost_for_trip\" : _.round(form.getFieldValue(\"operating_cost\")+form.getFieldValue(\"direct_cost\")+form.getFieldValue(\"contigency_margin\"),2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"min_cost_for_trip\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updatePriceShouldBeBilled = useCallback(() => {\r\n    if (form.getFieldValue(\"min_cost_for_trip\")) {\r\n      form.setFieldsValue({\r\n        \"billing_price\" : _.round(form.getFieldValue(\"min_cost_for_trip\")/0.8,2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"billing_price\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateMarginAgreedForThisFlow = useCallback(() => {\r\n    if (form.getFieldValue(\"trip_cost\") && form.getFieldValue(\"min_cost_for_trip\")) {\r\n      form.setFieldsValue({\r\n        \"agreed_margin\" : _.round((form.getFieldValue(\"trip_cost\")/form.getFieldValue(\"min_cost_for_trip\")-1)*100,2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"agreed_margin\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  const updateGrossMargins = useCallback(() => {\r\n    if (form.getFieldValue(\"trip_cost\") && form.getFieldValue(\"operating_cost\")) {\r\n      form.setFieldsValue({\r\n        \"gross_margins\" : _.round(((form.getFieldValue(\"trip_cost\")-form.getFieldValue(\"operating_cost\"))/form.getFieldValue(\"trip_cost\")*100),2),\r\n      })\r\n    } else {\r\n      form.setFieldsValue({\r\n        \"gross_margins\" : 0,\r\n      })\r\n    }\r\n  },[form])\r\n\r\n  useEffect( () => {\r\n    updateDirectCost();\r\n    updateOperatingCost();\r\n    updateContingencyMargin();\r\n    updateMinCostToBillForATrip();\r\n    updatePriceShouldBeBilled();\r\n    updateMarginAgreedForThisFlow();\r\n    updateGrossMargins();\r\n  }, [] )\r\n\r\n  const handleFieldsChange = useCallback(data => {\r\n\r\n    if(data[0]){\r\n      if(data[0].name) {\r\n\r\n        const currentInputField = data[0].name[0];\r\n        console.log(currentInputField);\r\n\r\n        if (currentInputField===\"trip_cost\") {\r\n          updateMarginAgreedForThisFlow();\r\n          updateGrossMargins();\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n  \t},[form,])\r\n\r\n\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <Divider orientation='left'>Opex</Divider>\r\n      <Form\r\n        onFinish={submit}\r\n        form={form}\r\n        initialValues={\r\n          { ...state }\r\n        }\r\n        layout='vertical'\r\n        onFieldsChange={handleFieldsChange}\r\n        // hideRequiredMark\r\n        autoComplete='off'\r\n      >\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(8, 12).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(8,12).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(12, 16).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(12,16).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(16, 18).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(16,18).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row justify='space-between'>\r\n          <div className='row'>\r\n            <Button type='primary' htmlType='submit'>\r\n              Submit\r\n            </Button>\r\n            <div className='p-2' />\r\n            <Button type='primary' onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </Row>\r\n      </Form>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default LogisticCreateCPForm;\r\n\r\n","import {FORM_ELEMENT_TYPES} from 'web/src/constants/formFields.constant';\r\n\r\nconst solutionAssetOptions = [\r\n  'FLC',\r\n  'FSC',\r\n  'CRT6412',\r\n  'CRT6418',\r\n  'CRT6423',\r\n  'CRT6435',\r\n  'Palletized CRT6412',\r\n  'Palletized CRT6418',\r\n  'Palletized CRT6423',\r\n  'Palletized CRT6435',\r\n  'PP Box',\r\n  'Palletized PP Box',\r\n  'Plastic Pallet',\r\n  'Wooden Pallet',\r\n];\r\n\r\nexport const solutionProposalCreateCPFormFields = [\r\n  {\r\n    key: 'standard_assets',\r\n    type: FORM_ELEMENT_TYPES.SELECT,\r\n    others: {\r\n      selectOptions: solutionAssetOptions,\r\n    },\r\n    customLabel: 'Standard Assets',\r\n  },\r\n  {\r\n    key: 'insert_type',\r\n    type: FORM_ELEMENT_TYPES.SELECT,\r\n    others: {\r\n      selectOptions: ['Insert', 'HDPE Tray'],\r\n    },\r\n    customLabel: 'Insert Type',\r\n  },\r\n  // {\r\n  //   key: 'cost',\r\n  //   type: FORM_ELEMENT_TYPES.INPUT,\r\n  //   kwargs: {\r\n  //     placeholder: 'Cost',\r\n  //     type:'number'\r\n  //   },\r\n  //   customLabel:'Cost'\r\n  // },\r\n];\r\n\r\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\r\n\r\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\r\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// mould_month = models.FloatField(default=0, blank=True, null=True)\r\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n\r\nexport const formListSolutionProposalCreateCPFormFields = [\r\n  {\r\n    key: 'specification',\r\n    kwargs: {\r\n      placeholder: 'Specification',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Specification',\r\n  },\r\n  {\r\n    key: 'quantity',\r\n    kwargs: {\r\n      placeholder: 'Total KIT Quantity',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Total KIT Quantity',\r\n  },\r\n  {\r\n    key: 'quantity_per_kit',\r\n    kwargs: {\r\n      placeholder: 'Qyt/KIT',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Qyt/KIT',\r\n  },\r\n  {\r\n    key: 'rate',\r\n    kwargs: {\r\n      placeholder: 'Rate',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Rate',\r\n  },\r\n  {\r\n    key: 'tot_mat_req',\r\n    kwargs: {\r\n      placeholder: 'Total Material Req',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Mat. Req.',\r\n  },\r\n  {\r\n    key: 'total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Total Cost',\r\n  },\r\n  {\r\n    key: 'month',\r\n    kwargs: {\r\n      placeholder: 'Month',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Month',\r\n  },\r\n  {\r\n    key: 'dep_cost',\r\n    kwargs: {\r\n      placeholder: 'Dep Cost',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Dep Cost',\r\n  },\r\n];\r\n\r\nexport const stdAssetsProposalCreateCPFormFields = [\r\n  {\r\n    key: '_quantity',\r\n    kwargs: {\r\n      placeholder: 'Quantity',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Kit Qty',\r\n  },\r\n  {\r\n    key: '_quantity_perkit',\r\n    kwargs: {\r\n      placeholder: 'Quantity/Kit',\r\n      type: 'number',\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Quantity/Kit',\r\n  },\r\n  {\r\n    key: '_rate',\r\n    kwargs: {\r\n      placeholder: 'Rate',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Rate',\r\n  },\r\n  {\r\n    key: '_tot_mat_req',\r\n    kwargs: {\r\n      placeholder: 'Total Mat. Req.',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Mat. Req.',\r\n  },\r\n  {\r\n    key: '_total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Cost',\r\n  },\r\n  {\r\n    key: '_month',\r\n    kwargs: {\r\n      placeholder: 'Month',\r\n      type: 'number',\r\n      min: 0,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Month',\r\n  },\r\n  {\r\n    key: '_dep_cost',\r\n    kwargs: {\r\n      placeholder: 'Dep Cost',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Dep Cost',\r\n  },\r\n];\r\n\r\nexport const createFields = (arr) => {\r\n  let fields = [];\r\n  arr.map((key) => {\r\n    fields = [\r\n      ...fields,\r\n      ...stdAssetsProposalCreateCPFormFields.map((item) => ({\r\n        ...item,\r\n        key: `${key}${item.key}`,\r\n      })),\r\n    ];\r\n    return null;\r\n  });\r\n  return fields;\r\n};\r\n","import {createFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\r\n\r\nexport const solutionAssetOptions = [\r\n  'FLC',\r\n  'FSC',\r\n  'CRT6412',\r\n  'CRT6418',\r\n  'CRT6423',\r\n  'CRT6435',\r\n  'Palletized CRT6412',\r\n  'Palletized CRT6418',\r\n  'Palletized CRT6423',\r\n  'Palletized CRT6435',\r\n  'PP Box',\r\n  'Palletized PP Box',\r\n  'Plastic Pallet',\r\n  'Wooden Pallet',\r\n];\r\n\r\nexport const getSolutionProposal = (record) => {\r\n  if (\r\n    record.standard_assets === 'FLC' ||\r\n    record.standard_assets === 'FSC' ||\r\n    record.standard_assets === 'PP Box'\r\n  ) {\r\n    return {\r\n      [record.standard_assets]: record.std_ast_quantity_perkit,\r\n    };\r\n  }\r\n  if (\r\n    record.standard_assets === 'CRT6412' ||\r\n    record.standard_assets === 'CRT6418' ||\r\n    record.standard_assets === 'CRT6423' ||\r\n    record.standard_assets === 'CRT6435'\r\n  ) {\r\n    return {\r\n      [record.standard_assets]: record.crate_lid_quantity_perkit,\r\n    };\r\n  }\r\n  if (\r\n    record.standard_assets === 'Palletized CRT6412' ||\r\n    record.standard_assets === 'Palletized CRT6418' ||\r\n    record.standard_assets === 'Palletized CRT6423' ||\r\n    record.standard_assets === 'Palletized CRT6435' ||\r\n    record.standard_assets === 'Palletized PP Box' ||\r\n    record.standard_assets === 'Plastic Pallet' ||\r\n    record.standard_assets === 'Wooden Pallet'\r\n  ) {\r\n    return {\r\n      Lid: 1,\r\n      Pallet: 1,\r\n      [record.standard_assets]: record.palletized_lid_quantity_perkit,\r\n    };\r\n  }\r\n\r\n  return {};\r\n};\r\n\r\nexport const insertTypeOptions = ['Insert', 'HDPE Tray'];\r\n\r\nexport const getLabels = (type, insertType) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? ['FLC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['FLC', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? ['FSC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['FSC', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? ['CRT6412', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6412', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? ['CRT6418', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6418', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? ['CRT6423', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6423', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? ['CRT6435', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6435', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6412',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6412', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6418',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6418', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6423',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6423', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6435',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6435', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'PP Box': ['PP Box'],\r\n    'Palletized PP Box': ['Palletized PP Box', 'Palletized Lid', 'Pallet'],\r\n    'Plastic Pallet': ['Plastic Pallet', 'Palletized Lid'],\r\n    'Wooden Pallet': ['Wooden Pallet', 'Palletized Lid'],\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const getFields = (type, insertType) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'PP Box': insertType === 'Insert' ? createFields(['std_ast']) : createFields(['std_ast']),\r\n    'Palletized PP Box': createFields(['std_ast', 'palletized_lid', 'pallet']),\r\n    'Plastic Pallet': createFields(['std_ast', 'palletized_lid']),\r\n    'Wooden Pallet': createFields(['std_ast', 'palletized_lid']),\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const formatStr = (str, typeStr) => {\r\n  return `${str}_${typeStr}`;\r\n};\r\n\r\nexport const getFieldsByColumn = (type, insertType, typeStr) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'PP Box':\r\n      insertType === 'Insert' ? [formatStr('std_ast', typeStr)] : [formatStr('std_ast', typeStr)],\r\n    'Palletized PP Box': [\r\n      formatStr('std_ast', typeStr),\r\n      formatStr('palletized_lid', typeStr),\r\n      formatStr('pallet', typeStr),\r\n    ],\r\n    'Plastic Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\r\n    'Wooden Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const getDefaultMonthValue = (type) => {\r\n  switch (type) {\r\n    case 'std_ast':\r\n      return 18;\r\n    case 'crate_lid':\r\n      return 12;\r\n    case 'palletized_lid':\r\n      return 12;\r\n    case 'insert1':\r\n      return 12;\r\n    case 'insert2':\r\n      return 12;\r\n    case 'sep_sheet':\r\n      return 12;\r\n    case 'mould':\r\n      return 18;\r\n    case 'hdpe':\r\n      return 12;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n"],"sourceRoot":""}
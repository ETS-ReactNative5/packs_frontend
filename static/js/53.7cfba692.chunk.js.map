{"version":3,"sources":["constants/formFields.constant.js","hocs/formItem.hoc.js","../../common/helpers/mrHelper.js","../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","../../common/formFields/createCP/operatingCostMonthly.formFields.js","forms/CreateCP/operatingCostMonthlyCreateCP.form.js"],"names":["FORM_ELEMENT_TYPES","INPUT","MULTIPLE_CHECKBOX","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","SWITCH","HIDDEN","DATE","CASCADER","Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","Item","label","charAt","toUpperCase","slice","size","Dragger","style","maxHeight","width","className","p1","p2","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","radioOptions","onChange","date","checkOptions","valuePropName","mergeArray","a","b","obj","filter","mr","id","is_rejected","reason","remarks","statusCheck","isAllocated","isRejected","status","filterActive","data","_","el","active","ifNanReturnZero","num","parseInt","solutionProposalCreateCPFormFields","stdAssetsProposalCreateCPFormFields","placeholder","noStyle","disabled","min","createFields","arr","fields","getLabels","insertType","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","operatingCostMonthlyFormFields","LogisticCreateCPForm","onCancel","onDone","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","createCPData","submit","ADD_CREATE_CP_DATA","editCP","error","notification","warning","message","description","createCP","success","useEffect","STOP_STEP_LOADING","updateDirectCost","useCallback","getFieldValue","directCost","forEach","setFieldsValue","round","updateOperatingCost","updateContingencyMargin","updateMinCostToBillForATrip","updatePriceShouldBeBilled","updateMarginAgreedForThisFlow","updateGrossMargins","handleFieldsChange","spinning","orientation","onFinish","initialValues","layout","onFieldsChange","autoComplete","justifyContent","idx","span","formItem","justify","htmlType","onClick"],"mappings":"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xB,IAAG,UAAIA,GAAJ,OAAUwB,EAAKxB,YAErB,QAEFwE,I,iCC1ST,qJAyBaC,EAAY,SAACtE,EAAKuE,GAuJ7B,MAtJuB,CACrB,IAAmB,WAAbA,EAAsB,CAC1B,MACA,gBACA,gBACA,mBACA,CACA,MACA,kBACA,QACA,QAEF,IAAmB,WAAbA,EAAsB,CAC1B,MACA,gBACA,gBACA,mBACA,CACA,MACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,QAAuB,WAAbA,EAAsB,CAC9B,UACA,YACA,gBACA,gBACA,mBACA,CACA,UACA,YACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QAEF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QACF,qBAAkC,WAAbA,EAAsB,CACzC,qBACA,iBACA,SACA,gBACA,gBACA,mBACA,CACA,qBACA,iBACA,SACA,kBACA,QACA,QAEF,SAAS,CACP,UAEF,oBAAoB,CAClB,oBACA,iBACA,UAEF,iBAAiB,CACf,iBACA,kBAEF,gBAAgB,CACd,gBACA,mBAEkBvE,IAIXwE,EAAY,SAACxE,EAAKuE,GA2J7B,MA1JuB,CACrB,IAAmB,WAAbA,EAAsBJ,YAAa,CACvC,UACA,UACA,UACA,cACCA,YAAa,CACd,UACA,YACA,QACA,SAEF,IAAmB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","file":"static/js/53.7cfba692.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\n  INPUT: 'input',\n  MULTIPLE_CHECKBOX: 'MULTIPLE_CHECKBOX',\n  INPUT_NUMBER: 'input-number',\n  PASSWORD: 'password',\n  TEXTAREA: 'textarea',\n  MARKDOWN: 'markdown',\n  SELECT: 'select',\n  CAPTCHA: 'captcha',\n  MONTH_PICKER: 'month-picker',\n  FILE_DRAG_DROP: 'file-drag-drop',\n  RANGE_PICKER: 'range-picker',\n  RADIO: 'radio',\n  SWITCH: 'switch',\n  HIDDEN: 'hidden',\n  DATE: 'date',\n  CASCADER: 'cascader',\n};\n\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\n\nexport const CAPTCHA = {\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\n  name: 'captcha',\n  label: 'Captcha',\n  rules: [\n    {\n      required: process.env.NODE_ENV === 'production',\n      message: 'Please solve the captcha',\n    },\n  ],\n};\n","import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport { Icon } from '@ant-design/compatible';\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\n\nconst { Option } = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input {...kwargs} size='middle' />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber {...kwargs} size='middle' />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\n            <p className='ant-upload-drag-icon'>\n              <Icon type='inbox' />\n            </p>\n            {others ? (\n              <>\n                <p className='ant-upload-text p-1'>{others.p1}</p>\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={item[others.customTitle]}\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\n                    {item[others.customTitle]}\n                  </text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value='Ggg'>\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} />\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName='checked'\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","export const mergeArray=(a,b)=>{\n  return a.map((item) => {\n    const obj = b.filter(i => i.mr === item.id)[0];\n    if(obj){\n      return  { ...item,\n        is_rejected:obj.is_rejected,\n        reason:obj.reason,\n        mr:obj.mr,\n        remarks:obj.remarks\n      }\n    }\n    return item\n  });\n}\n\nexport const statusCheck =(isAllocated,isRejected)=>{\n  let status = 'Allocated';\n  if(!isAllocated && !isRejected){\n    status='Pending';\n  }\n  else if(isAllocated && !isRejected){\n    status='Allocated';\n  }\n  else if(!isAllocated && isRejected){\n    status='Rejected';\n  }\n  return status\n}\n\nexport const filterActive = (data) => {\n  return _.filter(data, (el) => el.active );\n}\n\nexport const ifNanReturnZero = num => {\n  return parseInt(num) ? parseInt(num) : 0;\n}\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\n\nconst solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP BOX',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n]\n\n\nexport const solutionProposalCreateCPFormFields = [\n  {\n    key: 'standard_assets',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: solutionAssetOptions,\n    },\n    customLabel:'Standard Assets'\n  },\n  {\n    key: 'insert_type',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: ['Insert','HDPE Tray'],\n    },\n    customLabel:'Insert Type'\n  },\n  // {\n  //   key: 'cost',\n  //   type: FORM_ELEMENT_TYPES.INPUT,\n  //   kwargs: {\n  //     placeholder: 'Cost',\n  //     type:'number'\n  //   },\n  //   customLabel:'Cost'\n  // },\n];\n\n\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\n\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\n// mould_month = models.FloatField(default=0, blank=True, null=True)\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\n\n\nexport const formListSolutionProposalCreateCPFormFields = [\n  {\n    key: 'specification',\n    kwargs: {\n      placeholder: 'Specification',\n      disabled:true\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Specification',\n  },\n  {\n    key: 'quantity',\n    kwargs: {\n      placeholder: 'Total KIT Quantity',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total KIT Quantity',\n  },\n  {\n    key: 'quantity_per_kit',\n    kwargs: {\n      placeholder: 'Qyt/KIT',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Qyt/KIT',\n  },\n  {\n    key: 'rate',\n    kwargs: {\n      placeholder: 'Rate',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Rate',\n  },\n  {\n    key: 'tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Material Req',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: 'month',\n    kwargs: {\n      placeholder: 'Month',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Month',\n  },\n  {\n    key: 'dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Dep Cost',\n  },\n]\n\nexport const stdAssetsProposalCreateCPFormFields = [\n  {\n    key: '_quantity',\n    kwargs: {\n      placeholder: 'Quantity',\n      type:'number'\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Kit Qty',\n  },\n  {\n    key: '_quantity_perkit',\n    kwargs: {\n      placeholder: 'Quantity/Kit',\n      type:'number'\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Quantity/Kit',\n  },\n  {\n    key: '_rate',\n    kwargs: {\n      placeholder: 'Rate',\n      type:'number'\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'Rate',\n  },\n  {\n    key: '_tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Mat. Req.',\n      disabled: true,\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: '_total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type:'number',\n      disabled: true,\n    },\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: '_month',\n    kwargs: {\n      placeholder: 'Month',\n      type: 'number',\n      min: 0,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'Month',\n  },\n  {\n    key: '_dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions:{ noStyle:true }\n    },\n    customLabel: 'Dep Cost',\n  },\n]\n\nexport const createFields=(arr)=>{\n  let fields = [];\n  arr.map(key=>{\n    fields = [...fields,...stdAssetsProposalCreateCPFormFields.map(item=>({\n      ...item,key:`${key}${item.key}`\n    }))]\n    return null\n  })\n  return fields;\n}\n","import { createFields } from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\n\n\nexport const solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP BOX',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n]\n\nexport const insertTypeOptions = [\n  'Insert',\n  'HDPE Tray',\n]\n\nexport const getLabels = (type,insertType)=>{\n  const specifications = {\n    'FLC':insertType==='Insert'?[\n      'FLC',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'FLC',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'FSC':insertType==='Insert'?[\n      'FSC',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'FSC',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6412':insertType==='Insert'?[\n      'CRT6412',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'CRT6412',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6418':insertType==='Insert'?[\n      'CRT6418',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet',\n    ]:[\n      'CRT6418',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6423':insertType==='Insert'?[\n      'CRT6423',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'CRT6423',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'CRT6435':insertType==='Insert'?[\n      'CRT6435',\n      'Crate Lid',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'CRT6435',\n      'Crate Lid',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'Palletized CRT6412':insertType==='Insert'?[\n      'Palletized CRT6412',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6412',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'Palletized CRT6418':insertType==='Insert'?[\n      'Palletized CRT6418',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6418',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'Palletized CRT6423':insertType==='Insert'?[\n      'Palletized CRT6423',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6423',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',],\n    'Palletized CRT6435':insertType==='Insert'?[\n      'Palletized CRT6435',\n      'Palletized Lid',\n      'Pallet',\n      'Insert Type 1',\n      'Insert Type 2',\n      'Separator Sheet'\n    ]:[\n      'Palletized CRT6435',\n      'Palletized Lid',\n      'Pallet',\n      'Separator Sheet',\n      'Mould',\n      'HDPE',\n    ],\n    'PP BOX':[\n      'PP BOX',\n    ],\n    'Palletized PP Box':[\n      'Palletized PP Box',\n      'Palletized Lid',\n      'Pallet',\n    ],\n    'Plastic Pallet':[\n      'Plastic Pallet',\n      'Palletized Lid',\n    ],\n    'Wooden Pallet':[\n      'Wooden Pallet',\n      'Palletized Lid',]\n  };\n  return specifications[type];\n}\n\n\nexport const getFields = (type,insertType) => {\n  const specifications = {\n    'FLC':insertType==='Insert'?createFields([\n      'std_ast',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'FSC':insertType==='Insert'?createFields([\n      'std_ast',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6412':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6418':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6423':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'CRT6435':insertType==='Insert'?createFields([\n      'std_ast',\n      'crate_lid',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'crate_lid',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6412':insertType==='Insert'?createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6418':insertType==='Insert'?createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6423':insertType==='Insert'?createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'Palletized CRT6435':insertType==='Insert'?createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'insert1',\n      'insert2',\n      'sep_sheet',\n    ]):createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n      'sep_sheet',\n      'mould',\n      'hdpe',\n    ]),\n    'PP BOX':insertType==='Insert'?createFields([\n      'std_ast',\n    ]):createFields([\n      'std_ast',\n    ]),\n    'Palletized PP Box':createFields([\n      'std_ast',\n      'palletized_lid',\n      'pallet',\n    ]),\n    'Plastic Pallet':createFields([\n      'std_ast',\n      'palletized_lid',\n    ]),\n    'Wooden Pallet':createFields([\n      'std_ast',\n      'palletized_lid',\n    ])\n  };\n  return specifications[type];\n};\n\n\nexport const formatStr = (str,typeStr) => {\n  return `${str}_${typeStr}`;\n}\n\nexport const getFieldsByColumn = (type,insertType,typeStr) => {\n  const specifications = {\n    'FLC':insertType==='Insert'? [\n      formatStr('std_ast',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]:[\n      formatStr('std_ast',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ],\n    'FSC':insertType==='Insert'?[\n      formatStr('std_ast',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]:[\n      formatStr('std_ast',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ],\n    'CRT6412':insertType==='Insert'?[\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]:[\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ],\n    'CRT6418':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'CRT6423':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'CRT6435':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('crate_lid',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6412':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6418':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6423':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'Palletized CRT6435':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('insert1',typeStr),\n      formatStr('insert2',typeStr),\n      formatStr('sep_sheet',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n      formatStr('sep_sheet',typeStr),\n      formatStr('mould',typeStr),\n      formatStr('hdpe',typeStr),\n    ]),\n    'PP BOX':insertType==='Insert'?([\n      formatStr('std_ast',typeStr),\n    ]):([\n      formatStr('std_ast',typeStr),\n    ]),\n    'Palletized PP Box':([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n      formatStr('pallet',typeStr),\n    ]),\n    'Plastic Pallet':([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n    ]),\n    'Wooden Pallet':([\n      formatStr('std_ast',typeStr),\n      formatStr('palletized_lid',typeStr),\n    ])\n  };\n  return specifications[type];\n};\n\nexport const getDefaultMonthValue = type => {\n  switch (type) {\n    case \"std_ast\":\n      return 18;\n    case \"crate_lid\":\n      return 12;\n    case \"palletized_lid\":\n      return 12;\n    case \"insert1\":\n      return 12;\n    case \"insert2\":\n      return 12;\n    case \"sep_sheet\":\n      return 12;\n    case \"mould\":\n      return 18;\n    case \"hdpe\":\n      return 12;\n    default:\n      return 0;\n  }\n}\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\n\nexport const operatingCostMonthlyFormFields = [\n  {\n    key: 'direct_cost',\n    kwargs: {\n      placeholder: 'Direct Cost',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true, },\n    },\n    customLabel: 'Direct Cost',\n  },\n  {\n    key: 'operating_cost',\n    kwargs: {\n      placeholder: 'Operating Cost',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Operating Cost',\n  },\n  {\n    key: 'contigency_margin',\n    kwargs: {\n      placeholder: 'Contingency Margin',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Contingency Margin',\n  },\n  {\n    key: 'min_cost_for_trip',\n    kwargs: {\n      placeholder: 'Min cost to bill for a trip',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Min cost to bill for a trip',\n  },\n  {\n    key: 'billing_price',\n    kwargs: {\n      placeholder: 'Price should be billed @ 20% margin',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Price should be billed @ 20% margin',\n  },\n  {\n    key: 'agreed_margin',\n    kwargs: {\n      placeholder: 'Margin agreed for this flow',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Margin agreed for this flow (%)',\n  },\n  {\n    key: 'trip_cost',\n    kwargs: {\n      placeholder: 'TRIP COST (SALES)',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'TRIP COST (SALES)',\n  },\n  {\n    key: 'gross_margins',\n    kwargs: {\n      placeholder: 'Gross Margins',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Gross Margins (%)',\n  },\n  {\n    key: 'remarks',\n    kwargs: {\n      placeholder: 'Remarks',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Remarks',\n  },\n];\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin, notification } from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\nimport { operatingCostMonthlyFormFields } from 'common/formFields/createCP/operatingCostMonthly.formFields';\nimport { getFieldsByColumn, } from 'common/constants/solutionproposalCreateCP';\nimport { createCP, editCP } from 'common/api/auth';\n\nimport { ifNanReturnZero } from 'common/helpers/mrHelper';\nimport _ from 'lodash';\n\n\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.createCPData))\n\n\n  const submit = async (data) =>{\n    setLoading(true)\n    console.log(data,'data to be submitted')\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\n    setLoading(false)\n    if(active === 3){\n      if(id){\n        const { error } = await editCP(id,{ ...state,...data });\n        if (error) {\n          notification.warning({\n            message: 'Unable To Edit.',\n            description:\n              'Something went wrong CP editing failed.',\n          });\n          onCancel();\n        } else {\n          onDone();\n        }\n      }\n      else{\n        const { error } = await createCP({ ...state,...data });\n        if (error) {\n          notification.warning({\n            message: 'Unable To Create.',\n            description:\n              'Something went wrong CP creation failed.',\n          });\n          onCancel();\n        } else {\n          onDone();\n          notification.success({\n            message: 'CP Created/Edited Successfully.',\n          });\n        }\n      }\n    }}\n\n  useEffect( ()=>{\n    if(active!==3){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n\n  const updateDirectCost = useCallback(() => {\n    if (form.getFieldValue('standard_assets') && form.getFieldValue('insert_type') && form.getFieldValue(\"kit_based_on_usage_ratio\")) {\n      let directCost = 0;\n      const depCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'dep_cost');\n      console.log(depCostCols,'depCostCols')\n      depCostCols.forEach((i) => {\n        console.log(form.getFieldValue(i),i);\n        directCost += form.getFieldValue(i);\n      })\n      console.log(directCost,'directCost')\n      directCost /=form.getFieldValue(\"kit_based_on_usage_ratio\");\n      console.log(directCost,'again dC')\n      form.setFieldsValue({\n        \"direct_cost\" : _.round(directCost,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"direct_cost\" : 0,\n      })\n    }\n  },[form])\n\n  const updateOperatingCost = useCallback(() => {\n    if (form.getFieldValue(\"total_cost\")) {\n      form.setFieldsValue({\n        \"operating_cost\" : _.round(form.getFieldValue(\"total_cost\"),2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"operating_cost\" : 0,\n      })\n    }\n  },[form])\n\n  const updateContingencyMargin = useCallback(() => {\n    if (form.getFieldValue(\"operating_cost\") && form.getFieldValue(\"direct_cost\")) {\n      form.setFieldsValue({\n        \"contigency_margin\" : _.round((form.getFieldValue(\"operating_cost\")+form.getFieldValue(\"direct_cost\"))*0.02,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"contigency_margin\" : 0,\n      })\n    }\n  },[form])\n\n  const updateMinCostToBillForATrip = useCallback(() => {\n    if (form.getFieldValue(\"operating_cost\") && form.getFieldValue(\"direct_cost\") && form.getFieldValue(\"contigency_margin\")) {\n      form.setFieldsValue({\n        \"min_cost_for_trip\" : _.round(form.getFieldValue(\"operating_cost\")+form.getFieldValue(\"direct_cost\")+form.getFieldValue(\"contigency_margin\"),2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"min_cost_for_trip\" : 0,\n      })\n    }\n  },[form])\n\n  const updatePriceShouldBeBilled = useCallback(() => {\n    if (form.getFieldValue(\"min_cost_for_trip\")) {\n      form.setFieldsValue({\n        \"billing_price\" : _.round(form.getFieldValue(\"min_cost_for_trip\")/0.8,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"billing_price\" : 0,\n      })\n    }\n  },[form])\n\n  const updateMarginAgreedForThisFlow = useCallback(() => {\n    if (form.getFieldValue(\"trip_cost\") && form.getFieldValue(\"min_cost_for_trip\")) {\n      form.setFieldsValue({\n        \"agreed_margin\" : _.round((form.getFieldValue(\"trip_cost\")/form.getFieldValue(\"min_cost_for_trip\")-1)*100,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"agreed_margin\" : 0,\n      })\n    }\n  },[form])\n\n  const updateGrossMargins = useCallback(() => {\n    if (form.getFieldValue(\"trip_cost\") && form.getFieldValue(\"operating_cost\")) {\n      form.setFieldsValue({\n        \"gross_margins\" : _.round(((form.getFieldValue(\"trip_cost\")-form.getFieldValue(\"operating_cost\"))/form.getFieldValue(\"trip_cost\")*100),2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"gross_margins\" : 0,\n      })\n    }\n  },[form])\n\n  useEffect( () => {\n    updateDirectCost();\n    updateOperatingCost();\n    updateContingencyMargin();\n    updateMinCostToBillForATrip();\n    updatePriceShouldBeBilled();\n    updateMarginAgreedForThisFlow();\n    updateGrossMargins();\n  }, [] )\n\n  const handleFieldsChange = useCallback(data => {\n\n    if(data[0]){\n      if(data[0].name) {\n\n        const currentInputField = data[0].name[0];\n        console.log(currentInputField);\n\n        if (currentInputField===\"trip_cost\") {\n          updateMarginAgreedForThisFlow();\n          updateGrossMargins();\n        }\n\n      }\n    }\n\n  \t},[form,])\n\n\n  return (\n    <Spin spinning={loading}>\n      <Divider orientation='left'>Opex</Divider>\n      <Form\n        onFinish={submit}\n        form={form}\n        initialValues={\n          { ...state }\n        }\n        layout='vertical'\n        onFieldsChange={handleFieldsChange}\n        // hideRequiredMark\n        autoComplete='off'\n      >\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(8, 12).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(8,12).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(12, 16).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(12,16).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(16, 18).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(16,18).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit'>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default LogisticCreateCPForm;\n\n"],"sourceRoot":""}
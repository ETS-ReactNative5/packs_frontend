{"version":3,"sources":["../../common/formFields/flowKit.formFields.js","../../common/formFields/PFEP/PFEPTouchPoints.formFields.js","forms/PFEP/PFEPTouchPoints.form.js"],"names":["flowKitsFormFields","key","rules","required","message","type","FORM_ELEMENT_TYPES","SELECT","kwargs","placeholder","others","customLabel","INPUT","disabled","PREPTouchPointsFormFields","PfepTouchPointsForm","id","onCancel","onDone","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","submit","data","a","ADD_PFEP_DATA","spinning","orientation","onFinish","layout","hideRequiredMark","autoComplete","List","name","fields","add","remove","map","field","index","align","slice","item","span","className","formItem","noLabel","formOptions","fieldKey","style","top","onClick","MinusCircleOutlined","Item","block","PlusOutlined","justify","htmlType","ArrowRightOutlined","fontSize"],"mappings":"6FAAA,+CAEaA,EAAqB,CAChC,CACEC,IAAK,MACLC,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,uBAClCC,KAAMC,IAAmBC,OACzBC,OAAQ,CACNC,YAAa,UAEfC,OAAQ,KACRC,YAAa,OAEf,CACEV,IAAK,WACLC,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,2BAClCC,KAAMC,IAAmBM,MACzBJ,OAAQ,CACNC,YAAa,QACbJ,KAAM,UAERK,OAAQ,KACRC,YAAa,YAEf,CACEV,IAAK,eACLC,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,gCAClCC,KAAMC,IAAmBM,MACzBJ,OAAQ,CACNH,KAAM,SACNQ,UAAU,GAEZH,OAAQ,KACRC,YAAa,iBAEf,CACEV,IAAK,YACLC,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,6BAClCC,KAAMC,IAAmBM,MACzBJ,OAAQ,CACNC,YAAa,QACbJ,KAAM,UAERK,OAAQ,KACRC,YAAa,e,qSC1CJG,EAA4B,CACvC,CACEb,IAAK,OACLI,KAAMC,IAAmBM,MACzBF,OAAQ,KACRF,OAAQ,CACNC,YAAa,SAGjB,CACER,IAAK,QACLO,OAAQ,CACNC,YAAa,SAEfJ,KAAMC,IAAmBM,MACzBD,YAAa,SAEf,CACEV,IAAK,QACLO,OAAQ,CACNC,YAAa,SAEfJ,KAAMC,IAAmBM,Q,oCCfhBG,EAAsB,SAAC,GAAmC,EAAjCC,GAAiC,EAA7BC,SAA8B,IAArBC,EAAoB,EAApBA,OAAOC,EAAa,EAAbA,OAAa,EACxCC,oBAAS,GAD+B,mBAC9DC,EAD8D,KACtDC,EADsD,OAEtD,IAAKC,UAAbC,EAF8D,oBAG/DC,EAAWC,cAEXC,EAAM,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACbP,GAAW,GADE,SAEPG,EAAS,CAAEpB,KAAKyB,IAAcF,SAFvB,OAGbN,GAAW,GACXH,IAJa,2CAAH,sDAOZ,OACE,uBAAMY,SAAUV,GACd,uBAASW,YAAY,QAArB,iBACA,uBACEC,SAAUN,EACVH,KAAMA,EACNU,OAAO,WACPC,kBAAgB,EAChBC,aAAa,OAEb,sBAAMC,KAAN,CAAWC,KAAK,iBACb,SAACC,EAAD,GAA8B,IAAnBC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OACf,OACE,6BACGF,EAAOG,KAAI,SAACC,EAAOC,GAAR,OACV,uBAAKC,MAAM,UACR/B,EAA0BgC,MAAM,EAAG,GAAGJ,KAAI,SAACK,GAAD,OACzC,uBAAKC,KAAM,GACT,yBAAKC,UAAU,OACZC,YAAS,2BACLH,GADI,IAEPI,QAAmB,IAAVP,EACTpB,OACAd,OAAQ,CACN0C,YAAY,2BACPT,GADM,IAETL,KAAM,CAACK,EAAML,KAAMS,EAAK9C,KACxBoD,SAAU,CAACV,EAAMU,SAAUN,EAAK9C,gBAO5C,uBACEI,KAAK,SACLiD,MAAiB,IAAVV,EAAc,CAAEW,IAAK,QAAW,KACvCC,QAAS,WACPf,EAAOE,EAAML,QAEf,kBAACmB,EAAA,EAAD,MACC,IAPH,cAYJ,sBAAMC,KAAN,KACE,uBACErD,KAAK,SACLmD,QAAS,WACPhB,KAEFmB,OAAK,GACL,kBAACC,EAAA,EAAD,MACC,IAPH,iBAeV,uBAAKC,QAAQ,iBACX,yBAAKZ,UAAU,OACb,uBAAQ5C,KAAK,UAAUyD,SAAS,SAASjD,UAAQ,GAAjD,UAGA,yBAAKoC,UAAU,QACf,uBAAQ5C,KAAK,UAAUmD,QAAStC,GAAhC,WAIF,uBAAQb,KAAK,OAAOyD,SAAS,UAC3B,kBAACC,EAAA,EAAD,CAAoBT,MAAO,CAAEU,SAAS,WAQnCjD","file":"static/js/42.4d24ea4b.chunk.js","sourcesContent":["import {FORM_ELEMENT_TYPES} from '../../web/src/constants/formFields.constant';\n\nexport const flowKitsFormFields = [\n  {\n    key: 'kit',\n    rules: [{required: true, message: 'Please select kit!'}],\n    type: FORM_ELEMENT_TYPES.SELECT,\n    kwargs: {\n      placeholder: 'Select',\n    },\n    others: null,\n    customLabel: 'Kit',\n  },\n  {\n    key: 'quantity',\n    rules: [{required: true, message: 'Please enter quantity!'}],\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Enter',\n      type: 'number',\n    },\n    others: null,\n    customLabel: 'Quantity',\n  },\n  {\n    key: 'component_pm',\n    rules: [{required: true, message: 'Please enter components pm!'}],\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      type: 'number',\n      disabled: true,\n    },\n    others: null,\n    customLabel: 'Components PM',\n  },\n  {\n    key: 'trip_cost',\n    rules: [{required: true, message: 'Please select trip cost!'}],\n    type: FORM_ELEMENT_TYPES.INPUT,\n    kwargs: {\n      placeholder: 'Enter',\n      type: 'number',\n    },\n    others: null,\n    customLabel: 'Trip Cost',\n  },\n];\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\nexport const PREPTouchPointsFormFields = [\n  {\n    key: 'name',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    kwargs: {\n      placeholder: 'Name',\n    },\n  },\n  {\n    key: 'phone',\n    kwargs: {\n      placeholder: 'Phone',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Phone',\n  },\n  {\n    key: 'email',\n    kwargs: {\n      placeholder: 'Email',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n  }\n]\n","import React, { useState } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin} from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch } from 'react-redux';\nimport { ADD_PFEP_DATA } from 'common/actions';\nimport { PREPTouchPointsFormFields } from 'common/formFields/PFEP/PFEPTouchPoints.formFields';\nimport { flowKitsFormFields } from 'common/formFields/flowKit.formFields';\nimport { ArrowRightOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\n\nexport const PfepTouchPointsForm = ({ id, onCancel,onDone,onNext }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:ADD_PFEP_DATA,data });\n    setLoading(false)\n    onNext();\n  }\n\n  return (\n    <Spin spinning={loading}>\n      <Divider orientation='left'>Basic Details</Divider>\n      <Form\n        onFinish={submit}\n        form={form}\n        layout='vertical'\n        hideRequiredMark\n        autoComplete='off'\n      >\n        <Form.List name='touch_points'>\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Row align='middle'>\n                    {PREPTouchPointsFormFields.slice(0, 3).map((item) => (\n                      <Col span={5}>\n                        <div className='p-2'>\n                          {formItem({\n                            ...item,\n                            noLabel: index !== 0,\n                            form,\n                            others: {\n                              formOptions: {\n                                ...field,\n                                name: [field.name, item.key],\n                                fieldKey: [field.fieldKey, item.key],\n                              },\n                            },\n                          })}\n                        </div>\n                      </Col>\n                    ))}\n                    <Button\n                      type='danger'\n                      style={index !== 0 ? { top: '-2vh' } : null}\n                      onClick={() => {\n                        remove(field.name);\n                      }}>\n                      <MinusCircleOutlined />\n                      {' '}\n                      Delete\n                    </Button>\n                  </Row>\n                ))}\n                <Form.Item>\n                  <Button\n                    type='dashed'\n                    onClick={() => {\n                      add();\n                    }}\n                    block>\n                    <PlusOutlined />\n                    {' '}\n                    Add Item\n                  </Button>\n                </Form.Item>\n              </div>\n            );\n          }}\n        </Form.List>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit' disabled>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onDone}>\n              Cancel\n            </Button>\n          </div>\n          <Button type='link' htmlType='submit'>\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default PfepTouchPointsForm;\n\n"],"sourceRoot":""}
{"version":3,"sources":["constants/formFields.constant.js","hocs/formItem.hoc.js","../../common/formFields/PFEP/PFEPCreation.formFields.js","../../common/formFields/PFEP/PFEPBasicDetails.formFields.js","forms/PFEP/PFEPBasicDetails.form.js"],"names":["FORM_ELEMENT_TYPES","INPUT","MULTIPLE_CHECKBOX","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","SWITCH","HIDDEN","DATE","CASCADER","Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","Item","label","charAt","toUpperCase","slice","size","Dragger","style","maxHeight","width","className","p1","p2","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","radioOptions","onChange","date","checkOptions","valuePropName","PREPCreationFormFields","placeholder","PREPBasicDetailsFormFields","PFEPBasicDetailsForm","id","onCancel","lead","onNext","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","pfepData","submit","a","ADD_PFEP_DATA","ADD_PFEP_BASIC_DATA","lead_no","useEffect","STOP_STEP_LOADING","spinning","initialValues","moment","onFinish","layout","autoComplete","orientation","justifyContent","idx","span","formItem","List","fields","add","remove","field","align","fieldKey","top","onClick","MinusCircleOutlined","block","PlusOutlined","justify","htmlType","disabled","ArrowRightOutlined"],"mappings":"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","file":"static/js/45.14024313.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\r\n  INPUT: 'input',\r\n  MULTIPLE_CHECKBOX: 'MULTIPLE_CHECKBOX',\r\n  INPUT_NUMBER: 'input-number',\r\n  PASSWORD: 'password',\r\n  TEXTAREA: 'textarea',\r\n  MARKDOWN: 'markdown',\r\n  SELECT: 'select',\r\n  CAPTCHA: 'captcha',\r\n  MONTH_PICKER: 'month-picker',\r\n  FILE_DRAG_DROP: 'file-drag-drop',\r\n  RANGE_PICKER: 'range-picker',\r\n  RADIO: 'radio',\r\n  SWITCH: 'switch',\r\n  HIDDEN: 'hidden',\r\n  DATE: 'date',\r\n  CASCADER: 'cascader',\r\n};\r\n\r\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\r\n\r\nexport const CAPTCHA = {\r\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\r\n  name: 'captcha',\r\n  label: 'Captcha',\r\n  rules: [\r\n    {\r\n      required: process.env.NODE_ENV === 'production',\r\n      message: 'Please solve the captcha',\r\n    },\r\n  ],\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Upload,\r\n  Select,\r\n  Radio,\r\n  DatePicker,\r\n  Checkbox,\r\n  InputNumber,\r\n  message,\r\n  Switch,\r\n} from 'antd';\r\nimport { Icon } from '@ant-design/compatible';\r\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\r\n\r\nconst { Option } = Select;\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\n// const handleUplaod = (file) => {\r\n//   return new Promise(async (resolve, reject) => {\r\n//     const fileName = `nameThatIwant.type`;\r\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\r\n//     resolve(url);\r\n//   });\r\n\r\nconst onCustomRequest = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const ajaxResponseWasFine = true;\r\n\r\n    setTimeout(() => {\r\n      if (ajaxResponseWasFine) {\r\n        const reader = new FileReader();\r\n\r\n        reader.addEventListener(\r\n          'load',\r\n          () => {\r\n            resolve(reader.result);\r\n          },\r\n          false,\r\n        );\r\n\r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n      } else {\r\n        reject('error');\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nconst props = {\r\n  name: 'file',\r\n  action: onCustomRequest,\r\n  // onChange(info) {\r\n  //   const {status} = info.file;\r\n  //   if (status !== 'uploading') {\r\n  //     console.log(info.file, info.fileList);\r\n  //   }\r\n  //   if (status === 'done') {\r\n  //     message.success(`${info.file.name} file uploaded successfully.`);\r\n  //   } else if (status === 'error') {\r\n  //     message.error(`${info.file.name} file upload failed.`);\r\n  //   }\r\n  // },\r\n};\r\n\r\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\r\n  let formOptions = {};\r\n  if (others) {\r\n    if (others.formOptions) {\r\n      formOptions = others.formOptions;\r\n    }\r\n  }\r\n\r\n  switch (type) {\r\n    case FORM_ELEMENT_TYPES.INPUT: {\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Input {...kwargs} size='middle' />\r\n        </Form.Item>\r\n      );\r\n    }\r\n\r\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <InputNumber {...kwargs} size='middle' />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\r\n            <p className='ant-upload-drag-icon'>\r\n              <Icon type='inbox' />\r\n            </p>\r\n            {others ? (\r\n              <>\r\n                <p className='ant-upload-text p-1'>{others.p1}</p>\r\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\r\n              </>\r\n            ) : null}\r\n          </Upload.Dragger>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.SELECT:\r\n      return (\r\n        <Form.Item\r\n          shouldUpdate\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Select {...kwargs}>\r\n            {others.selectOptions.map((item, index) => (\r\n              <Option\r\n                key={index.toString()}\r\n                search={item[others.customTitle]}\r\n                value={item.value || item[others.key] || item}>\r\n                {others.customTitle ? (\r\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\r\n                    {item[others.customTitle]}\r\n                  </text>\r\n                ) : (\r\n                  item.label || item[others.key] || item\r\n                )}\r\n                {others.dataKeys ? (\r\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\r\n                    {others.dataKeys.map((i) => (\r\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\r\n                    ))}\r\n                  </div>\r\n                ) : null}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.RADIO:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Radio.Group value='Ggg'>\r\n            {others.radioOptions.map((item) => (\r\n              <Radio key={item.value} value={item.value}>\r\n                {item.label}\r\n              </Radio>\r\n            ))}\r\n          </Radio.Group>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.DATE:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <DatePicker onChange={(date) => console.log(date)} />\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <CheckboxGroup onChange={others.onChange}>\r\n            {others.checkOptions.map((i) => (\r\n              <Checkbox value={i.value}>{i.label}</Checkbox>\r\n            ))}\r\n          </CheckboxGroup>\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.SWITCH:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          valuePropName='checked'\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <Switch {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default FormItem;\r\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\r\n\r\nexport const PREPCreationFormFields = [\r\n  {\r\n    key: 'proposal_for_client',\r\n    customLabel: 'Proposal For Client',\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    kwargs: {\r\n      placeholder: 'Proposal For Client',\r\n    },\r\n  },\r\n\r\n  {\r\n    key: 'sender_client',\r\n    kwargs: {\r\n      placeholder: 'Sender Client',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Sender Client',\r\n  },\r\n  {\r\n    key: 'sender_location',\r\n    kwargs: {\r\n      placeholder: 'Sender Location',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Sender Location',\r\n  },\r\n  {\r\n    key: 'name',\r\n    kwargs: {\r\n      placeholder: 'Receiver Client',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Receiver Client',\r\n  },{\r\n    key: 'location',\r\n    kwargs: {\r\n      placeholder: 'Receiver Location',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Receiver Location',\r\n  },\r\n]\r\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\r\n\r\nexport const PREPBasicDetailsFormFields = [\r\n  {\r\n    key: 'date',\r\n    type: FORM_ELEMENT_TYPES.DATE,\r\n    others: null,\r\n  },\r\n  {\r\n    key: 'contact_person',\r\n    kwargs: {\r\n      placeholder: 'Contact Person Name',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Contact Person Name',\r\n  },\r\n  {\r\n    key: 'designation',\r\n    kwargs: {\r\n      placeholder: 'Designation',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n  },\r\n  {\r\n    key: 'email',\r\n    kwargs: {\r\n      placeholder: 'Email',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Email',\r\n  },\r\n  {\r\n    key: 'contact_no',\r\n    kwargs: {\r\n      placeholder: 'Contact Number',\r\n      type:'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Contact Number',\r\n  },\r\n]\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Col, Row, Button, Divider, Spin } from 'antd';\r\nimport { ArrowRightOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { PREPBasicDetailsFormFields } from 'common/formFields/PFEP/PFEPBasicDetails.formFields';\r\nimport formItem from 'hocs/formItem.hoc';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_PFEP_BASIC_DATA, ADD_PFEP_DATA, STOP_STEP_LOADING } from 'common/actions';\r\nimport { PREPCreationFormFields } from 'common/formFields/PFEP/PFEPCreation.formFields';\r\nimport moment from 'moment';\r\n\r\nexport const PFEPBasicDetailsForm = ({ id, onCancel,lead,onNext,active }) => {\r\n  const [loading,setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const state =  useSelector(e=>(e.data.pfepData))\r\n\r\n  const submit = async (data) =>{\r\n    setLoading(true)\r\n    await dispatch({ type:id?ADD_PFEP_DATA:ADD_PFEP_BASIC_DATA,data:{ ...data,lead_no:lead } });\r\n    setLoading(false)\r\n    if(active === 0){\r\n      onNext();\r\n    }\r\n  }\r\n\r\n  useEffect( ()=>{\r\n    if(active!==0){\r\n      form.submit()\r\n      dispatch({ type:STOP_STEP_LOADING })\r\n    }\r\n  },[active])\r\n\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <Form\r\n        // initialValues={{\r\n        //   date:state.date?moment(state.date):null,\r\n        //   contact_person:state.contact_person?state.contact_person:null,\r\n        //   designation:state.designation?state.designation:null,\r\n        //   email:state.email?state.email:null,\r\n        //   contact_no:state.contact_no?state.contact_no:null\r\n        // }}\r\n        initialValues={{ ...state,date:state.date?moment(state.date):null }}\r\n        onFinish={submit}\r\n        form={form}\r\n        layout='vertical'\r\n        // hideRequiredMark\r\n        autoComplete='off'\r\n      >\r\n        <Divider orientation='left'>Basic Details</Divider>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {PREPBasicDetailsFormFields.slice(0, 1).map((item, idx) => (\r\n            <Col span={4}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {PREPBasicDetailsFormFields.slice(1, 5).map((item, idx) => (\r\n            <Col span={5}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Divider orientation='left'>PFEP Creation</Divider>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {PREPCreationFormFields.slice(0, 3).map((item, idx) => (\r\n            <Col span={8}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Form.List name='receivers'>\r\n          {(fields, { add, remove }) => {\r\n            return (\r\n              <div>\r\n                {fields.map((field, index) => (\r\n                  <Row align='middle'>\r\n                    {PREPCreationFormFields.slice(3, 5).map((item) => (\r\n                      <Col span={5}>\r\n                        <div className='p-2'>\r\n                          {formItem({\r\n                            ...item,\r\n                            noLabel: index !== 0,\r\n                            form,\r\n                            others: {\r\n                              formOptions: {\r\n                                ...field,\r\n                                name: [field.name, item.key],\r\n                                fieldKey: [field.fieldKey, item.key],\r\n                              },\r\n                            },\r\n                          })}\r\n                        </div>\r\n                      </Col>\r\n                    ))}\r\n                    <Button\r\n                      type='danger'\r\n                      style={index !== 0 ? { top: '-2vh' } : null}\r\n                      onClick={() => {\r\n                        remove(field.name);\r\n                      }}>\r\n                      <MinusCircleOutlined />\r\n                      {' '}\r\n                      Delete\r\n                    </Button>\r\n                  </Row>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type='dashed'\r\n                    onClick={() => {\r\n                      add();\r\n                    }}\r\n                    block>\r\n                    <PlusOutlined />\r\n                    {' '}\r\n                    Add Receiver\r\n                  </Button>\r\n                </Form.Item>\r\n              </div>\r\n            );\r\n          }}\r\n        </Form.List>\r\n\r\n        <Row justify='space-between'>\r\n          <div className='row'>\r\n            <Button type='primary' htmlType='submit' disabled>\r\n              Submit\r\n            </Button>\r\n            <div className='p-2' />\r\n            <Button type='primary' onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <Button type='link' htmlType='submit'>\r\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\r\n          </Button>\r\n        </Row>\r\n      </Form>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default PFEPBasicDetailsForm;\r\n\r\n"],"sourceRoot":""}
{"version":3,"sources":["hocs/formItem.hoc.js","../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","forms/CreateCP/solutionProposalCreateCP.form.js"],"names":["Option","CheckboxGroup","Group","getFinalStringForSearch","searchKeys","customTitle","item","s","concat","forEach","i","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","FORM_ELEMENT_TYPES","INPUT","Item","label","charAt","toUpperCase","slice","size","INPUT_NUMBER","FILE_DRAG_DROP","Dragger","style","maxHeight","width","className","p1","p2","SELECT","shouldUpdate","selectOptions","map","index","toString","search","value","fontSize","fontWeight","dataKeys","flexWrap","marginLeft","marginRight","RADIO","radioOptions","DATE","onChange","date","MONTH_PICKER","picker","MULTIPLE_CHECKBOX","checkOptions","SWITCH","valuePropName","solutionProposalCreateCPFormFields","stdAssetsProposalCreateCPFormFields","placeholder","disabled","noStyle","min","createFields","arr","fields","getSolutionProposal","record","standard_assets","std_ast_quantity_perkit","crate_lid_quantity_perkit","Lid","Crate","palletized_lid_quantity_perkit","getLabels","insertType","FLC","FSC","CRT6412","CRT6418","CRT6423","CRT6435","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","SolutionProposalCreateCPForm","id","onCancel","onNext","lead","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","insert_type","setFields","labels","setLabels","submit","a","ADD_CREATE_CP_DATA","useEffect","STOP_STEP_LOADING","updateTotalKitQtysCols","useCallback","getFieldValue","setFieldsValue","mould_quantity","updateMonthCols","handleFieldsChange","currentInputField","totalKitQtysCols","qtyPerKitCols","rateCols","totalMatReqCols","totalCostCols","monthCols","depCostCols","idx","totalMatReqVal","_","round","spinning","initialValues","onFinish","layout","onFieldsChange","autoComplete","orientation","solution_flc","solution_fsc","solution_crate","solution_ppbox","solution_palletized_box","solution_palletized_crate","solution_pp","solution_stacking_nesting","solution_wp","justifyContent","span","formItem","justify","htmlType","onClick"],"mappings":"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","file":"static/js/61.f5ab9ccc.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport {Icon} from '@ant-design/compatible';\nimport {FORM_ELEMENT_TYPES} from 'constants/formFields.constant';\n\nconst {Option} = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst getFinalStringForSearch = (searchKeys, customTitle, item) => {\n  let s = '';\n  if (item[customTitle]) s = s.concat(item[customTitle]);\n  searchKeys.forEach((i) => {\n    if (item[i]) {\n      s = s.concat(' ');\n      s = s.concat(item[i]);\n    }\n  });\n  return s;\n};\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({key, rules, kwargs, type, others, customLabel, noLabel}) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input size=\"middle\" {...kwargs} />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber size=\"middle\" {...kwargs} />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{maxHeight: '75px', width: '150px'}}>\n            <p className=\"ant-upload-drag-icon\">\n              <Icon type=\"inbox\" />\n            </p>\n            {others ? (\n              <>\n                <p className=\"ant-upload-text p-1\">{others.p1}</p>\n                <p className=\"ant-upload-hint p-1\">{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={\n                  others.searchKeys\n                    ? getFinalStringForSearch(others.searchKeys, others.customTitle, item)\n                    : item[others.customTitle]\n                }\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{fontSize: 13, fontWeight: 'bold'}}>{item[others.customTitle]}</text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className=\"row\" style={{flexWrap: 'wrap'}}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{fontSize: 11, marginLeft: 5, marginRight: 5}}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value=\"Ggg\">\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker\n            onChange={(date) => console.log(date)}\n            style={others ? (others.style ? others.style : null) : null}\n          />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MONTH_PICKER:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} picker=\"month\" />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName=\"checked\"\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","import {FORM_ELEMENT_TYPES} from 'web/src/constants/formFields.constant';\n\nconst solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP Box',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n];\n\nexport const solutionProposalCreateCPFormFields = [\n  {\n    key: 'standard_assets',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: solutionAssetOptions,\n    },\n    customLabel: 'Standard Assets',\n  },\n  {\n    key: 'insert_type',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: ['Insert', 'HDPE Tray'],\n    },\n    customLabel: 'Insert Type',\n  },\n  // {\n  //   key: 'cost',\n  //   type: FORM_ELEMENT_TYPES.INPUT,\n  //   kwargs: {\n  //     placeholder: 'Cost',\n  //     type:'number'\n  //   },\n  //   customLabel:'Cost'\n  // },\n];\n\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\n\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\n// mould_month = models.FloatField(default=0, blank=True, null=True)\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\n\nexport const formListSolutionProposalCreateCPFormFields = [\n  {\n    key: 'specification',\n    kwargs: {\n      placeholder: 'Specification',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Specification',\n  },\n  {\n    key: 'quantity',\n    kwargs: {\n      placeholder: 'Total KIT Quantity',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total KIT Quantity',\n  },\n  {\n    key: 'quantity_per_kit',\n    kwargs: {\n      placeholder: 'Qyt/KIT',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Qyt/KIT',\n  },\n  {\n    key: 'rate',\n    kwargs: {\n      placeholder: 'Rate',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Rate',\n  },\n  {\n    key: 'tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Material Req',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: 'month',\n    kwargs: {\n      placeholder: 'Month',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Month',\n  },\n  {\n    key: 'dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Dep Cost',\n  },\n];\n\nexport const stdAssetsProposalCreateCPFormFields = [\n  {\n    key: '_quantity',\n    kwargs: {\n      placeholder: 'Quantity',\n      type: 'number',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Kit Qty',\n  },\n  {\n    key: '_quantity_perkit',\n    kwargs: {\n      placeholder: 'Quantity/Kit',\n      type: 'number',\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Quantity/Kit',\n  },\n  {\n    key: '_rate',\n    kwargs: {\n      placeholder: 'Rate',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Rate',\n  },\n  {\n    key: '_tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Mat. Req.',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: '_total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type: 'number',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: '_month',\n    kwargs: {\n      placeholder: 'Month',\n      type: 'number',\n      min: 0,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Month',\n  },\n  {\n    key: '_dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Dep Cost',\n  },\n];\n\nexport const createFields = (arr) => {\n  let fields = [];\n  arr.map((key) => {\n    fields = [\n      ...fields,\n      ...stdAssetsProposalCreateCPFormFields.map((item) => ({\n        ...item,\n        key: `${key}${item.key}`,\n      })),\n    ];\n    return null;\n  });\n  return fields;\n};\n","import {createFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\n\nexport const solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP Box',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n];\n\nexport const getSolutionProposal = (record) => {\n  if (\n    record.standard_assets === 'FLC' ||\n    record.standard_assets === 'FSC' ||\n    record.standard_assets === 'PP Box'\n  ) {\n    return {\n      [record.standard_assets]: record.std_ast_quantity_perkit,\n    };\n  }\n  if (\n    record.standard_assets === 'CRT6412' ||\n    record.standard_assets === 'CRT6418' ||\n    record.standard_assets === 'CRT6423' ||\n    record.standard_assets === 'CRT6435'\n  ) {\n    return {\n      [record.standard_assets]: record.crate_lid_quantity_perkit,\n    };\n  }\n  if (\n    record.standard_assets === 'Palletized CRT6412' ||\n    record.standard_assets === 'Palletized CRT6418' ||\n    record.standard_assets === 'Palletized CRT6423' ||\n    record.standard_assets === 'Palletized CRT6435' ||\n    record.standard_assets === 'Palletized PP Box' ||\n    record.standard_assets === 'Plastic Pallet' ||\n    record.standard_assets === 'Wooden Pallet'\n  ) {\n    return {\n      Lid: 1,\n      Crate: 1,\n      [record.standard_assets]: record.palletized_lid_quantity_perkit,\n    };\n  }\n\n  return {};\n};\n\nexport const insertTypeOptions = ['Insert', 'HDPE Tray'];\n\nexport const getLabels = (type, insertType) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? ['FLC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['FLC', 'Separator Sheet', 'Mould', 'HDPE'],\n    FSC:\n      insertType === 'Insert'\n        ? ['FSC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['FSC', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6412:\n      insertType === 'Insert'\n        ? ['CRT6412', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6412', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6418:\n      insertType === 'Insert'\n        ? ['CRT6418', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6418', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6423:\n      insertType === 'Insert'\n        ? ['CRT6423', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6423', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6435:\n      insertType === 'Insert'\n        ? ['CRT6435', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6435', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6412',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6412', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6418',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6418', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6423',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6423', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6435',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6435', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'PP Box': ['PP Box'],\n    'Palletized PP Box': ['Palletized PP Box', 'Palletized Lid', 'Pallet'],\n    'Plastic Pallet': ['Plastic Pallet', 'Palletized Lid'],\n    'Wooden Pallet': ['Wooden Pallet', 'Palletized Lid'],\n  };\n  return specifications[type];\n};\n\nexport const getFields = (type, insertType) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\n    FSC:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6412:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6418:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6423:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6435:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'PP Box': insertType === 'Insert' ? createFields(['std_ast']) : createFields(['std_ast']),\n    'Palletized PP Box': createFields(['std_ast', 'palletized_lid', 'pallet']),\n    'Plastic Pallet': createFields(['std_ast', 'palletized_lid']),\n    'Wooden Pallet': createFields(['std_ast', 'palletized_lid']),\n  };\n  return specifications[type];\n};\n\nexport const formatStr = (str, typeStr) => {\n  return `${str}_${typeStr}`;\n};\n\nexport const getFieldsByColumn = (type, insertType, typeStr) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    FSC:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6412:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6418:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6423:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6435:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'PP Box':\n      insertType === 'Insert' ? [formatStr('std_ast', typeStr)] : [formatStr('std_ast', typeStr)],\n    'Palletized PP Box': [\n      formatStr('std_ast', typeStr),\n      formatStr('palletized_lid', typeStr),\n      formatStr('pallet', typeStr),\n    ],\n    'Plastic Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\n    'Wooden Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\n  };\n  return specifications[type];\n};\n\nexport const getDefaultMonthValue = (type) => {\n  switch (type) {\n    case 'std_ast':\n      return 18;\n    case 'crate_lid':\n      return 12;\n    case 'palletized_lid':\n      return 12;\n    case 'insert1':\n      return 12;\n    case 'insert2':\n      return 12;\n    case 'sep_sheet':\n      return 12;\n    case 'mould':\n      return 18;\n    case 'hdpe':\n      return 12;\n    default:\n      return 0;\n  }\n};\n","import React, {useEffect, useState, useCallback} from 'react';\nimport {Form, Col, Row, Button, Divider, Spin, Tag} from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {ArrowRightOutlined} from '@ant-design/icons';\nimport {ADD_CREATE_CP_DATA, STOP_STEP_LOADING} from 'common/actions';\nimport {solutionProposalCreateCPFormFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\nimport {\n  getFields,\n  getLabels,\n  getFieldsByColumn,\n  getDefaultMonthValue,\n} from 'common/constants/solutionproposalCreateCP';\n\nimport _ from 'lodash';\n\nexport const SolutionProposalCreateCPForm = ({id, onCancel, lead, onNext, active}) => {\n  const [loading, setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state = useSelector((e) => e.data.createCPData);\n  const [fields, setFields] = useState(\n    getFields(state.standard_assets || 'FLC', state.insert_type || 'Insert'),\n  );\n  const [labels, setLabels] = useState(\n    getLabels(state.standard_assets || 'FLC', state.insert_type || 'Insert'),\n  );\n  const submit = async (data) => {\n    setLoading(true);\n    await dispatch({type: ADD_CREATE_CP_DATA, data: {...data}});\n    setLoading(false);\n    if (active === 1) {\n      onNext();\n    }\n  };\n\n  // useEffect(() => {\n  // \tif (form.getFieldValue(\"standard_assets\") && form.getFieldValue(\"insert_type\")) {\n  // \t\tsetFields(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\n  // \t\tsetLabels(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\n  // \t}\n  // },[])\n\n  useEffect(() => {\n    if (active !== 1) {\n      form.submit();\n      dispatch({type: STOP_STEP_LOADING});\n    }\n  }, [active]);\n\n  console.log(state, 'state');\n\n  const updateTotalKitQtysCols = useCallback(() => {\n    console.log(\n      form.getFieldValue('kit_based_on_usage_ratio'),\n      'kit based on',\n      state.kit_based_on_usage_ratio,\n    );\n    if (form.getFieldValue('kit_based_on_usage_ratio')) {\n      const totalKitQtysCols = getFieldsByColumn(\n        form.getFieldValue('standard_assets'),\n        form.getFieldValue('insert_type'),\n        'quantity',\n      );\n      console.log(totalKitQtysCols, 'Totl wuanti');\n      totalKitQtysCols.forEach((i) => {\n        if (!form.getFieldValue(i)) {\n          if (i !== 'mould_quantity') {\n            form.setFieldsValue({\n              [i]: form.getFieldValue('kit_based_on_usage_ratio'),\n            });\n          } else {\n            form.setFieldsValue({\n              mould_quantity: 1,\n            });\n          }\n        }\n      });\n    }\n  }, [form]);\n\n  const updateMonthCols = useCallback(() => {\n    const monthCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'month',\n    );\n    monthCols.forEach((i) => {\n      if (!form.getFieldValue(i)) {\n        form.setFieldsValue({\n          [i]: getDefaultMonthValue(i.slice(0, -6)),\n        });\n      }\n    });\n  }, [form]);\n\n  useEffect(() => {\n    updateTotalKitQtysCols();\n    updateMonthCols();\n  }, [form]);\n\n  const handleFieldsChange = useCallback(\n    (data) => {\n      if (data[0]) {\n        if (data[0].name) {\n          const currentInputField = data[0].name[0];\n          console.log(currentInputField);\n\n          if (currentInputField === 'standard_assets' || currentInputField === 'insert_type') {\n            setFields(\n              getFields(form.getFieldValue('standard_assets'), form.getFieldValue('insert_type')),\n            );\n            setLabels(\n              getLabels(form.getFieldValue('standard_assets'), form.getFieldValue('insert_type')),\n            );\n            updateTotalKitQtysCols();\n            updateMonthCols();\n          } else {\n            const totalKitQtysCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'quantity',\n            );\n            const qtyPerKitCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'quantity_perkit',\n            );\n            const rateCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'rate',\n            );\n            const totalMatReqCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'tot_mat_req',\n            );\n            const totalCostCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'total_cost',\n            );\n            const monthCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'month',\n            );\n            const depCostCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'dep_cost',\n            );\n\n            qtyPerKitCols.forEach((i, idx) => {\n              if (\n                currentInputField === totalKitQtysCols[idx] ||\n                currentInputField === qtyPerKitCols[idx] ||\n                currentInputField === rateCols[idx] ||\n                currentInputField === totalMatReqCols[idx] ||\n                currentInputField === totalCostCols[idx] ||\n                currentInputField === monthCols[idx] ||\n                currentInputField === depCostCols[idx]\n              ) {\n                if (\n                  form.getFieldValue(totalKitQtysCols[idx]) &&\n                  form.getFieldValue(qtyPerKitCols[idx])\n                ) {\n                  const totalMatReqVal =\n                    form.getFieldValue(totalKitQtysCols[idx]) *\n                    form.getFieldValue(qtyPerKitCols[idx]);\n                  form.setFieldsValue({\n                    [totalMatReqCols[idx]]: totalMatReqVal,\n                    [totalCostCols[idx]]: form.getFieldValue(rateCols[idx]) * totalMatReqVal,\n                  });\n                } else {\n                  form.setFieldsValue({\n                    [totalMatReqCols[idx]]: 0,\n                    [totalCostCols[idx]]: 0,\n                  });\n                }\n\n                if (\n                  form.getFieldValue(totalCostCols[idx]) &&\n                  form.getFieldValue(monthCols[idx]) &&\n                  form.getFieldValue('yantra_cycle')\n                ) {\n                  form.setFieldsValue({\n                    [depCostCols[idx]]: _.round(\n                      (form.getFieldValue(totalCostCols[idx]) /\n                        form.getFieldValue(monthCols[idx]) /\n                        30) *\n                        form.getFieldValue('yantra_cycle'),\n                      2,\n                    ),\n                  });\n                } else {\n                  form.setFieldsValue({\n                    [depCostCols[idx]]: 0,\n                  });\n                }\n              }\n            });\n          }\n        }\n      }\n    },\n    [form, fields, labels],\n  );\n\n  // const handleFieldsChange = (data) => {\n  //   if(data[0]){\n  //     if(data[0].name){\n  //       if(data[0].name[0]==='standard_assets') {\n  //         // console.log(getFields(data[0].value),form.getFieldValue('insert_type'),'Ggg')\n  //         setFields(getFields(data[0].value,form.getFieldValue('insert_type')))\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\n  //       }\n  //       if(data[0].name[0]==='insert_type') {\n  //         // console.log(form.getFieldValue('standard_assets'),getFields(data[0].value),'Ggg')\n  //         setFields(getFields(form.getFieldValue('standard_assets'),data[0].value))\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\n  //       }}}\n  // }\n\n  return (\n    <Spin spinning={loading}>\n      <Form\n        initialValues={{\n          ...state,\n          insert_type: state.insert_type || 'Insert',\n          standard_assets: state.standard_assets || 'FLC',\n        }}\n        onFinish={submit}\n        form={form}\n        layout=\"vertical\"\n        // hideRequiredMark\n        onFieldsChange={handleFieldsChange}\n        autoComplete=\"off\">\n        <Divider orientation=\"left\">Capex</Divider>\n        <div className=\"row px-2\">\n          {state.solution_flc ? <Tag>FLC</Tag> : null}\n          {state.solution_fsc ? <Tag>FSC</Tag> : null}\n          {state.solution_crate ? <Tag>Crate</Tag> : null}\n          {state.solution_ppbox ? <Tag>PP Box</Tag> : null}\n          {state.solution_palletized_box ? <Tag>Solution Palletized Box</Tag> : null}\n          {state.solution_palletized_crate ? <Tag>Solution Palletized Crate</Tag> : null}\n          {state.solution_pp ? <Tag>Solution PP</Tag> : null}\n          {state.solution_stacking_nesting ? <Tag>Solution Stacking Nesting</Tag> : null}\n          {state.solution_wp ? <Tag>Solution WP</Tag> : null}\n        </div>\n        <Row style={{justifyContent: 'left'}}>\n          {solutionProposalCreateCPFormFields.map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          <Col span={3}>\n            <div className=\"p-2 flex row justify-center\">\n              <b />\n            </div>\n          </Col>\n          {[...fields].slice(0, 7).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item.customLabel}</b>\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(0, 1).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(0, 7).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(1, 2).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(7, 14).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(2, 3).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(14, 21).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(3, 4).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(21, 28).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(4, 5).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(28, 35).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(5, 6).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(35, 42).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(6, 7).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(42, 49).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        {/* <Form.List name='solutions'> */}\n        {/*  {(fields, { add, remove }) => { */}\n        {/*    return ( */}\n        {/*      <div> */}\n        {/*        {fields.map((field, index) => ( */}\n        {/*          <Row align='middle'> */}\n        {/*            {formListSolutionProposalCreateCPFormFields.slice(0,1).map((item) => ( */}\n        {/*              <Col span={4}> */}\n        {/*                <div className='p-2'> */}\n        {/*                  {formItem({ */}\n        {/*                    ...item, */}\n        {/*                    noLabel: index !== 0, */}\n        {/*                    form, */}\n        {/*                    others: { */}\n        {/*                      formOptions: { */}\n        {/*                        ...field, */}\n        {/*                        // hidden:true, */}\n        {/*                        name: [field.name, item.key], */}\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\n        {/*                      }, */}\n        {/*                    }, */}\n        {/*                  })} */}\n        {/*                </div> */}\n        {/*              </Col> */}\n        {/*            ))} */}\n        {/*            {[...createFields('std_ast')].slice(1,7).map((item) => ( */}\n        {/*              <Col span={3}> */}\n        {/*                <div className='p-2'> */}\n        {/*                  {formItem({ */}\n        {/*                    ...item, */}\n        {/*                    noLabel: index !== 0, */}\n        {/*                    form, */}\n        {/*                    others: { */}\n        {/*                      formOptions: { */}\n        {/*                        ...field, */}\n        {/*                        name: [field.name, item.key], */}\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\n        {/*                      }, */}\n        {/*                    }, */}\n        {/*                  })} */}\n        {/*                </div> */}\n        {/*              </Col> */}\n        {/*            ))} */}\n        {/*          </Row> */}\n        {/*        ))} */}\n        {/*      </div> */}\n        {/*    ); */}\n        {/*  }} */}\n        {/* </Form.List> */}\n        <Row justify=\"space-between\">\n          <div className=\"row\">\n            <Button type=\"primary\" htmlType=\"submit\" disabled>\n              Submit\n            </Button>\n            <div className=\"p-2\" />\n            <Button type=\"primary\" onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n          <Button type=\"link\" htmlType=\"submit\">\n            <ArrowRightOutlined style={{fontSize: 30}} />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default SolutionProposalCreateCPForm;\n"],"sourceRoot":""}